/*===-----------------------------*  C#  *---------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace Test.Xyz {

using System.Collections.Generic;
using System.IO;
using System.Text;
using System;
using Test.Abc;

/// 测试基本的列表类型.
public sealed class TestList
: Invar.BinaryDecode
, Invar.BinaryEncode
, Invar.JSONEncode
, Invar.XMLEncode
{
    public const uint CRC32 = 0x5FD1194A;

    private List<SByte>   listI08     = new List<SByte>(); // 有符号的8位整数.
    private List<Int16>   listI16     = new List<Int16>(); // 有符号的16位整数.
    private List<Int32>   listI32     = new List<Int32>(); // 有符号的32位整数.
    private List<Int64>   listI64     = new List<Int64>(); // 有符号的64位整数.
    private List<Byte>    listU08     = new List<Byte>(); // 无符号的8位整数.
    private List<UInt16>  listU16     = new List<UInt16>(); // 无符号的16位整数.
    private List<UInt32>  listU32     = new List<UInt32>(); // 无符号的32位整数.
    private List<UInt64>  listU64     = new List<UInt64>(); // 无符号的64位整数.
    private List<Single>  listSingle  = new List<Single>(); // 单精度浮点小数.
    private List<Double>  listDouble  = new List<Double>(); // 双精度浮点小数.
    private List<Boolean> listBoolean = new List<Boolean>(); // 布尔值.
    private List<String>  listString  = new List<String>(); // 字符串.
    private List<Gender>  listEnum    = new List<Gender>(); // 枚举值.
    private List<Custom>  listStruct  = new List<Custom>(); // 自定义结构.

    /// 有符号的8位整数.
    [Invar.InvarRule("vec<int8>", "0")]
    public List<SByte> GetListI08() { return this.listI08; }

    /// 有符号的16位整数.
    [Invar.InvarRule("vec<int16>", "1")]
    public List<Int16> GetListI16() { return this.listI16; }

    /// 有符号的32位整数.
    [Invar.InvarRule("vec<int32>", "2")]
    public List<Int32> GetListI32() { return this.listI32; }

    /// 有符号的64位整数.
    [Invar.InvarRule("vec<int64>", "3")]
    public List<Int64> GetListI64() { return this.listI64; }

    /// 无符号的8位整数.
    [Invar.InvarRule("vec<uint8>", "4")]
    public List<Byte> GetListU08() { return this.listU08; }

    /// 无符号的16位整数.
    [Invar.InvarRule("vec<uint16>", "5")]
    public List<UInt16> GetListU16() { return this.listU16; }

    /// 无符号的32位整数.
    [Invar.InvarRule("vec<uint32>", "6")]
    public List<UInt32> GetListU32() { return this.listU32; }

    /// 无符号的64位整数.
    [Invar.InvarRule("vec<uint64>", "7")]
    public List<UInt64> GetListU64() { return this.listU64; }

    /// 单精度浮点小数.
    [Invar.InvarRule("vec<float>", "8")]
    public List<Single> GetListSingle() { return this.listSingle; }

    /// 双精度浮点小数.
    [Invar.InvarRule("vec<double>", "9")]
    public List<Double> GetListDouble() { return this.listDouble; }

    /// 布尔值.
    [Invar.InvarRule("vec<bool>", "10")]
    public List<Boolean> GetListBoolean() { return this.listBoolean; }

    /// 字符串.
    [Invar.InvarRule("vec<string>", "11")]
    public List<String> GetListString() { return this.listString; }

    /// 枚举值.
    [Invar.InvarRule("vec<Test.Abc.Gender>", "12")]
    public List<Gender> GetListEnum() { return this.listEnum; }

    /// 自定义结构.
    [Invar.InvarRule("vec<Test.Abc.Custom>", "13")]
    public List<Custom> GetListStruct() { return this.listStruct; }

    public TestList Reuse()
    {
        this.listI08.Clear();
        this.listI16.Clear();
        this.listI32.Clear();
        this.listI64.Clear();
        this.listU08.Clear();
        this.listU16.Clear();
        this.listU32.Clear();
        this.listU64.Clear();
        this.listSingle.Clear();
        this.listDouble.Clear();
        this.listBoolean.Clear();
        this.listString.Clear();
        this.listEnum.Clear();
        this.listStruct.Clear();
        return this;
    } //TestList::Reuse()

    public TestList Copy(TestList from_)
    {
        if (null == from_ || this == from_) {
            return this;
        }
        this.listI08.Clear();
        this.listI08.AddRange(from_.listI08);
        this.listI16.Clear();
        this.listI16.AddRange(from_.listI16);
        this.listI32.Clear();
        this.listI32.AddRange(from_.listI32);
        this.listI64.Clear();
        this.listI64.AddRange(from_.listI64);
        this.listU08.Clear();
        this.listU08.AddRange(from_.listU08);
        this.listU16.Clear();
        this.listU16.AddRange(from_.listU16);
        this.listU32.Clear();
        this.listU32.AddRange(from_.listU32);
        this.listU64.Clear();
        this.listU64.AddRange(from_.listU64);
        this.listSingle.Clear();
        this.listSingle.AddRange(from_.listSingle);
        this.listDouble.Clear();
        this.listDouble.AddRange(from_.listDouble);
        this.listBoolean.Clear();
        this.listBoolean.AddRange(from_.listBoolean);
        this.listString.Clear();
        this.listString.AddRange(from_.listString);
        this.listEnum.Clear();
        this.listEnum.AddRange(from_.listEnum);
        this.listStruct.Clear();
        this.listStruct.AddRange(from_.listStruct);
        return this;
    } //TestList::Copy(...)

    public void Read(BinaryReader r)
    {
        UInt32 lenListI08 = r.ReadUInt32();
        for (UInt32 iListI08 = 0; iListI08 < lenListI08; iListI08++) {
            SByte n1 = r.ReadSByte();
            this.listI08.Add(n1);
        }
        UInt32 lenListI16 = r.ReadUInt32();
        for (UInt32 iListI16 = 0; iListI16 < lenListI16; iListI16++) {
            Int16 n1 = r.ReadInt16();
            this.listI16.Add(n1);
        }
        UInt32 lenListI32 = r.ReadUInt32();
        for (UInt32 iListI32 = 0; iListI32 < lenListI32; iListI32++) {
            Int32 n1 = r.ReadInt32();
            this.listI32.Add(n1);
        }
        UInt32 lenListI64 = r.ReadUInt32();
        for (UInt32 iListI64 = 0; iListI64 < lenListI64; iListI64++) {
            Int64 n1 = r.ReadInt64();
            this.listI64.Add(n1);
        }
        UInt32 lenListU08 = r.ReadUInt32();
        for (UInt32 iListU08 = 0; iListU08 < lenListU08; iListU08++) {
            Byte n1 = r.ReadByte();
            this.listU08.Add(n1);
        }
        UInt32 lenListU16 = r.ReadUInt32();
        for (UInt32 iListU16 = 0; iListU16 < lenListU16; iListU16++) {
            UInt16 n1 = r.ReadUInt16();
            this.listU16.Add(n1);
        }
        UInt32 lenListU32 = r.ReadUInt32();
        for (UInt32 iListU32 = 0; iListU32 < lenListU32; iListU32++) {
            UInt32 n1 = r.ReadUInt32();
            this.listU32.Add(n1);
        }
        UInt32 lenListU64 = r.ReadUInt32();
        for (UInt32 iListU64 = 0; iListU64 < lenListU64; iListU64++) {
            UInt64 n1 = r.ReadUInt64();
            this.listU64.Add(n1);
        }
        UInt32 lenListSingle = r.ReadUInt32();
        for (UInt32 iListSingle = 0; iListSingle < lenListSingle; iListSingle++) {
            Single n1 = r.ReadSingle();
            this.listSingle.Add(n1);
        }
        UInt32 lenListDouble = r.ReadUInt32();
        for (UInt32 iListDouble = 0; iListDouble < lenListDouble; iListDouble++) {
            Double n1 = r.ReadDouble();
            this.listDouble.Add(n1);
        }
        UInt32 lenListBoolean = r.ReadUInt32();
        for (UInt32 iListBoolean = 0; iListBoolean < lenListBoolean; iListBoolean++) {
            Boolean n1 = r.ReadBoolean();
            this.listBoolean.Add(n1);
        }
        UInt32 lenListString = r.ReadUInt32();
        for (UInt32 iListString = 0; iListString < lenListString; iListString++) {
            String n1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
            this.listString.Add(n1);
        }
        UInt32 lenListEnum = r.ReadUInt32();
        for (UInt32 iListEnum = 0; iListEnum < lenListEnum; iListEnum++) {
            Gender n1 = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
            this.listEnum.Add(n1);
        }
        UInt32 lenListStruct = r.ReadUInt32();
        for (UInt32 iListStruct = 0; iListStruct < lenListStruct; iListStruct++) {
            Custom n1 = new Custom();
            n1.Read(r);
            this.listStruct.Add(n1);
        }
    } //TestList::Read(...)

    public void Write(BinaryWriter w)
    {
        w.Write(this.listI08.Count);
        foreach (SByte n1 in this.listI08) {
            w.Write(n1);
        }
        w.Write(this.listI16.Count);
        foreach (Int16 n1 in this.listI16) {
            w.Write(n1);
        }
        w.Write(this.listI32.Count);
        foreach (Int32 n1 in this.listI32) {
            w.Write(n1);
        }
        w.Write(this.listI64.Count);
        foreach (Int64 n1 in this.listI64) {
            w.Write(n1);
        }
        w.Write(this.listU08.Count);
        foreach (Byte n1 in this.listU08) {
            w.Write(n1);
        }
        w.Write(this.listU16.Count);
        foreach (UInt16 n1 in this.listU16) {
            w.Write(n1);
        }
        w.Write(this.listU32.Count);
        foreach (UInt32 n1 in this.listU32) {
            w.Write(n1);
        }
        w.Write(this.listU64.Count);
        foreach (UInt64 n1 in this.listU64) {
            w.Write(n1);
        }
        w.Write(this.listSingle.Count);
        foreach (Single n1 in this.listSingle) {
            w.Write(n1);
        }
        w.Write(this.listDouble.Count);
        foreach (Double n1 in this.listDouble) {
            w.Write(n1);
        }
        w.Write(this.listBoolean.Count);
        foreach (Boolean n1 in this.listBoolean) {
            w.Write(n1);
        }
        w.Write(this.listString.Count);
        foreach (String n1 in this.listString) {
            byte[] n1Bytes = Encoding.UTF8.GetBytes(n1);
            w.Write(n1Bytes.Length);
            w.Write(n1Bytes);
        }
        w.Write(this.listEnum.Count);
        foreach (Gender n1 in this.listEnum) {
            w.Write((Int32)n1);
        }
        w.Write(this.listStruct.Count);
        foreach (Custom n1 in this.listStruct) {
            n1.Write(w);
        }
    } //TestList::Write(...)

    public override String ToString()
    {
        StringBuilder result = new StringBuilder();
        result.Append('{').Append(' ');
        result.Append(GetType().ToString());
        result.Append(',').Append(' ').Append("listI08").Append(':');
        result.Append("(" + this.listI08.Count + ")");
        result.Append(',').Append(' ').Append("listI16").Append(':');
        result.Append("(" + this.listI16.Count + ")");
        result.Append(',').Append(' ').Append("listI32").Append(':');
        result.Append("(" + this.listI32.Count + ")");
        result.Append(',').Append(' ').Append("listI64").Append(':');
        result.Append("(" + this.listI64.Count + ")");
        result.Append(',').Append(' ').Append("listU08").Append(':');
        result.Append("(" + this.listU08.Count + ")");
        result.Append(',').Append(' ').Append("listU16").Append(':');
        result.Append("(" + this.listU16.Count + ")");
        result.Append(',').Append(' ').Append("listU32").Append(':');
        result.Append("(" + this.listU32.Count + ")");
        result.Append(',').Append(' ').Append("listU64").Append(':');
        result.Append("(" + this.listU64.Count + ")");
        result.Append(',').Append(' ').Append("listSingle").Append(':');
        result.Append("(" + this.listSingle.Count + ")");
        result.Append(',').Append(' ').Append("listDouble").Append(':');
        result.Append("(" + this.listDouble.Count + ")");
        result.Append(',').Append(' ').Append("listBoolean").Append(':');
        result.Append("(" + this.listBoolean.Count + ")");
        result.Append(',').Append(' ').Append("listString").Append(':');
        result.Append("(" + this.listString.Count + ")");
        result.Append(',').Append(' ').Append("listEnum").Append(':');
        result.Append("(" + this.listEnum.Count + ")");
        result.Append(',').Append(' ').Append("listStruct").Append(':');
        result.Append("(" + this.listStruct.Count + ")");
        result.Append(' ').Append('}');
        return result.ToString();
    } //TestList::ToString()

    public StringBuilder ToStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.WriteJSON(code);
        return code;
    }

    public void WriteJSON(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        bool listI08Exists = (null != this.listI08 && this.listI08.Count > 0);
        if (listI08Exists) { s.Append('"').Append("listI08").Append('"').Append(':'); comma = ","; }
        int listI08Size = (null == this.listI08 ? 0 : this.listI08.Count);
        if (listI08Size > 0) {
            s.Append('\n').Append('[');
            int listI08Idx = 0;
            foreach (SByte n1 in this.listI08) { /* vec.for: this.listI08 */
                ++listI08Idx;
                s.Append(n1.ToString());
                if (listI08Idx != listI08Size) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listI16Exists = (null != this.listI16 && this.listI16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI16Exists) { s.Append(comma); comma = null; }
        if (listI16Exists) { s.Append('"').Append("listI16").Append('"').Append(':'); comma = ","; }
        int listI16Size = (null == this.listI16 ? 0 : this.listI16.Count);
        if (listI16Size > 0) {
            s.Append('\n').Append('[');
            int listI16Idx = 0;
            foreach (Int16 n1 in this.listI16) { /* vec.for: this.listI16 */
                ++listI16Idx;
                s.Append(n1.ToString());
                if (listI16Idx != listI16Size) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listI32Exists = (null != this.listI32 && this.listI32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI32Exists) { s.Append(comma); comma = null; }
        if (listI32Exists) { s.Append('"').Append("listI32").Append('"').Append(':'); comma = ","; }
        int listI32Size = (null == this.listI32 ? 0 : this.listI32.Count);
        if (listI32Size > 0) {
            s.Append('\n').Append('[');
            int listI32Idx = 0;
            foreach (Int32 n1 in this.listI32) { /* vec.for: this.listI32 */
                ++listI32Idx;
                s.Append(n1.ToString());
                if (listI32Idx != listI32Size) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listI64Exists = (null != this.listI64 && this.listI64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI64Exists) { s.Append(comma); comma = null; }
        if (listI64Exists) { s.Append('"').Append("listI64").Append('"').Append(':'); comma = ","; }
        int listI64Size = (null == this.listI64 ? 0 : this.listI64.Count);
        if (listI64Size > 0) {
            s.Append('\n').Append('[');
            int listI64Idx = 0;
            foreach (Int64 n1 in this.listI64) { /* vec.for: this.listI64 */
                ++listI64Idx;
                s.Append(n1.ToString());
                if (listI64Idx != listI64Size) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listU08Exists = (null != this.listU08 && this.listU08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU08Exists) { s.Append(comma); comma = null; }
        if (listU08Exists) { s.Append('"').Append("listU08").Append('"').Append(':'); comma = ","; }
        int listU08Size = (null == this.listU08 ? 0 : this.listU08.Count);
        if (listU08Size > 0) {
            s.Append('\n').Append('[');
            int listU08Idx = 0;
            foreach (Byte n1 in this.listU08) { /* vec.for: this.listU08 */
                ++listU08Idx;
                s.Append(n1.ToString());
                if (listU08Idx != listU08Size) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listU16Exists = (null != this.listU16 && this.listU16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU16Exists) { s.Append(comma); comma = null; }
        if (listU16Exists) { s.Append('"').Append("listU16").Append('"').Append(':'); comma = ","; }
        int listU16Size = (null == this.listU16 ? 0 : this.listU16.Count);
        if (listU16Size > 0) {
            s.Append('\n').Append('[');
            int listU16Idx = 0;
            foreach (UInt16 n1 in this.listU16) { /* vec.for: this.listU16 */
                ++listU16Idx;
                s.Append(n1.ToString());
                if (listU16Idx != listU16Size) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listU32Exists = (null != this.listU32 && this.listU32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU32Exists) { s.Append(comma); comma = null; }
        if (listU32Exists) { s.Append('"').Append("listU32").Append('"').Append(':'); comma = ","; }
        int listU32Size = (null == this.listU32 ? 0 : this.listU32.Count);
        if (listU32Size > 0) {
            s.Append('\n').Append('[');
            int listU32Idx = 0;
            foreach (UInt32 n1 in this.listU32) { /* vec.for: this.listU32 */
                ++listU32Idx;
                s.Append(n1.ToString());
                if (listU32Idx != listU32Size) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listU64Exists = (null != this.listU64 && this.listU64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU64Exists) { s.Append(comma); comma = null; }
        if (listU64Exists) { s.Append('"').Append("listU64").Append('"').Append(':'); comma = ","; }
        int listU64Size = (null == this.listU64 ? 0 : this.listU64.Count);
        if (listU64Size > 0) {
            s.Append('\n').Append('[');
            int listU64Idx = 0;
            foreach (UInt64 n1 in this.listU64) { /* vec.for: this.listU64 */
                ++listU64Idx;
                s.Append(n1.ToString());
                if (listU64Idx != listU64Size) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listSingleExists = (null != this.listSingle && this.listSingle.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listSingleExists) { s.Append(comma); comma = null; }
        if (listSingleExists) { s.Append('"').Append("listSingle").Append('"').Append(':'); comma = ","; }
        int listSingleSize = (null == this.listSingle ? 0 : this.listSingle.Count);
        if (listSingleSize > 0) {
            s.Append('\n').Append('[');
            int listSingleIdx = 0;
            foreach (Single n1 in this.listSingle) { /* vec.for: this.listSingle */
                ++listSingleIdx;
                s.Append(n1.ToString());
                if (listSingleIdx != listSingleSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listDoubleExists = (null != this.listDouble && this.listDouble.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listDoubleExists) { s.Append(comma); comma = null; }
        if (listDoubleExists) { s.Append('"').Append("listDouble").Append('"').Append(':'); comma = ","; }
        int listDoubleSize = (null == this.listDouble ? 0 : this.listDouble.Count);
        if (listDoubleSize > 0) {
            s.Append('\n').Append('[');
            int listDoubleIdx = 0;
            foreach (Double n1 in this.listDouble) { /* vec.for: this.listDouble */
                ++listDoubleIdx;
                s.Append(n1.ToString());
                if (listDoubleIdx != listDoubleSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listBooleanExists = (null != this.listBoolean && this.listBoolean.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listBooleanExists) { s.Append(comma); comma = null; }
        if (listBooleanExists) { s.Append('"').Append("listBoolean").Append('"').Append(':'); comma = ","; }
        int listBooleanSize = (null == this.listBoolean ? 0 : this.listBoolean.Count);
        if (listBooleanSize > 0) {
            s.Append('\n').Append('[');
            int listBooleanIdx = 0;
            foreach (Boolean n1 in this.listBoolean) { /* vec.for: this.listBoolean */
                ++listBooleanIdx;
                s.Append(n1.ToString().ToLower());
                if (listBooleanIdx != listBooleanSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listStringExists = (null != this.listString && this.listString.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listStringExists) { s.Append(comma); comma = null; }
        if (listStringExists) { s.Append('"').Append("listString").Append('"').Append(':'); comma = ","; }
        int listStringSize = (null == this.listString ? 0 : this.listString.Count);
        if (listStringSize > 0) {
            s.Append('\n').Append('[');
            int listStringIdx = 0;
            foreach (String n1 in this.listString) { /* vec.for: this.listString */
                ++listStringIdx;
                s.Append('"').Append(n1.ToString()).Append('"');
                if (listStringIdx != listStringSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listEnumExists = (null != this.listEnum && this.listEnum.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listEnumExists) { s.Append(comma); comma = null; }
        if (listEnumExists) { s.Append('"').Append("listEnum").Append('"').Append(':'); comma = ","; }
        int listEnumSize = (null == this.listEnum ? 0 : this.listEnum.Count);
        if (listEnumSize > 0) {
            s.Append('\n').Append('[');
            int listEnumIdx = 0;
            foreach (Gender n1 in this.listEnum) { /* vec.for: this.listEnum */
                ++listEnumIdx;
                s.Append((int)n1);;
                if (listEnumIdx != listEnumSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool listStructExists = (null != this.listStruct && this.listStruct.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listStructExists) { s.Append(comma); comma = null; }
        if (listStructExists) { s.Append('"').Append("listStruct").Append('"').Append(':'); comma = ","; }
        int listStructSize = (null == this.listStruct ? 0 : this.listStruct.Count);
        if (listStructSize > 0) {
            s.Append('\n').Append('[');
            int listStructIdx = 0;
            foreach (Custom n1 in this.listStruct) { /* vec.for: this.listStruct */
                ++listStructIdx;
                n1.WriteJSON(s);
                if (listStructIdx != listStructSize) { s.Append(','); }
            }
            s.Append(']');
        }
        s.Append('}').Append('\n');
    } //TestList::WriteJSON(...)

    public StringBuilder ToStringLua()
    {
        StringBuilder code = new StringBuilder();
        code.Append("-- TestList.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" --").Append('\n');
        code.Append("local table=");
        this.WriteLua(code); code.Append(';');
        return code;
    }

    public void WriteLua(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        bool listI08Exists = (null != this.listI08 && this.listI08.Count > 0);
        if (listI08Exists) { s.Append("listI08").Append('='); comma = ","; }
        int listI08Size = (null == this.listI08 ? 0 : this.listI08.Count);
        if (listI08Size > 0) {
            s.Append('\n').Append('{');
            int listI08Idx = 0;
            foreach (SByte n1 in this.listI08) { /* vec.for: this.listI08 */
                ++listI08Idx;
                s.Append(n1.ToString());
                if (listI08Idx != listI08Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listI16Exists = (null != this.listI16 && this.listI16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI16Exists) { s.Append(comma); comma = null; }
        if (listI16Exists) { s.Append("listI16").Append('='); comma = ","; }
        int listI16Size = (null == this.listI16 ? 0 : this.listI16.Count);
        if (listI16Size > 0) {
            s.Append('\n').Append('{');
            int listI16Idx = 0;
            foreach (Int16 n1 in this.listI16) { /* vec.for: this.listI16 */
                ++listI16Idx;
                s.Append(n1.ToString());
                if (listI16Idx != listI16Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listI32Exists = (null != this.listI32 && this.listI32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI32Exists) { s.Append(comma); comma = null; }
        if (listI32Exists) { s.Append("listI32").Append('='); comma = ","; }
        int listI32Size = (null == this.listI32 ? 0 : this.listI32.Count);
        if (listI32Size > 0) {
            s.Append('\n').Append('{');
            int listI32Idx = 0;
            foreach (Int32 n1 in this.listI32) { /* vec.for: this.listI32 */
                ++listI32Idx;
                s.Append(n1.ToString());
                if (listI32Idx != listI32Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listI64Exists = (null != this.listI64 && this.listI64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI64Exists) { s.Append(comma); comma = null; }
        if (listI64Exists) { s.Append("listI64").Append('='); comma = ","; }
        int listI64Size = (null == this.listI64 ? 0 : this.listI64.Count);
        if (listI64Size > 0) {
            s.Append('\n').Append('{');
            int listI64Idx = 0;
            foreach (Int64 n1 in this.listI64) { /* vec.for: this.listI64 */
                ++listI64Idx;
                s.Append(n1.ToString());
                if (listI64Idx != listI64Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listU08Exists = (null != this.listU08 && this.listU08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU08Exists) { s.Append(comma); comma = null; }
        if (listU08Exists) { s.Append("listU08").Append('='); comma = ","; }
        int listU08Size = (null == this.listU08 ? 0 : this.listU08.Count);
        if (listU08Size > 0) {
            s.Append('\n').Append('{');
            int listU08Idx = 0;
            foreach (Byte n1 in this.listU08) { /* vec.for: this.listU08 */
                ++listU08Idx;
                s.Append(n1.ToString());
                if (listU08Idx != listU08Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listU16Exists = (null != this.listU16 && this.listU16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU16Exists) { s.Append(comma); comma = null; }
        if (listU16Exists) { s.Append("listU16").Append('='); comma = ","; }
        int listU16Size = (null == this.listU16 ? 0 : this.listU16.Count);
        if (listU16Size > 0) {
            s.Append('\n').Append('{');
            int listU16Idx = 0;
            foreach (UInt16 n1 in this.listU16) { /* vec.for: this.listU16 */
                ++listU16Idx;
                s.Append(n1.ToString());
                if (listU16Idx != listU16Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listU32Exists = (null != this.listU32 && this.listU32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU32Exists) { s.Append(comma); comma = null; }
        if (listU32Exists) { s.Append("listU32").Append('='); comma = ","; }
        int listU32Size = (null == this.listU32 ? 0 : this.listU32.Count);
        if (listU32Size > 0) {
            s.Append('\n').Append('{');
            int listU32Idx = 0;
            foreach (UInt32 n1 in this.listU32) { /* vec.for: this.listU32 */
                ++listU32Idx;
                s.Append(n1.ToString());
                if (listU32Idx != listU32Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listU64Exists = (null != this.listU64 && this.listU64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU64Exists) { s.Append(comma); comma = null; }
        if (listU64Exists) { s.Append("listU64").Append('='); comma = ","; }
        int listU64Size = (null == this.listU64 ? 0 : this.listU64.Count);
        if (listU64Size > 0) {
            s.Append('\n').Append('{');
            int listU64Idx = 0;
            foreach (UInt64 n1 in this.listU64) { /* vec.for: this.listU64 */
                ++listU64Idx;
                s.Append(n1.ToString());
                if (listU64Idx != listU64Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listSingleExists = (null != this.listSingle && this.listSingle.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listSingleExists) { s.Append(comma); comma = null; }
        if (listSingleExists) { s.Append("listSingle").Append('='); comma = ","; }
        int listSingleSize = (null == this.listSingle ? 0 : this.listSingle.Count);
        if (listSingleSize > 0) {
            s.Append('\n').Append('{');
            int listSingleIdx = 0;
            foreach (Single n1 in this.listSingle) { /* vec.for: this.listSingle */
                ++listSingleIdx;
                s.Append(n1.ToString());
                if (listSingleIdx != listSingleSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listDoubleExists = (null != this.listDouble && this.listDouble.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listDoubleExists) { s.Append(comma); comma = null; }
        if (listDoubleExists) { s.Append("listDouble").Append('='); comma = ","; }
        int listDoubleSize = (null == this.listDouble ? 0 : this.listDouble.Count);
        if (listDoubleSize > 0) {
            s.Append('\n').Append('{');
            int listDoubleIdx = 0;
            foreach (Double n1 in this.listDouble) { /* vec.for: this.listDouble */
                ++listDoubleIdx;
                s.Append(n1.ToString());
                if (listDoubleIdx != listDoubleSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listBooleanExists = (null != this.listBoolean && this.listBoolean.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listBooleanExists) { s.Append(comma); comma = null; }
        if (listBooleanExists) { s.Append("listBoolean").Append('='); comma = ","; }
        int listBooleanSize = (null == this.listBoolean ? 0 : this.listBoolean.Count);
        if (listBooleanSize > 0) {
            s.Append('\n').Append('{');
            int listBooleanIdx = 0;
            foreach (Boolean n1 in this.listBoolean) { /* vec.for: this.listBoolean */
                ++listBooleanIdx;
                s.Append(n1.ToString().ToLower());
                if (listBooleanIdx != listBooleanSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listStringExists = (null != this.listString && this.listString.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listStringExists) { s.Append(comma); comma = null; }
        if (listStringExists) { s.Append("listString").Append('='); comma = ","; }
        int listStringSize = (null == this.listString ? 0 : this.listString.Count);
        if (listStringSize > 0) {
            s.Append('\n').Append('{');
            int listStringIdx = 0;
            foreach (String n1 in this.listString) { /* vec.for: this.listString */
                ++listStringIdx;
                s.Append('"').Append(n1.ToString()).Append('"');
                if (listStringIdx != listStringSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listEnumExists = (null != this.listEnum && this.listEnum.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listEnumExists) { s.Append(comma); comma = null; }
        if (listEnumExists) { s.Append("listEnum").Append('='); comma = ","; }
        int listEnumSize = (null == this.listEnum ? 0 : this.listEnum.Count);
        if (listEnumSize > 0) {
            s.Append('\n').Append('{');
            int listEnumIdx = 0;
            foreach (Gender n1 in this.listEnum) { /* vec.for: this.listEnum */
                ++listEnumIdx;
                s.Append((int)n1);;
                if (listEnumIdx != listEnumSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool listStructExists = (null != this.listStruct && this.listStruct.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listStructExists) { s.Append(comma); comma = null; }
        if (listStructExists) { s.Append("listStruct").Append('='); comma = ","; }
        int listStructSize = (null == this.listStruct ? 0 : this.listStruct.Count);
        if (listStructSize > 0) {
            s.Append('\n').Append('{');
            int listStructIdx = 0;
            foreach (Custom n1 in this.listStruct) { /* vec.for: this.listStruct */
                ++listStructIdx;
                n1.WriteLua(s);
                if (listStructIdx != listStructSize) { s.Append(','); }
                s.Append('}');
            }
        }
        s.Append('}').Append('\n');
    }

    public StringBuilder ToStringPHP()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?php ").Append("/* TestList.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" */").Append('\n');
        code.Append('\n').Append("return ");
        this.WritePHP(code); code.Append(';').Append('\n');
        return code;
    }

    public void WritePHP(StringBuilder s)
    {
        s.Append("array").Append('(').Append('\n');
        string comma = null;
        bool listI08Exists = (null != this.listI08 && this.listI08.Count > 0);
        if (listI08Exists) { s.Append('\'').Append("listI08").Append('\'').Append("=>"); comma = ","; }
        int listI08Size = (null == this.listI08 ? 0 : this.listI08.Count);
        if (listI08Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int listI08Idx = 0;
            foreach (SByte n1 in this.listI08) { /* vec.for: this.listI08 */
                ++listI08Idx;
                s.Append(n1.ToString());
                if (listI08Idx != listI08Size) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listI08.Count).Append(" */").Append(')');
        }
        bool listI16Exists = (null != this.listI16 && this.listI16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI16Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (listI16Exists) { s.Append('\'').Append("listI16").Append('\'').Append("=>"); comma = ","; }
        int listI16Size = (null == this.listI16 ? 0 : this.listI16.Count);
        if (listI16Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int listI16Idx = 0;
            foreach (Int16 n1 in this.listI16) { /* vec.for: this.listI16 */
                ++listI16Idx;
                s.Append(n1.ToString());
                if (listI16Idx != listI16Size) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listI16.Count).Append(" */").Append(')');
        }
        bool listI32Exists = (null != this.listI32 && this.listI32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI32Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (listI32Exists) { s.Append('\'').Append("listI32").Append('\'').Append("=>"); comma = ","; }
        int listI32Size = (null == this.listI32 ? 0 : this.listI32.Count);
        if (listI32Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int listI32Idx = 0;
            foreach (Int32 n1 in this.listI32) { /* vec.for: this.listI32 */
                ++listI32Idx;
                s.Append(n1.ToString());
                if (listI32Idx != listI32Size) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listI32.Count).Append(" */").Append(')');
        }
        bool listI64Exists = (null != this.listI64 && this.listI64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI64Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (listI64Exists) { s.Append('\'').Append("listI64").Append('\'').Append("=>"); comma = ","; }
        int listI64Size = (null == this.listI64 ? 0 : this.listI64.Count);
        if (listI64Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int listI64Idx = 0;
            foreach (Int64 n1 in this.listI64) { /* vec.for: this.listI64 */
                ++listI64Idx;
                s.Append(n1.ToString());
                if (listI64Idx != listI64Size) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listI64.Count).Append(" */").Append(')');
        }
        bool listU08Exists = (null != this.listU08 && this.listU08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU08Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (listU08Exists) { s.Append('\'').Append("listU08").Append('\'').Append("=>"); comma = ","; }
        int listU08Size = (null == this.listU08 ? 0 : this.listU08.Count);
        if (listU08Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int listU08Idx = 0;
            foreach (Byte n1 in this.listU08) { /* vec.for: this.listU08 */
                ++listU08Idx;
                s.Append(n1.ToString());
                if (listU08Idx != listU08Size) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listU08.Count).Append(" */").Append(')');
        }
        bool listU16Exists = (null != this.listU16 && this.listU16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU16Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (listU16Exists) { s.Append('\'').Append("listU16").Append('\'').Append("=>"); comma = ","; }
        int listU16Size = (null == this.listU16 ? 0 : this.listU16.Count);
        if (listU16Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int listU16Idx = 0;
            foreach (UInt16 n1 in this.listU16) { /* vec.for: this.listU16 */
                ++listU16Idx;
                s.Append(n1.ToString());
                if (listU16Idx != listU16Size) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listU16.Count).Append(" */").Append(')');
        }
        bool listU32Exists = (null != this.listU32 && this.listU32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU32Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (listU32Exists) { s.Append('\'').Append("listU32").Append('\'').Append("=>"); comma = ","; }
        int listU32Size = (null == this.listU32 ? 0 : this.listU32.Count);
        if (listU32Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int listU32Idx = 0;
            foreach (UInt32 n1 in this.listU32) { /* vec.for: this.listU32 */
                ++listU32Idx;
                s.Append(n1.ToString());
                if (listU32Idx != listU32Size) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listU32.Count).Append(" */").Append(')');
        }
        bool listU64Exists = (null != this.listU64 && this.listU64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listU64Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (listU64Exists) { s.Append('\'').Append("listU64").Append('\'').Append("=>"); comma = ","; }
        int listU64Size = (null == this.listU64 ? 0 : this.listU64.Count);
        if (listU64Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int listU64Idx = 0;
            foreach (UInt64 n1 in this.listU64) { /* vec.for: this.listU64 */
                ++listU64Idx;
                s.Append(n1.ToString());
                if (listU64Idx != listU64Size) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listU64.Count).Append(" */").Append(')');
        }
        bool listSingleExists = (null != this.listSingle && this.listSingle.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listSingleExists) { s.Append(comma).Append('\n'); comma = null; }
        if (listSingleExists) { s.Append('\'').Append("listSingle").Append('\'').Append("=>"); comma = ","; }
        int listSingleSize = (null == this.listSingle ? 0 : this.listSingle.Count);
        if (listSingleSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int listSingleIdx = 0;
            foreach (Single n1 in this.listSingle) { /* vec.for: this.listSingle */
                ++listSingleIdx;
                s.Append(n1.ToString());
                if (listSingleIdx != listSingleSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listSingle.Count).Append(" */").Append(')');
        }
        bool listDoubleExists = (null != this.listDouble && this.listDouble.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listDoubleExists) { s.Append(comma).Append('\n'); comma = null; }
        if (listDoubleExists) { s.Append('\'').Append("listDouble").Append('\'').Append("=>"); comma = ","; }
        int listDoubleSize = (null == this.listDouble ? 0 : this.listDouble.Count);
        if (listDoubleSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int listDoubleIdx = 0;
            foreach (Double n1 in this.listDouble) { /* vec.for: this.listDouble */
                ++listDoubleIdx;
                s.Append(n1.ToString());
                if (listDoubleIdx != listDoubleSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listDouble.Count).Append(" */").Append(')');
        }
        bool listBooleanExists = (null != this.listBoolean && this.listBoolean.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listBooleanExists) { s.Append(comma).Append('\n'); comma = null; }
        if (listBooleanExists) { s.Append('\'').Append("listBoolean").Append('\'').Append("=>"); comma = ","; }
        int listBooleanSize = (null == this.listBoolean ? 0 : this.listBoolean.Count);
        if (listBooleanSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int listBooleanIdx = 0;
            foreach (Boolean n1 in this.listBoolean) { /* vec.for: this.listBoolean */
                ++listBooleanIdx;
                s.Append(n1.ToString().ToLower());
                if (listBooleanIdx != listBooleanSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listBoolean.Count).Append(" */").Append(')');
        }
        bool listStringExists = (null != this.listString && this.listString.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listStringExists) { s.Append(comma).Append('\n'); comma = null; }
        if (listStringExists) { s.Append('\'').Append("listString").Append('\'').Append("=>"); comma = ","; }
        int listStringSize = (null == this.listString ? 0 : this.listString.Count);
        if (listStringSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int listStringIdx = 0;
            foreach (String n1 in this.listString) { /* vec.for: this.listString */
                ++listStringIdx;
                s.Append('\'').Append(n1.ToString()).Append('\'');
                if (listStringIdx != listStringSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listString.Count).Append(" */").Append(')');
        }
        bool listEnumExists = (null != this.listEnum && this.listEnum.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listEnumExists) { s.Append(comma).Append('\n'); comma = null; }
        if (listEnumExists) { s.Append('\'').Append("listEnum").Append('\'').Append("=>"); comma = ","; }
        int listEnumSize = (null == this.listEnum ? 0 : this.listEnum.Count);
        if (listEnumSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int listEnumIdx = 0;
            foreach (Gender n1 in this.listEnum) { /* vec.for: this.listEnum */
                ++listEnumIdx;
                s.Append((int)n1);
                s.Append("/*Gender::").Append(n1.ToString()).Append("*/");
                if (listEnumIdx != listEnumSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listEnum.Count).Append(" */").Append(')');
        }
        bool listStructExists = (null != this.listStruct && this.listStruct.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listStructExists) { s.Append(comma).Append('\n'); comma = null; }
        if (listStructExists) { s.Append('\'').Append("listStruct").Append('\'').Append("=>"); comma = ","; }
        int listStructSize = (null == this.listStruct ? 0 : this.listStruct.Count);
        if (listStructSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int listStructIdx = 0;
            foreach (Custom n1 in this.listStruct) { /* vec.for: this.listStruct */
                ++listStructIdx;
                n1.WritePHP(s);
                if (listStructIdx != listStructSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listStruct.Count).Append(" */").Append(')');
        }
        s.Append("/* ").Append(GetType().ToString()).Append(" */");
        s.Append(')');
    }

    public StringBuilder ToStringXML()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        code.Append('\n').Append("<!-- ").Append("TestList").Append(".CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" -->");
        this.WriteXML(code, "TestList");
        return code;
    }

    public void WriteXML(StringBuilder s, String name)
    {
        StringBuilder attrs = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        if (this.listI08.Count > 0) {
            nodes.Append('\n').Append('<').Append("listI08").Append('>');
            foreach (SByte n1 in this.listI08) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listI08").Append('>');
        }
        if (this.listI16.Count > 0) {
            nodes.Append('\n').Append('<').Append("listI16").Append('>');
            foreach (Int16 n1 in this.listI16) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listI16").Append('>');
        }
        if (this.listI32.Count > 0) {
            nodes.Append('\n').Append('<').Append("listI32").Append('>');
            foreach (Int32 n1 in this.listI32) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listI32").Append('>');
        }
        if (this.listI64.Count > 0) {
            nodes.Append('\n').Append('<').Append("listI64").Append('>');
            foreach (Int64 n1 in this.listI64) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listI64").Append('>');
        }
        if (this.listU08.Count > 0) {
            nodes.Append('\n').Append('<').Append("listU08").Append('>');
            foreach (Byte n1 in this.listU08) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listU08").Append('>');
        }
        if (this.listU16.Count > 0) {
            nodes.Append('\n').Append('<').Append("listU16").Append('>');
            foreach (UInt16 n1 in this.listU16) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listU16").Append('>');
        }
        if (this.listU32.Count > 0) {
            nodes.Append('\n').Append('<').Append("listU32").Append('>');
            foreach (UInt32 n1 in this.listU32) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listU32").Append('>');
        }
        if (this.listU64.Count > 0) {
            nodes.Append('\n').Append('<').Append("listU64").Append('>');
            foreach (UInt64 n1 in this.listU64) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listU64").Append('>');
        }
        if (this.listSingle.Count > 0) {
            nodes.Append('\n').Append('<').Append("listSingle").Append('>');
            foreach (Single n1 in this.listSingle) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listSingle").Append('>');
        }
        if (this.listDouble.Count > 0) {
            nodes.Append('\n').Append('<').Append("listDouble").Append('>');
            foreach (Double n1 in this.listDouble) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listDouble").Append('>');
        }
        if (this.listBoolean.Count > 0) {
            nodes.Append('\n').Append('<').Append("listBoolean").Append('>');
            foreach (Boolean n1 in this.listBoolean) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listBoolean").Append('>');
        }
        if (this.listString.Count > 0) {
            nodes.Append('\n').Append('<').Append("listString").Append('>');
            foreach (String n1 in this.listString) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listString").Append('>');
        }
        if (this.listEnum.Count > 0) {
            nodes.Append('\n').Append('<').Append("listEnum").Append('>');
            foreach (Gender n1 in this.listEnum) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listEnum").Append('>');
        }
        if (this.listStruct.Count > 0) {
            nodes.Append('\n').Append('<').Append("listStruct").Append('>');
            foreach (Custom n1 in this.listStruct) {
                n1.WriteXML(nodes, "n1");
            }
            nodes.Append('<').Append('/').Append("listStruct").Append('>');
        }
        s.Append('\n').Append('<').Append(name).Append(attrs);
        if (nodes.Length == 0) {
            s.Append('/').Append('>');
        } else {
            s.Append('>').Append(nodes);
            s.Append('<').Append('/').Append(name).Append('>');
        }
    } //TestList::WriteXML(...)

} /* class: TestList */
/*
1@test.xyz.TestList/vec-int8/vec-int16/vec-int32/vec-int64/vec-uint8/vec-uint16/vec-uint32/vec-uint6
  4/vec-float/vec-double/vec-bool/vec-string/vec-int32/vec-test.abc.Custom
+@test.abc.Custom/int32/test.abc.TestBasic/test.xyz.Conflict/test.abc.Conflict/vec-test.abc.Custom/i
  nt32/string/string/test.abc.Custom/test.abc.Custom/string
*/
} //namespace: Test.Xyz