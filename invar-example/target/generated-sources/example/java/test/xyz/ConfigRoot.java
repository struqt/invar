/*===----------------------------*  Java 6  *------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/
package test.xyz;

import invar.lib.CodecError;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.LinkedHashMap;
import java.util.Map;
import test.abc.Info;

/**  */
public final class ConfigRoot
implements
invar.lib.InvarCodec.BinaryDecode,
invar.lib.InvarCodec.BinaryEncode,
invar.lib.InvarCodec.XMLEncode
{
    static public final long CRC32 = 0x6D03BB9BL;

    static public ConfigRoot Create()
    {
        return new ConfigRoot();
    }

    private String                       revision;
    private TestList                     list    ;
    private TestDict                     dict    ;
    private TestNest                     nest    ;
    private Info                         info    ;
    private InfoX                        infox   ;
    private LinkedHashMap<String,String> hotfix  ;/* [AutoAdd] Hotfix */

    public ConfigRoot()
    {
        revision = "1.0.0";
        list     = TestList.Create();
        dict     = TestDict.Create();
        nest     = TestNest.Create();
        info     = Info.Create();
        infox    = InfoX.Create();
        hotfix   = null;
    }

    public ConfigRoot reuse()
    {
        revision = "1.0.0";
        list.reuse();
        dict.reuse();
        nest.reuse();
        info.reuse();
        infox.reuse();
        if (hotfix != null) {
            hotfix.clear();
        }
        return this;
    }

    /**  */
    @invar.lib.InvarRule(T="string", S="f0")
    public String getRevision() { return revision; }
    /**  */
    @invar.lib.InvarRule(T="test.xyz.TestList", S="f1")
    public TestList getList() { return list; }
    /**  */
    @invar.lib.InvarRule(T="test.xyz.TestDict", S="f2")
    public TestDict getDict() { return dict; }
    /**  */
    @invar.lib.InvarRule(T="test.xyz.TestNest", S="f3")
    public TestNest getNest() { return nest; }
    /**  */
    @invar.lib.InvarRule(T="test.abc.Info", S="f4")
    public Info getInfo() { return info; }
    /**  */
    @invar.lib.InvarRule(T="test.xyz.InfoX", S="f5")
    public InfoX getInfox() { return infox; }
    /** [AutoAdd] Hotfix */
    @invar.lib.InvarRule(T="map<string,string>", S="f6")
    public LinkedHashMap<java.lang.String,java.lang.String> getHotfix() { return hotfix; }

    /**  */
    @invar.lib.InvarRule(T="string", S="f0")
    public void setRevision(String value) { this.revision = value; }
    /**  */
    @invar.lib.InvarRule(T="test.xyz.TestList", S="f1")
    public void setList(TestList value) { this.list = value; }
    /**  */
    @invar.lib.InvarRule(T="test.xyz.TestDict", S="f2")
    public void setDict(TestDict value) { this.dict = value; }
    /**  */
    @invar.lib.InvarRule(T="test.xyz.TestNest", S="f3")
    public void setNest(TestNest value) { this.nest = value; }
    /**  */
    @invar.lib.InvarRule(T="test.abc.Info", S="f4")
    public void setInfo(Info value) { this.info = value; }
    /**  */
    @invar.lib.InvarRule(T="test.xyz.InfoX", S="f5")
    public void setInfox(InfoX value) { this.infox = value; }
    /** [AutoAdd] Hotfix */
    @invar.lib.InvarRule(T="map<string,string>", S="f6")
    public void setHotfix(LinkedHashMap<java.lang.String,java.lang.String> value) { this.hotfix = value; }

    /** Shallow copy */
    public ConfigRoot copy(ConfigRoot from_)
    {
        if (this == from_ || from_ == null) {
            return this;
        }
        revision = from_.revision;
        list = from_.list;
        dict = from_.dict;
        nest = from_.nest;
        info = from_.info;
        infox = from_.infox;
        if (null == from_.hotfix) {
            hotfix = null;
        } else {
            if (null == hotfix) { hotfix = new LinkedHashMap<java.lang.String,java.lang.String>(); }
            else { hotfix.clear(); }
            hotfix.putAll(from_.hotfix);
        }
        return this;
    } /* copyFrom(...) */

    public void read(InputStream from_) throws IOException, CodecError
    {
        this.read((DataInput)new DataInputStream(from_));
    }

    public void read(DataInput from_) throws IOException, CodecError
    {
        revision = from_.readUTF();
        list.read(from_);
        dict.read(from_);
        nest.read(from_);
        info.read(from_);
        infox.read(from_);
        byte hotfixExists = from_.readByte();
        if ((byte)0x01 == hotfixExists) {
            if (hotfix == null) { hotfix = new LinkedHashMap<java.lang.String,java.lang.String>(); }
            Long lenHotfix = from_.readInt() & 0xFFFFFFFFL;
            for (Long iHotfix = 0L; iHotfix < lenHotfix; ++iHotfix) {
                java.lang.String k1 = from_.readUTF();
                java.lang.String v1 = from_.readUTF();
                hotfix.put(k1,v1);
            }
        }
        else if ((byte)0x00 == hotfixExists) { hotfix = null; }
        else { throw new CodecError(CodecError.ERR_DECODE_VEC_MAP_P); }
    }

    public void write(OutputStream dest_) throws IOException
    {
        this.write((DataOutput)new DataOutputStream(dest_));
    }

    public void write(DataOutput dest_) throws IOException
    {
        dest_.writeUTF(revision);
        list.write(dest_);
        dict.write(dest_);
        nest.write(dest_);
        info.write(dest_);
        infox.write(dest_);
        if (hotfix != null) {
            dest_.writeByte((byte)0x01);
            dest_.writeInt(hotfix.size());
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                dest_.writeUTF(k1);
                java.lang.String v1 = hotfixIter.getValue();
                dest_.writeUTF(v1);
            }
        } else {
            dest_.writeByte((byte)0x00);
        }
    }

    public String toString()
    {
        StringBuilder s = new StringBuilder();
        s.append('{');
        s.append(getClass().getName());
        s.append(',').append("revision").append(':');
        s.append('"').append(revision).append('"');
        s.append(',').append("list").append(':');
        s.append('<').append("TestList").append('>');
        s.append(',').append("dict").append(':');
        s.append('<').append("TestDict").append('>');
        s.append(',').append("nest").append(':');
        s.append('<').append("TestNest").append('>');
        s.append(',').append("info").append(':');
        s.append('<').append("Info").append('>');
        s.append(',').append("infox").append(':');
        s.append('<').append("InfoX").append('>');
        s.append(", hotfix:");
        if (hotfix != null) {
            s.append('[').append(hotfix.size()).append(']');
        } else {
            s.append("null");
        }
        s.append('}');
        return s.toString();
    } //ConfigRoot::toString ()

    public String toStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.writeJSON(code);
        return code.toString();
    }

    public void writeJSON(StringBuilder _)
    {
        _.append('{');
        char comma = '\0';
        boolean revisionExists = revision != null && revision.length() > 0;
        if (revisionExists) {
            _.append('"').append("revision").append('"').append(':'); comma = ','; _.append('"').append(revision.toString()).append('"');
        }
        boolean listExists = (null != list);
        if ('\0' != comma && listExists) { _.append(comma); comma = '\0'; }
        if (listExists) {
            _.append('"').append("list").append('"').append(':'); comma = ','; list.writeJSON(_);
        }
        boolean dictExists = (null != dict);
        if ('\0' != comma && dictExists) { _.append(comma); comma = '\0'; }
        if (dictExists) {
            _.append('"').append("dict").append('"').append(':'); comma = ','; dict.writeJSON(_);
        }
        boolean nestExists = (null != nest);
        if ('\0' != comma && nestExists) { _.append(comma); comma = '\0'; }
        if (nestExists) {
            _.append('"').append("nest").append('"').append(':'); comma = ','; nest.writeJSON(_);
        }
        boolean infoExists = (null != info);
        if ('\0' != comma && infoExists) { _.append(comma); comma = '\0'; }
        if (infoExists) {
            _.append('"').append("info").append('"').append(':'); comma = ','; info.writeJSON(_);
        }
        boolean infoxExists = (null != infox);
        if ('\0' != comma && infoxExists) { _.append(comma); comma = '\0'; }
        if (infoxExists) {
            _.append('"').append("infox").append('"').append(':'); comma = ','; infox.writeJSON(_);
        }
        boolean hotfixExists = (null != hotfix && hotfix.size() > 0);
        if ('\0' != comma && hotfixExists) { _.append(comma); comma = '\0'; }
        if (hotfixExists) {
            int hotfixSize = (null == hotfix ? 0 : hotfix.size());
            if (hotfixSize > 0) {
                _.append('{');
                int hotfixIdx = 0;
                for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) { /* map.for: hotfix */
                    ++hotfixIdx;
                    java.lang.String k1 = hotfixIter.getKey(); /* nest.k */
                    _.append('"').append(k1.toString()).append('"'); _.append(':');
                    java.lang.String v1 = hotfixIter.getValue(); /* nest.v */
                    _.append('"').append(v1.toString()).append('"');
                    if (hotfixIdx != hotfixSize) { _.append(','); }
                }
                _.append('}');
            } comma = ',';
        }
        _.append('}');
    } /* ConfigRoot::writeJSON(...) */

    public String toStringXML()
    {
        StringBuilder code = new StringBuilder();
        this.writeXML(code, "ConfigRoot");
        return code.toString();
    }

    public void writeXML(StringBuilder result_, String name_)
    {
        StringBuilder attrs  = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        attrs.append(' ').append("revision").append('=').append('"');
        attrs.append(revision).append('"');
        list.writeXML(nodes, "list");
        dict.writeXML(nodes, "dict");
        nest.writeXML(nodes, "nest");
        info.writeXML(nodes, "info");
        infox.writeXML(nodes, "infox");
        if (hotfix != null && hotfix.size() > 0) {
            nodes.append('<').append("hotfix").append('>');
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1).append('"').append('/').append('>');
                java.lang.String v1 = hotfixIter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("hotfix").append('>');
        }
        result_.append('<').append(name_).append(attrs);
        if (nodes.length() == 0) {
            result_.append('/').append('>');
        } else {
            result_.append('>').append(nodes);
            result_.append('<').append('/').append(name_).append('>');
        }
    } /* ConfigRoot::writeXML(...) */

}

