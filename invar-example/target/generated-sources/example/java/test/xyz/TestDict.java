/*===----------------------------*  Java 6  *------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/
package test.xyz;

import invar.lib.CodecError;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.util.LinkedHashMap;
import java.util.Map;
import test.abc.Custom;
import test.abc.Gender;

/** 测试基本的映射类型 */
public final class TestDict
implements
invar.lib.InvarCodec.BinaryDecode,
invar.lib.InvarCodec.BinaryEncode,
invar.lib.InvarCodec.XMLEncode
{
    static public final long CRC32 = 0x969046DEL;

    static public TestDict Create()
    {
        return new TestDict();
    }

    private LinkedHashMap<Byte,Byte>             dictI08    ;/* 有符号的8位整数 */
    private LinkedHashMap<Short,Short>           dictI16    ;/* 有符号的16位整数 */
    private LinkedHashMap<Integer,Integer>       dictI32    ;/* 有符号的32位整数 */
    private LinkedHashMap<Long,Long>             dictI64    ;/* 有符号的64位整数 */
    private LinkedHashMap<Integer,Integer>       dictU08    ;/* 无符号的8位整数 */
    private LinkedHashMap<Integer,Integer>       dictU16    ;/* 无符号的16位整数 */
    private LinkedHashMap<Long,Long>             dictU32    ;/* 无符号的32位整数 */
    private LinkedHashMap<BigInteger,BigInteger> dictU64    ;/* 无符号的64位整数 */
    private LinkedHashMap<Float,Float>           dictSingle ;/* 单精度浮点小数 */
    private LinkedHashMap<Double,Double>         dictDouble ;/* 双精度浮点小数 */
    private LinkedHashMap<Boolean,Boolean>       dictBoolean;/* 布尔值 */
    private LinkedHashMap<String,String>         dictString ;/* 字符串 */
    private LinkedHashMap<Gender,Gender>         dictEnum   ;/* 枚举值 */
    private LinkedHashMap<Custom,Custom>         dictStruct ;/* 自定义结构 */
    private LinkedHashMap<String,String>         hotfix     ;/* [AutoAdd] Hotfix */

    public TestDict()
    {
        dictI08     = new LinkedHashMap<Byte,Byte>();
        dictI16     = new LinkedHashMap<Short,Short>();
        dictI32     = new LinkedHashMap<Integer,Integer>();
        dictI64     = new LinkedHashMap<Long,Long>();
        dictU08     = new LinkedHashMap<Integer,Integer>();
        dictU16     = new LinkedHashMap<Integer,Integer>();
        dictU32     = new LinkedHashMap<Long,Long>();
        dictU64     = new LinkedHashMap<BigInteger,BigInteger>();
        dictSingle  = new LinkedHashMap<Float,Float>();
        dictDouble  = new LinkedHashMap<Double,Double>();
        dictBoolean = new LinkedHashMap<Boolean,Boolean>();
        dictString  = new LinkedHashMap<String,String>();
        dictEnum    = new LinkedHashMap<Gender,Gender>();
        dictStruct  = new LinkedHashMap<Custom,Custom>();
        hotfix      = null;
    }

    public TestDict reuse()
    {
        dictI08.clear();
        dictI16.clear();
        dictI32.clear();
        dictI64.clear();
        dictU08.clear();
        dictU16.clear();
        dictU32.clear();
        dictU64.clear();
        dictSingle.clear();
        dictDouble.clear();
        dictBoolean.clear();
        dictString.clear();
        dictEnum.clear();
        dictStruct.clear();
        if (hotfix != null) {
            hotfix.clear();
        }
        return this;
    }

    /** 有符号的8位整数 */
    @invar.lib.InvarRule(T="map<int8,int8>", S="f0")
    public LinkedHashMap<java.lang.Byte,java.lang.Byte> getDictI08() { return dictI08; }
    /** 有符号的16位整数 */
    @invar.lib.InvarRule(T="map<int16,int16>", S="f1")
    public LinkedHashMap<Short,Short> getDictI16() { return dictI16; }
    /** 有符号的32位整数 */
    @invar.lib.InvarRule(T="map<int32,int32>", S="f2")
    public LinkedHashMap<Integer,Integer> getDictI32() { return dictI32; }
    /** 有符号的64位整数 */
    @invar.lib.InvarRule(T="map<int64,int64>", S="f3")
    public LinkedHashMap<Long,Long> getDictI64() { return dictI64; }
    /** 无符号的8位整数 */
    @invar.lib.InvarRule(T="map<uint8,uint8>", S="f4")
    public LinkedHashMap<java.lang.Integer,java.lang.Integer> getDictU08() { return dictU08; }
    /** 无符号的16位整数 */
    @invar.lib.InvarRule(T="map<uint16,uint16>", S="f5")
    public LinkedHashMap<java.lang.Integer,java.lang.Integer> getDictU16() { return dictU16; }
    /** 无符号的32位整数 */
    @invar.lib.InvarRule(T="map<uint32,uint32>", S="f6")
    public LinkedHashMap<java.lang.Long,java.lang.Long> getDictU32() { return dictU32; }
    /** 无符号的64位整数 */
    @invar.lib.InvarRule(T="map<uint64,uint64>", S="f7")
    public LinkedHashMap<BigInteger,BigInteger> getDictU64() { return dictU64; }
    /** 单精度浮点小数 */
    @invar.lib.InvarRule(T="map<float,float>", S="f8")
    public LinkedHashMap<Float,Float> getDictSingle() { return dictSingle; }
    /** 双精度浮点小数 */
    @invar.lib.InvarRule(T="map<double,double>", S="f9")
    public LinkedHashMap<java.lang.Double,java.lang.Double> getDictDouble() { return dictDouble; }
    /** 布尔值 */
    @invar.lib.InvarRule(T="map<bool,bool>", S="f10")
    public LinkedHashMap<java.lang.Boolean,java.lang.Boolean> getDictBoolean() { return dictBoolean; }
    /** 字符串 */
    @invar.lib.InvarRule(T="map<string,string>", S="f11")
    public LinkedHashMap<java.lang.String,java.lang.String> getDictString() { return dictString; }
    /** 枚举值 */
    @invar.lib.InvarRule(T="map<test.abc.Gender,test.abc.Gender>", S="f12")
    public LinkedHashMap<Gender,Gender> getDictEnum() { return dictEnum; }
    /** 自定义结构 */
    @invar.lib.InvarRule(T="map<test.abc.Custom,test.abc.Custom>", S="f13")
    public LinkedHashMap<Custom,Custom> getDictStruct() { return dictStruct; }
    /** [AutoAdd] Hotfix */
    @invar.lib.InvarRule(T="map<string,string>", S="f14")
    public LinkedHashMap<java.lang.String,java.lang.String> getHotfix() { return hotfix; }

    /** [AutoAdd] Hotfix */
    @invar.lib.InvarRule(T="map<string,string>", S="f14")
    public void setHotfix(LinkedHashMap<java.lang.String,java.lang.String> value) { this.hotfix = value; }

    /** Shallow copy */
    public TestDict copy(TestDict from)
    {
        if (this == from || from == null) {
            return this;
        }
        dictI08.clear();
        dictI08.putAll(from.dictI08);
        dictI16.clear();
        dictI16.putAll(from.dictI16);
        dictI32.clear();
        dictI32.putAll(from.dictI32);
        dictI64.clear();
        dictI64.putAll(from.dictI64);
        dictU08.clear();
        dictU08.putAll(from.dictU08);
        dictU16.clear();
        dictU16.putAll(from.dictU16);
        dictU32.clear();
        dictU32.putAll(from.dictU32);
        dictU64.clear();
        dictU64.putAll(from.dictU64);
        dictSingle.clear();
        dictSingle.putAll(from.dictSingle);
        dictDouble.clear();
        dictDouble.putAll(from.dictDouble);
        dictBoolean.clear();
        dictBoolean.putAll(from.dictBoolean);
        dictString.clear();
        dictString.putAll(from.dictString);
        dictEnum.clear();
        dictEnum.putAll(from.dictEnum);
        dictStruct.clear();
        dictStruct.putAll(from.dictStruct);
        if (null == from.hotfix) {
            hotfix = null;
        } else {
            if (null == hotfix) { hotfix = new LinkedHashMap<java.lang.String,java.lang.String>(); }
            else { hotfix.clear(); }
            hotfix.putAll(from.hotfix);
        }
        return this;
    } /* copyFrom(...) */

    public void read(InputStream from) throws IOException, CodecError
    {
        this.read((DataInput)new DataInputStream(from));
    }

    public void read(DataInput from) throws IOException, CodecError
    {
        dictI08.clear();
        Long lenDictI08 = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictI08 = 0L; iDictI08 < lenDictI08; ++iDictI08) {
            java.lang.Byte k1 = from.readByte();
            java.lang.Byte v1 = from.readByte();
            dictI08.put(k1,v1);
        }
        dictI16.clear();
        Long lenDictI16 = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictI16 = 0L; iDictI16 < lenDictI16; ++iDictI16) {
            Short k1 = from.readShort();
            Short v1 = from.readShort();
            dictI16.put(k1,v1);
        }
        dictI32.clear();
        Long lenDictI32 = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictI32 = 0L; iDictI32 < lenDictI32; ++iDictI32) {
            Integer k1 = from.readUnsignedShort();
            Integer v1 = from.readUnsignedShort();
            dictI32.put(k1,v1);
        }
        dictI64.clear();
        Long lenDictI64 = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictI64 = 0L; iDictI64 < lenDictI64; ++iDictI64) {
            Long k1 = from.readInt() & 0xFFFFFFFFL;
            Long v1 = from.readInt() & 0xFFFFFFFFL;
            dictI64.put(k1,v1);
        }
        dictU08.clear();
        Long lenDictU08 = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictU08 = 0L; iDictU08 < lenDictU08; ++iDictU08) {
            java.lang.Integer k1 = from.readUnsignedShort();
            java.lang.Integer v1 = from.readUnsignedShort();
            dictU08.put(k1,v1);
        }
        dictU16.clear();
        Long lenDictU16 = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictU16 = 0L; iDictU16 < lenDictU16; ++iDictU16) {
            java.lang.Integer k1 = from.readUnsignedShort();
            java.lang.Integer v1 = from.readUnsignedShort();
            dictU16.put(k1,v1);
        }
        dictU32.clear();
        Long lenDictU32 = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictU32 = 0L; iDictU32 < lenDictU32; ++iDictU32) {
            java.lang.Long k1 = from.readInt() & 0xFFFFFFFFL;
            java.lang.Long v1 = from.readInt() & 0xFFFFFFFFL;
            dictU32.put(k1,v1);
        }
        dictU64.clear();
        Long lenDictU64 = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictU64 = 0L; iDictU64 < lenDictU64; ++iDictU64) {
            byte[] k1Bytes = new byte[8]; from.readFully(k1Bytes, 0, 8);
            BigInteger k1 = new BigInteger(1, k1Bytes);
            byte[] v1Bytes = new byte[8]; from.readFully(v1Bytes, 0, 8);
            BigInteger v1 = new BigInteger(1, v1Bytes);
            dictU64.put(k1,v1);
        }
        dictSingle.clear();
        Long lenDictSingle = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictSingle = 0L; iDictSingle < lenDictSingle; ++iDictSingle) {
            Float k1 = from.readFloat();
            Float v1 = from.readFloat();
            dictSingle.put(k1,v1);
        }
        dictDouble.clear();
        Long lenDictDouble = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictDouble = 0L; iDictDouble < lenDictDouble; ++iDictDouble) {
            java.lang.Double k1 = from.readDouble();
            java.lang.Double v1 = from.readDouble();
            dictDouble.put(k1,v1);
        }
        dictBoolean.clear();
        Long lenDictBoolean = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictBoolean = 0L; iDictBoolean < lenDictBoolean; ++iDictBoolean) {
            java.lang.Boolean k1 = from.readBoolean();
            java.lang.Boolean v1 = from.readBoolean();
            dictBoolean.put(k1,v1);
        }
        dictString.clear();
        Long lenDictString = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictString = 0L; iDictString < lenDictString; ++iDictString) {
            java.lang.String k1 = from.readUTF();
            java.lang.String v1 = from.readUTF();
            dictString.put(k1,v1);
        }
        dictEnum.clear();
        Long lenDictEnum = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictEnum = 0L; iDictEnum < lenDictEnum; ++iDictEnum) {
            Gender k1 = Gender.valueOf(from.readInt());
            Gender v1 = Gender.valueOf(from.readInt());
            dictEnum.put(k1,v1);
        }
        dictStruct.clear();
        Long lenDictStruct = from.readInt() & 0xFFFFFFFFL;
        for (Long iDictStruct = 0L; iDictStruct < lenDictStruct; ++iDictStruct) {
            Custom k1 = Custom.Create();
            k1.read(from);
            Custom v1 = Custom.Create();
            v1.read(from);
            dictStruct.put(k1,v1);
        }
        byte hotfixExists = from.readByte();
        if ((byte)0x01 == hotfixExists) {
            if (hotfix == null) { hotfix = new LinkedHashMap<java.lang.String,java.lang.String>(); }
            Long lenHotfix = from.readInt() & 0xFFFFFFFFL;
            for (Long iHotfix = 0L; iHotfix < lenHotfix; ++iHotfix) {
                java.lang.String k1 = from.readUTF();
                java.lang.String v1 = from.readUTF();
                hotfix.put(k1,v1);
            }
        }
        else if ((byte)0x00 == hotfixExists) { hotfix = null; }
        else { throw new CodecError(CodecError.ERR_DECODE_VEC_MAP_P); }
    }

    public void write(OutputStream from) throws IOException
    {
        this.write((DataOutput)new DataOutputStream(from));
    }

    public void write(DataOutput dest) throws IOException
    {
        dest.writeInt(dictI08.size());
        for (Map.Entry<java.lang.Byte,java.lang.Byte> dictI08Iter : dictI08.entrySet()) {
            java.lang.Byte k1 = dictI08Iter.getKey();
            dest.writeByte(k1);
            java.lang.Byte v1 = dictI08Iter.getValue();
            dest.writeByte(v1);
        }
        dest.writeInt(dictI16.size());
        for (Map.Entry<Short,Short> dictI16Iter : dictI16.entrySet()) {
            Short k1 = dictI16Iter.getKey();
            dest.writeShort(k1);
            Short v1 = dictI16Iter.getValue();
            dest.writeShort(v1);
        }
        dest.writeInt(dictI32.size());
        for (Map.Entry<Integer,Integer> dictI32Iter : dictI32.entrySet()) {
            Integer k1 = dictI32Iter.getKey();
            dest.writeShort(k1);
            Integer v1 = dictI32Iter.getValue();
            dest.writeShort(v1);
        }
        dest.writeInt(dictI64.size());
        for (Map.Entry<Long,Long> dictI64Iter : dictI64.entrySet()) {
            Long k1 = dictI64Iter.getKey();
            dest.writeInt(k1.intValue());
            Long v1 = dictI64Iter.getValue();
            dest.writeInt(v1.intValue());
        }
        dest.writeInt(dictU08.size());
        for (Map.Entry<java.lang.Integer,java.lang.Integer> dictU08Iter : dictU08.entrySet()) {
            java.lang.Integer k1 = dictU08Iter.getKey();
            dest.writeShort(k1);
            java.lang.Integer v1 = dictU08Iter.getValue();
            dest.writeShort(v1);
        }
        dest.writeInt(dictU16.size());
        for (Map.Entry<java.lang.Integer,java.lang.Integer> dictU16Iter : dictU16.entrySet()) {
            java.lang.Integer k1 = dictU16Iter.getKey();
            dest.writeShort(k1);
            java.lang.Integer v1 = dictU16Iter.getValue();
            dest.writeShort(v1);
        }
        dest.writeInt(dictU32.size());
        for (Map.Entry<java.lang.Long,java.lang.Long> dictU32Iter : dictU32.entrySet()) {
            java.lang.Long k1 = dictU32Iter.getKey();
            dest.writeInt(k1.intValue());
            java.lang.Long v1 = dictU32Iter.getValue();
            dest.writeInt(v1.intValue());
        }
        dest.writeInt(dictU64.size());
        for (Map.Entry<BigInteger,BigInteger> dictU64Iter : dictU64.entrySet()) {
            BigInteger k1 = dictU64Iter.getKey();
            dest.writeLong(k1.longValue());
            BigInteger v1 = dictU64Iter.getValue();
            dest.writeLong(v1.longValue());
        }
        dest.writeInt(dictSingle.size());
        for (Map.Entry<Float,Float> dictSingleIter : dictSingle.entrySet()) {
            Float k1 = dictSingleIter.getKey();
            dest.writeFloat(k1);
            Float v1 = dictSingleIter.getValue();
            dest.writeFloat(v1);
        }
        dest.writeInt(dictDouble.size());
        for (Map.Entry<java.lang.Double,java.lang.Double> dictDoubleIter : dictDouble.entrySet()) {
            java.lang.Double k1 = dictDoubleIter.getKey();
            dest.writeDouble(k1);
            java.lang.Double v1 = dictDoubleIter.getValue();
            dest.writeDouble(v1);
        }
        dest.writeInt(dictBoolean.size());
        for (Map.Entry<java.lang.Boolean,java.lang.Boolean> dictBooleanIter : dictBoolean.entrySet()) {
            java.lang.Boolean k1 = dictBooleanIter.getKey();
            dest.writeBoolean(k1);
            java.lang.Boolean v1 = dictBooleanIter.getValue();
            dest.writeBoolean(v1);
        }
        dest.writeInt(dictString.size());
        for (Map.Entry<java.lang.String,java.lang.String> dictStringIter : dictString.entrySet()) {
            java.lang.String k1 = dictStringIter.getKey();
            dest.writeUTF(k1);
            java.lang.String v1 = dictStringIter.getValue();
            dest.writeUTF(v1);
        }
        dest.writeInt(dictEnum.size());
        for (Map.Entry<Gender,Gender> dictEnumIter : dictEnum.entrySet()) {
            Gender k1 = dictEnumIter.getKey();
            dest.writeInt(k1.value());
            Gender v1 = dictEnumIter.getValue();
            dest.writeInt(v1.value());
        }
        dest.writeInt(dictStruct.size());
        for (Map.Entry<Custom,Custom> dictStructIter : dictStruct.entrySet()) {
            Custom k1 = dictStructIter.getKey();
            k1.write(dest);
            Custom v1 = dictStructIter.getValue();
            v1.write(dest);
        }
        if (hotfix != null) {
            dest.writeByte((byte)0x01);
            dest.writeInt(hotfix.size());
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                dest.writeUTF(k1);
                java.lang.String v1 = hotfixIter.getValue();
                dest.writeUTF(v1);
            }
        } else {
            dest.writeByte((byte)0x00);
        }
    }

    public String toString()
    {
        StringBuilder s = new StringBuilder();
        s.append('{');
        s.append(getClass().getName());
        s.append(',').append("dictI08").append(':');
        s.append('[').append(dictI08.size()).append(']');
        s.append(',').append("dictI16").append(':');
        s.append('[').append(dictI16.size()).append(']');
        s.append(',').append("dictI32").append(':');
        s.append('[').append(dictI32.size()).append(']');
        s.append(',').append("dictI64").append(':');
        s.append('[').append(dictI64.size()).append(']');
        s.append(',').append("dictU08").append(':');
        s.append('[').append(dictU08.size()).append(']');
        s.append(',').append("dictU16").append(':');
        s.append('[').append(dictU16.size()).append(']');
        s.append(',').append("dictU32").append(':');
        s.append('[').append(dictU32.size()).append(']');
        s.append(',').append("dictU64").append(':');
        s.append('[').append(dictU64.size()).append(']');
        s.append(',').append("dictSingle").append(':');
        s.append('[').append(dictSingle.size()).append(']');
        s.append(',').append("dictDouble").append(':');
        s.append('[').append(dictDouble.size()).append(']');
        s.append(',').append("dictBoolean").append(':');
        s.append('[').append(dictBoolean.size()).append(']');
        s.append(',').append("dictString").append(':');
        s.append('[').append(dictString.size()).append(']');
        s.append(',').append("dictEnum").append(':');
        s.append('[').append(dictEnum.size()).append(']');
        s.append(',').append("dictStruct").append(':');
        s.append('[').append(dictStruct.size()).append(']');
        s.append(", hotfix:");
        if (hotfix != null) {
            s.append('[').append(hotfix.size()).append(']');
        } else {
            s.append("null");
        }
        s.append('}');
        return s.toString();
    } //TestDict::toString ()

    public String toStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.writeJSON(code);
        return code.toString();
    }

    public void writeJSON(StringBuilder s)
    {
        s.append('{');
        char comma = '\0';
        boolean dictI08Exists = (null != dictI08 && dictI08.size() > 0);
        if (dictI08Exists) { s.append('"').append("dictI08").append('"').append(':'); comma = ','; }
        int dictI08Size = (null == dictI08 ? 0 : dictI08.size());
        if (dictI08Size > 0) {
            s.append('{');
            int dictI08Idx = 0;
            for (Map.Entry<java.lang.Byte,java.lang.Byte> dictI08Iter : dictI08.entrySet()) { /* map.for: dictI08 */
                ++dictI08Idx;
                java.lang.Byte k1 = dictI08Iter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString()); s.append('"').append(':');
                java.lang.Byte v1 = dictI08Iter.getValue(); /* nest.v */
                s.append(v1.toString());
                if (dictI08Idx != dictI08Size) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictI16Exists = (null != dictI16 && dictI16.size() > 0);
        if ('\0' != comma && dictI16Exists) { s.append(comma); comma = '\0'; }
        if (dictI16Exists) { s.append('"').append("dictI16").append('"').append(':'); comma = ','; }
        int dictI16Size = (null == dictI16 ? 0 : dictI16.size());
        if (dictI16Size > 0) {
            s.append('{');
            int dictI16Idx = 0;
            for (Map.Entry<Short,Short> dictI16Iter : dictI16.entrySet()) { /* map.for: dictI16 */
                ++dictI16Idx;
                Short k1 = dictI16Iter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString()); s.append('"').append(':');
                Short v1 = dictI16Iter.getValue(); /* nest.v */
                s.append(v1.toString());
                if (dictI16Idx != dictI16Size) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictI32Exists = (null != dictI32 && dictI32.size() > 0);
        if ('\0' != comma && dictI32Exists) { s.append(comma); comma = '\0'; }
        if (dictI32Exists) { s.append('"').append("dictI32").append('"').append(':'); comma = ','; }
        int dictI32Size = (null == dictI32 ? 0 : dictI32.size());
        if (dictI32Size > 0) {
            s.append('{');
            int dictI32Idx = 0;
            for (Map.Entry<Integer,Integer> dictI32Iter : dictI32.entrySet()) { /* map.for: dictI32 */
                ++dictI32Idx;
                Integer k1 = dictI32Iter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString()); s.append('"').append(':');
                Integer v1 = dictI32Iter.getValue(); /* nest.v */
                s.append(v1.toString());
                if (dictI32Idx != dictI32Size) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictI64Exists = (null != dictI64 && dictI64.size() > 0);
        if ('\0' != comma && dictI64Exists) { s.append(comma); comma = '\0'; }
        if (dictI64Exists) { s.append('"').append("dictI64").append('"').append(':'); comma = ','; }
        int dictI64Size = (null == dictI64 ? 0 : dictI64.size());
        if (dictI64Size > 0) {
            s.append('{');
            int dictI64Idx = 0;
            for (Map.Entry<Long,Long> dictI64Iter : dictI64.entrySet()) { /* map.for: dictI64 */
                ++dictI64Idx;
                Long k1 = dictI64Iter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString()); s.append('"').append(':');
                Long v1 = dictI64Iter.getValue(); /* nest.v */
                s.append(v1.toString());
                if (dictI64Idx != dictI64Size) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictU08Exists = (null != dictU08 && dictU08.size() > 0);
        if ('\0' != comma && dictU08Exists) { s.append(comma); comma = '\0'; }
        if (dictU08Exists) { s.append('"').append("dictU08").append('"').append(':'); comma = ','; }
        int dictU08Size = (null == dictU08 ? 0 : dictU08.size());
        if (dictU08Size > 0) {
            s.append('{');
            int dictU08Idx = 0;
            for (Map.Entry<java.lang.Integer,java.lang.Integer> dictU08Iter : dictU08.entrySet()) { /* map.for: dictU08 */
                ++dictU08Idx;
                java.lang.Integer k1 = dictU08Iter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString()); s.append('"').append(':');
                java.lang.Integer v1 = dictU08Iter.getValue(); /* nest.v */
                s.append(v1.toString());
                if (dictU08Idx != dictU08Size) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictU16Exists = (null != dictU16 && dictU16.size() > 0);
        if ('\0' != comma && dictU16Exists) { s.append(comma); comma = '\0'; }
        if (dictU16Exists) { s.append('"').append("dictU16").append('"').append(':'); comma = ','; }
        int dictU16Size = (null == dictU16 ? 0 : dictU16.size());
        if (dictU16Size > 0) {
            s.append('{');
            int dictU16Idx = 0;
            for (Map.Entry<java.lang.Integer,java.lang.Integer> dictU16Iter : dictU16.entrySet()) { /* map.for: dictU16 */
                ++dictU16Idx;
                java.lang.Integer k1 = dictU16Iter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString()); s.append('"').append(':');
                java.lang.Integer v1 = dictU16Iter.getValue(); /* nest.v */
                s.append(v1.toString());
                if (dictU16Idx != dictU16Size) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictU32Exists = (null != dictU32 && dictU32.size() > 0);
        if ('\0' != comma && dictU32Exists) { s.append(comma); comma = '\0'; }
        if (dictU32Exists) { s.append('"').append("dictU32").append('"').append(':'); comma = ','; }
        int dictU32Size = (null == dictU32 ? 0 : dictU32.size());
        if (dictU32Size > 0) {
            s.append('{');
            int dictU32Idx = 0;
            for (Map.Entry<java.lang.Long,java.lang.Long> dictU32Iter : dictU32.entrySet()) { /* map.for: dictU32 */
                ++dictU32Idx;
                java.lang.Long k1 = dictU32Iter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString()); s.append('"').append(':');
                java.lang.Long v1 = dictU32Iter.getValue(); /* nest.v */
                s.append(v1.toString());
                if (dictU32Idx != dictU32Size) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictU64Exists = (null != dictU64 && dictU64.size() > 0);
        if ('\0' != comma && dictU64Exists) { s.append(comma); comma = '\0'; }
        if (dictU64Exists) { s.append('"').append("dictU64").append('"').append(':'); comma = ','; }
        int dictU64Size = (null == dictU64 ? 0 : dictU64.size());
        if (dictU64Size > 0) {
            s.append('{');
            int dictU64Idx = 0;
            for (Map.Entry<BigInteger,BigInteger> dictU64Iter : dictU64.entrySet()) { /* map.for: dictU64 */
                ++dictU64Idx;
                BigInteger k1 = dictU64Iter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString()); s.append('"').append(':');
                BigInteger v1 = dictU64Iter.getValue(); /* nest.v */
                s.append(v1.toString());
                if (dictU64Idx != dictU64Size) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictSingleExists = (null != dictSingle && dictSingle.size() > 0);
        if ('\0' != comma && dictSingleExists) { s.append(comma); comma = '\0'; }
        if (dictSingleExists) { s.append('"').append("dictSingle").append('"').append(':'); comma = ','; }
        int dictSingleSize = (null == dictSingle ? 0 : dictSingle.size());
        if (dictSingleSize > 0) {
            s.append('{');
            int dictSingleIdx = 0;
            for (Map.Entry<Float,Float> dictSingleIter : dictSingle.entrySet()) { /* map.for: dictSingle */
                ++dictSingleIdx;
                Float k1 = dictSingleIter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString()); s.append('"').append(':');
                Float v1 = dictSingleIter.getValue(); /* nest.v */
                s.append(v1.toString());
                if (dictSingleIdx != dictSingleSize) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictDoubleExists = (null != dictDouble && dictDouble.size() > 0);
        if ('\0' != comma && dictDoubleExists) { s.append(comma); comma = '\0'; }
        if (dictDoubleExists) { s.append('"').append("dictDouble").append('"').append(':'); comma = ','; }
        int dictDoubleSize = (null == dictDouble ? 0 : dictDouble.size());
        if (dictDoubleSize > 0) {
            s.append('{');
            int dictDoubleIdx = 0;
            for (Map.Entry<java.lang.Double,java.lang.Double> dictDoubleIter : dictDouble.entrySet()) { /* map.for: dictDouble */
                ++dictDoubleIdx;
                java.lang.Double k1 = dictDoubleIter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString()); s.append('"').append(':');
                java.lang.Double v1 = dictDoubleIter.getValue(); /* nest.v */
                s.append(v1.toString());
                if (dictDoubleIdx != dictDoubleSize) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictBooleanExists = (null != dictBoolean && dictBoolean.size() > 0);
        if ('\0' != comma && dictBooleanExists) { s.append(comma); comma = '\0'; }
        if (dictBooleanExists) { s.append('"').append("dictBoolean").append('"').append(':'); comma = ','; }
        int dictBooleanSize = (null == dictBoolean ? 0 : dictBoolean.size());
        if (dictBooleanSize > 0) {
            s.append('{');
            int dictBooleanIdx = 0;
            for (Map.Entry<java.lang.Boolean,java.lang.Boolean> dictBooleanIter : dictBoolean.entrySet()) { /* map.for: dictBoolean */
                ++dictBooleanIdx;
                java.lang.Boolean k1 = dictBooleanIter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.toString().toLowerCase()); s.append('"').append(':');
                java.lang.Boolean v1 = dictBooleanIter.getValue(); /* nest.v */
                s.append(v1.toString().toLowerCase());
                if (dictBooleanIdx != dictBooleanSize) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictStringExists = (null != dictString && dictString.size() > 0);
        if ('\0' != comma && dictStringExists) { s.append(comma); comma = '\0'; }
        if (dictStringExists) { s.append('"').append("dictString").append('"').append(':'); comma = ','; }
        int dictStringSize = (null == dictString ? 0 : dictString.size());
        if (dictStringSize > 0) {
            s.append('{');
            int dictStringIdx = 0;
            for (Map.Entry<java.lang.String,java.lang.String> dictStringIter : dictString.entrySet()) { /* map.for: dictString */
                ++dictStringIdx;
                java.lang.String k1 = dictStringIter.getKey(); /* nest.k */
                s.append('"').append(k1.toString()).append('"'); s.append(':');
                java.lang.String v1 = dictStringIter.getValue(); /* nest.v */
                s.append('"').append(v1.toString()).append('"');
                if (dictStringIdx != dictStringSize) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictEnumExists = (null != dictEnum && dictEnum.size() > 0);
        if ('\0' != comma && dictEnumExists) { s.append(comma); comma = '\0'; }
        if (dictEnumExists) { s.append('"').append("dictEnum").append('"').append(':'); comma = ','; }
        int dictEnumSize = (null == dictEnum ? 0 : dictEnum.size());
        if (dictEnumSize > 0) {
            s.append('{');
            int dictEnumIdx = 0;
            for (Map.Entry<Gender,Gender> dictEnumIter : dictEnum.entrySet()) { /* map.for: dictEnum */
                ++dictEnumIdx;
                Gender k1 = dictEnumIter.getKey(); /* nest.k */
                s.append('"'); s.append(k1.value()); s.append('"').append(':');
                Gender v1 = dictEnumIter.getValue(); /* nest.v */
                s.append(v1.value());
                if (dictEnumIdx != dictEnumSize) { s.append(','); }
            }
            s.append('}');
        }
        boolean dictStructExists = (null != dictStruct && dictStruct.size() > 0);
        if ('\0' != comma && dictStructExists) { s.append(comma); comma = '\0'; }
        if (dictStructExists) { s.append('"').append("dictStruct").append('"').append(':'); comma = ','; }
        int dictStructSize = (null == dictStruct ? 0 : dictStruct.size());
        if (dictStructSize > 0) {
            s.append('{');
            int dictStructIdx = 0;
            for (Map.Entry<Custom,Custom> dictStructIter : dictStruct.entrySet()) { /* map.for: dictStruct */
                ++dictStructIdx;
                Custom k1 = dictStructIter.getKey(); /* nest.k */
                s.append('"'); k1.writeJSON(s); s.append('"').append(':');
                Custom v1 = dictStructIter.getValue(); /* nest.v */
                v1.writeJSON(s);
                if (dictStructIdx != dictStructSize) { s.append(','); }
            }
            s.append('}');
        }
        boolean hotfixExists = (null != hotfix && hotfix.size() > 0);
        if ('\0' != comma && hotfixExists) { s.append(comma); comma = '\0'; }
        if (hotfixExists) {
            int hotfixSize = (null == hotfix ? 0 : hotfix.size());
            if (hotfixSize > 0) {
                s.append('{');
                int hotfixIdx = 0;
                for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) { /* map.for: hotfix */
                    ++hotfixIdx;
                    java.lang.String k1 = hotfixIter.getKey(); /* nest.k */
                    s.append('"').append(k1.toString()).append('"'); s.append(':');
                    java.lang.String v1 = hotfixIter.getValue(); /* nest.v */
                    s.append('"').append(v1.toString()).append('"');
                    if (hotfixIdx != hotfixSize) { s.append(','); }
                }
                s.append('}');
            } comma = ',';
        }
        s.append('}');
    } /* TestDict::writeJSON(...) */

    public String toStringXML()
    {
        StringBuilder code = new StringBuilder();
        this.writeXML(code, "TestDict");
        return code.toString();
    }

    public void writeXML(StringBuilder result, String name)
    {
        StringBuilder attrs  = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        if (dictI08.size() > 0) {
            nodes.append('<').append("dictI08").append('>');
            for (Map.Entry<java.lang.Byte,java.lang.Byte> dictI08Iter : dictI08.entrySet()) {
                java.lang.Byte k1 = dictI08Iter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                java.lang.Byte v1 = dictI08Iter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictI08").append('>');
        }
        if (dictI16.size() > 0) {
            nodes.append('<').append("dictI16").append('>');
            for (Map.Entry<Short,Short> dictI16Iter : dictI16.entrySet()) {
                Short k1 = dictI16Iter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                Short v1 = dictI16Iter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictI16").append('>');
        }
        if (dictI32.size() > 0) {
            nodes.append('<').append("dictI32").append('>');
            for (Map.Entry<Integer,Integer> dictI32Iter : dictI32.entrySet()) {
                Integer k1 = dictI32Iter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                Integer v1 = dictI32Iter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictI32").append('>');
        }
        if (dictI64.size() > 0) {
            nodes.append('<').append("dictI64").append('>');
            for (Map.Entry<Long,Long> dictI64Iter : dictI64.entrySet()) {
                Long k1 = dictI64Iter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                Long v1 = dictI64Iter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictI64").append('>');
        }
        if (dictU08.size() > 0) {
            nodes.append('<').append("dictU08").append('>');
            for (Map.Entry<java.lang.Integer,java.lang.Integer> dictU08Iter : dictU08.entrySet()) {
                java.lang.Integer k1 = dictU08Iter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                java.lang.Integer v1 = dictU08Iter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictU08").append('>');
        }
        if (dictU16.size() > 0) {
            nodes.append('<').append("dictU16").append('>');
            for (Map.Entry<java.lang.Integer,java.lang.Integer> dictU16Iter : dictU16.entrySet()) {
                java.lang.Integer k1 = dictU16Iter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                java.lang.Integer v1 = dictU16Iter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictU16").append('>');
        }
        if (dictU32.size() > 0) {
            nodes.append('<').append("dictU32").append('>');
            for (Map.Entry<java.lang.Long,java.lang.Long> dictU32Iter : dictU32.entrySet()) {
                java.lang.Long k1 = dictU32Iter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                java.lang.Long v1 = dictU32Iter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictU32").append('>');
        }
        if (dictU64.size() > 0) {
            nodes.append('<').append("dictU64").append('>');
            for (Map.Entry<BigInteger,BigInteger> dictU64Iter : dictU64.entrySet()) {
                BigInteger k1 = dictU64Iter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                BigInteger v1 = dictU64Iter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictU64").append('>');
        }
        if (dictSingle.size() > 0) {
            nodes.append('<').append("dictSingle").append('>');
            for (Map.Entry<Float,Float> dictSingleIter : dictSingle.entrySet()) {
                Float k1 = dictSingleIter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                Float v1 = dictSingleIter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictSingle").append('>');
        }
        if (dictDouble.size() > 0) {
            nodes.append('<').append("dictDouble").append('>');
            for (Map.Entry<java.lang.Double,java.lang.Double> dictDoubleIter : dictDouble.entrySet()) {
                java.lang.Double k1 = dictDoubleIter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                java.lang.Double v1 = dictDoubleIter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictDouble").append('>');
        }
        if (dictBoolean.size() > 0) {
            nodes.append('<').append("dictBoolean").append('>');
            for (Map.Entry<java.lang.Boolean,java.lang.Boolean> dictBooleanIter : dictBoolean.entrySet()) {
                java.lang.Boolean k1 = dictBooleanIter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                java.lang.Boolean v1 = dictBooleanIter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictBoolean").append('>');
        }
        if (dictString.size() > 0) {
            nodes.append('<').append("dictString").append('>');
            for (Map.Entry<java.lang.String,java.lang.String> dictStringIter : dictString.entrySet()) {
                java.lang.String k1 = dictStringIter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1).append('"').append('/').append('>');
                java.lang.String v1 = dictStringIter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictString").append('>');
        }
        if (dictEnum.size() > 0) {
            nodes.append('<').append("dictEnum").append('>');
            for (Map.Entry<Gender,Gender> dictEnumIter : dictEnum.entrySet()) {
                Gender k1 = dictEnumIter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1.toString()).append('"').append('/').append('>');
                Gender v1 = dictEnumIter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("dictEnum").append('>');
        }
        if (dictStruct.size() > 0) {
            nodes.append('<').append("dictStruct").append('>');
            for (Map.Entry<Custom,Custom> dictStructIter : dictStruct.entrySet()) {
                Custom k1 = dictStructIter.getKey();
                k1.writeXML(nodes, "k1");
                Custom v1 = dictStructIter.getValue();
                v1.writeXML(nodes, "v1");
            }
            nodes.append('<').append('/').append("dictStruct").append('>');
        }
        if (hotfix != null && hotfix.size() > 0) {
            nodes.append('<').append("hotfix").append('>');
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1).append('"').append('/').append('>');
                java.lang.String v1 = hotfixIter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("hotfix").append('>');
        }
        result.append('<').append(name).append(attrs);
        if (nodes.length() == 0) {
            result.append('/').append('>');
        } else {
            result.append('>').append(nodes);
            result.append('<').append('/').append(name).append('>');
        }
    } /* TestDict::writeXML(...) */

}

