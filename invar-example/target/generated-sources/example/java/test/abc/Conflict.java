/*===----------------------------*  Java 6  *------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/
package test.abc;

import invar.lib.CodecError;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;

/** 名字冲突的类型 */
public final class Conflict
implements
invar.lib.InvarCodec.BinaryDecode,
invar.lib.InvarCodec.BinaryEncode,
invar.lib.InvarCodec.XMLEncode
{
    static public final long CRC32 = 0xCC7A29B9L;

    static public Conflict Create()
    {
        return new Conflict();
    }

    private Gender                       key   ;
    private String                       text  ;
    private LinkedList<Byte>             bytes ;
    private LinkedHashMap<String,String> hotfix;/* [AutoAdd] Hotfix */

    public Conflict()
    {
        key    = Gender.NONE;
        text   = "";
        bytes  = new LinkedList<Byte>();
        hotfix = null;
    }

    public Conflict reuse()
    {
        key = Gender.NONE;
        text = "";
        bytes.clear();
        if (hotfix != null) {
            hotfix.clear();
        }
        return this;
    }

    /**  */
    @invar.lib.InvarRule(T="test.abc.Gender", S="f0")
    public Gender getKey() { return key; }
    public Integer getKeyV() { return key.value(); }
    /**  */
    @invar.lib.InvarRule(T="string", S="f1")
    public String getText() { return text; }
    /**  */
    @invar.lib.InvarRule(T="vec<int8>", S="f2")
    public LinkedList<java.lang.Byte> getBytes() { return bytes; }
    /** [AutoAdd] Hotfix */
    @invar.lib.InvarRule(T="map<string,string>", S="f3")
    public LinkedHashMap<java.lang.String,java.lang.String> getHotfix() { return hotfix; }

    /**  */
    @invar.lib.InvarRule(T="test.abc.Gender", S="f0")
    public void setKey(Gender value) { this.key = value; }
    public void setKeyV(Integer value) { this.key = Gender.valueOf(value); }
    /**  */
    @invar.lib.InvarRule(T="string", S="f1")
    public void setText(String value) { this.text = value; }
    /** [AutoAdd] Hotfix */
    @invar.lib.InvarRule(T="map<string,string>", S="f3")
    public void setHotfix(LinkedHashMap<java.lang.String,java.lang.String> value) { this.hotfix = value; }

    /** Shallow copy */
    public Conflict copy(Conflict from_)
    {
        if (this == from_ || from_ == null) {
            return this;
        }
        key = from_.key;
        text = from_.text;
        bytes.clear();
        bytes.addAll(from_.bytes);
        if (null == from_.hotfix) {
            hotfix = null;
        } else {
            if (null == hotfix) { hotfix = new LinkedHashMap<java.lang.String,java.lang.String>(); }
            else { hotfix.clear(); }
            hotfix.putAll(from_.hotfix);
        }
        return this;
    } /* copyFrom(...) */

    public void read(InputStream from_) throws IOException, CodecError
    {
        this.read((DataInput)new DataInputStream(from_));
    }

    public void read(DataInput from_) throws IOException, CodecError
    {
        key = Gender.valueOf(from_.readInt());
        text = from_.readUTF();
        bytes.clear();
        Long lenBytes = from_.readInt() & 0xFFFFFFFFL;
        for (Long iBytes = 0L; iBytes < lenBytes; ++iBytes) {
            java.lang.Byte n1 = from_.readByte();
            bytes.add(n1);
        }
        byte hotfixExists = from_.readByte();
        if ((byte)0x01 == hotfixExists) {
            if (hotfix == null) { hotfix = new LinkedHashMap<java.lang.String,java.lang.String>(); }
            Long lenHotfix = from_.readInt() & 0xFFFFFFFFL;
            for (Long iHotfix = 0L; iHotfix < lenHotfix; ++iHotfix) {
                java.lang.String k1 = from_.readUTF();
                java.lang.String v1 = from_.readUTF();
                hotfix.put(k1,v1);
            }
        }
        else if ((byte)0x00 == hotfixExists) { hotfix = null; }
        else { throw new CodecError(CodecError.ERR_DECODE_VEC_MAP_P); }
    }

    public void write(OutputStream dest_) throws IOException
    {
        this.write((DataOutput)new DataOutputStream(dest_));
    }

    public void write(DataOutput dest_) throws IOException
    {
        dest_.writeInt(key.value());
        dest_.writeUTF(text);
        dest_.writeInt(bytes.size());
        for (java.lang.Byte n1 : bytes) {
            dest_.writeByte(n1);
        }
        if (hotfix != null) {
            dest_.writeByte((byte)0x01);
            dest_.writeInt(hotfix.size());
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                dest_.writeUTF(k1);
                java.lang.String v1 = hotfixIter.getValue();
                dest_.writeUTF(v1);
            }
        } else {
            dest_.writeByte((byte)0x00);
        }
    }

    public String toString()
    {
        StringBuilder s = new StringBuilder();
        s.append('{');
        s.append(getClass().getName());
        s.append(',').append("key").append(':');
        s.append(key.toString());
        s.append(',').append("text").append(':');
        s.append('"').append(text).append('"');
        s.append(',').append("bytes").append(':');
        s.append('(').append(bytes.size()).append(')');
        s.append(", hotfix:");
        if (hotfix != null) {
            s.append('[').append(hotfix.size()).append(']');
        } else {
            s.append("null");
        }
        s.append('}');
        return s.toString();
    } //Conflict::toString ()

    public String toStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.writeJSON(code);
        return code.toString();
    }

    public void writeJSON(StringBuilder _)
    {
        _.append('{');
        char comma = '\0';
        _.append('"').append("key").append('"').append(':');
        _.append(key.value()); comma = ',';
        boolean textExists = text != null && text.length() > 0;
        if ('\0' != comma && textExists) { _.append(comma); comma = '\0'; }
        if (textExists) {
            _.append('"').append("text").append('"').append(':'); comma = ','; _.append('"').append(text.toString()).append('"');
        }
        boolean bytesExists = (null != bytes && bytes.size() > 0);
        if ('\0' != comma && bytesExists) { _.append(comma); comma = '\0'; }
        if (bytesExists) { _.append('"').append("bytes").append('"').append(':'); comma = ','; }
        int bytesSize = (null == bytes ? 0 : bytes.size());
        if (bytesSize > 0) {
            _.append('[');
            int bytesIdx = 0;
            for (java.lang.Byte n1 : bytes) { /* vec.for: bytes */
                ++bytesIdx;
                _.append(n1.toString());
                if (bytesIdx != bytesSize) { _.append(','); }
            }
            _.append(']');
        }
        boolean hotfixExists = (null != hotfix && hotfix.size() > 0);
        if ('\0' != comma && hotfixExists) { _.append(comma); comma = '\0'; }
        if (hotfixExists) {
            int hotfixSize = (null == hotfix ? 0 : hotfix.size());
            if (hotfixSize > 0) {
                _.append('{');
                int hotfixIdx = 0;
                for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) { /* map.for: hotfix */
                    ++hotfixIdx;
                    java.lang.String k1 = hotfixIter.getKey(); /* nest.k */
                    _.append('"').append(k1.toString()).append('"'); _.append(':');
                    java.lang.String v1 = hotfixIter.getValue(); /* nest.v */
                    _.append('"').append(v1.toString()).append('"');
                    if (hotfixIdx != hotfixSize) { _.append(','); }
                }
                _.append('}');
            } comma = ',';
        }
        _.append('}');
    } /* Conflict::writeJSON(...) */

    public String toStringXML()
    {
        StringBuilder code = new StringBuilder();
        this.writeXML(code, "Conflict");
        return code.toString();
    }

    public void writeXML(StringBuilder result_, String name_)
    {
        StringBuilder attrs  = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        attrs.append(' ').append("key").append('=').append('"');
        attrs.append(nodes.append(key.value())).append('"');
        attrs.append(' ').append("text").append('=').append('"');
        attrs.append(text).append('"');
        if (bytes.size() > 0) {
            nodes.append('<').append("bytes").append('>');
            for (java.lang.Byte n1 : bytes) {
                nodes.append('<').append("n1").append(' ').append("value").append('=').append('"');
                nodes.append(n1.toString()).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("bytes").append('>');
        }
        if (hotfix != null && hotfix.size() > 0) {
            nodes.append('<').append("hotfix").append('>');
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                nodes.append('<').append("k1").append(' ').append("value").append('=').append('"');
                nodes.append(k1).append('"').append('/').append('>');
                java.lang.String v1 = hotfixIter.getValue();
                nodes.append('<').append("v1").append(' ').append("value").append('=').append('"');
                nodes.append(v1).append('"').append('/').append('>');
            }
            nodes.append('<').append('/').append("hotfix").append('>');
        }
        result_.append('<').append(name_).append(attrs);
        if (nodes.length() == 0) {
            result_.append('/').append('>');
        } else {
            result_.append('>').append(nodes);
            result_.append('<').append('/').append(name_).append('>');
        }
    } /* Conflict::writeXML(...) */

}

