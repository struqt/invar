<?php
/*===----------------------------*  PHP 5  *-------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace test\xyz;

require_once dirname(__FILE__) . '/../../invar/invar.codec.php';
require_once dirname(__FILE__) . '/../../test/abc/Custom.php';

use \invar\BinaryReader;
use \invar\BinaryWriter;
use \test\abc\Custom;

final class TestNest
{
    const CRC32 = 0x6F0C2598;

    static public function &CreateFromBytes (& $str)
    {
        $o = new TestNest;
        $o->read(new BinaryReader($str));
        return $o;
    }

    private $listDict ;/* 0 vec<map<string,test.abc.Custom>> */
    private $dictList ;/* 1 map<vec<string>,vec<test.abc.Custom>> */
    private $list5d   ;/* 2 vec<vec<vec<vec<vec<test.abc.Custom>>>>> // 五维列表 */

    function __construct()
    {
        $this->listDict = array();
        $this->dictList = array();
        $this->list5d   = array();
    }
    /* End of constructor() */

    public function &copy (& $from)
    {
        if ($this == $from || $from == NULL) {
            return this;
        }
        if ($from->listDict != NULL) {
            $this->listDict = array_merge($from->listDict);
        } else {
            $this->listDict = array();
        }
        if ($from->dictList != NULL) {
            $this->dictList = array_merge($from->dictList);
        } else {
            $this->dictList = array();
        }
        if ($from->list5d != NULL) {
            $this->list5d = array_merge($from->list5d);
        } else {
            $this->list5d = array();
        }
        return $this;
    }
    /* End of copy(...) */

    public function &read (& $r)
    {
        $this->listDict = array();
        $lenListDict = $r->readUInt32();
        for ($iListDict = 0; $iListDict < $lenListDict; ++$iListDict) {
            $n1 = array(); //read.vec.head
            $lenN1 = $r->readUInt32();
            for ($iN1 = 0; $iN1 < $lenN1; ++$iN1) {
                $k2 = $r->readUTF();
                $v2 = new Custom();
                $v2->read($r);
                $n1[$k2] = $v2;
            }
            $this->listDict[] = $n1;
        }
        $this->dictList = array();
        $lenDictList = $r->readUInt32();
        for ($iDictList = 0; $iDictList < $lenDictList; ++$iDictList) {
            $k1 = array(); //read.map.head
            $lenK1 = $r->readUInt32();
            for ($iK1 = 0; $iK1 < $lenK1; ++$iK1) {
                $n2 = $r->readUTF();
                $k1[] = $n2;
            }
            $v1 = array(); //read.map.head
            $lenV1 = $r->readUInt32();
            for ($iV1 = 0; $iV1 < $lenV1; ++$iV1) {
                $n2 = new Custom();
                $n2->read($r);
                $v1[] = $n2;
            }
            $this->dictList[$k1] = $v1;
        }
        $this->list5d = array();
        $lenList5d = $r->readUInt32();
        for ($iList5d = 0; $iList5d < $lenList5d; ++$iList5d) {
            $n1 = array(); //read.vec.head
            $lenN1 = $r->readUInt32();
            for ($iN1 = 0; $iN1 < $lenN1; ++$iN1) {
                $n2 = array(); //read.vec.head
                $lenN2 = $r->readUInt32();
                for ($iN2 = 0; $iN2 < $lenN2; ++$iN2) {
                    $n3 = array(); //read.vec.head
                    $lenN3 = $r->readUInt32();
                    for ($iN3 = 0; $iN3 < $lenN3; ++$iN3) {
                        $n4 = array(); //read.vec.head
                        $lenN4 = $r->readUInt32();
                        for ($iN4 = 0; $iN4 < $lenN4; ++$iN4) {
                            $n5 = new Custom();
                            $n5->read($r);
                            $n4[] = $n5;
                        }
                        $n3[] = $n4;
                    }
                    $n2[] = $n3;
                }
                $n1[] = $n2;
            }
            $this->list5d[] = $n1;
        }
        return $this;
    }
    /* End of read(...) */

    public function write (& $str)
    {
        BinaryWriter::writeInt32(count($this->listDict), $str);
        foreach ($this->listDict as &$n1) {
            BinaryWriter::writeInt32(count($n1), $str);
            foreach ($n1 as $k2 => &$v2) {
                BinaryWriter::writeUTF($k2, $str);
                $v2->write($str);
            }
        }
        BinaryWriter::writeInt32(count($this->dictList), $str);
        foreach ($this->dictList as $k1 => &$v1) {
            BinaryWriter::writeInt32(count($k1), $str);
            foreach ($k1 as &$n2) {
                BinaryWriter::writeUTF($n2, $str);
            }
            BinaryWriter::writeInt32(count($v1), $str);
            foreach ($v1 as &$n2) {
                $n2->write($str);
            }
        }
        BinaryWriter::writeInt32(count($this->list5d), $str);
        foreach ($this->list5d as &$n1) {
            BinaryWriter::writeInt32(count($n1), $str);
            foreach ($n1 as &$n2) {
                BinaryWriter::writeInt32(count($n2), $str);
                foreach ($n2 as &$n3) {
                    BinaryWriter::writeInt32(count($n3), $str);
                    foreach ($n3 as &$n4) {
                        BinaryWriter::writeInt32(count($n4), $str);
                        foreach ($n4 as &$n5) {
                            $n5->write($str);
                        }
                    }
                }
            }
        }
    }
    /* End of write(...) */

    /**  */
    public function &getListDict() { return $this->listDict; }

    /**  */
    public function &getDictList() { return $this->dictList; }

    /** 五维列表 */
    public function &getList5d() { return $this->list5d; }

    public function &toString()
    {
        $s  = '{'; $s .= get_class($this);
        $s .= ','; $s .= 'listDict'; $s .= ':';
        $s .= '('; $s .= count($this->listDict); $s .= ')';
        $s .= ','; $s .= 'dictList'; $s .= ':';
        $s .= '['; $s .= count($this->dictList); $s .= ']';
        $s .= ','; $s .= 'list5d'; $s .= ':';
        $s .= '('; $s .= count($this->list5d); $s .= ')';
        $s .= '}';
        return $s;
    }
    /* End of toString() */

    public function &toStringJSON()
    {
        $code = '';
        $this->writeJSON($code);
        return $code;
    }

    public function writeJSON(& $s)
    {
        $s .= "\n"; $s .= '{';
        $listDictExists = (isset($this->listDict) && count($this->listDict) > 0);
        if ($listDictExists) {
            $s .= '"'; $s .= 'listDict'; $s .= '"'; $s .= ':'; $comma = ',';
            $listDictSize = (!isset($this->listDict) ? 0 : count($this->listDict));
            $s .= "\n"; $s .= '[';
            $listDictIdx = 0;
            foreach ($this->listDict as &$n1) {
                $n1Size = (!isset($n1) ? 0 : count($n1));
                $s .= "\n"; $s .= '{';
                $n1Idx = 0;
                foreach ($n1 as $k2 => &$v2) {
                    $s .= '"'; $s .= $k2; $s .= '"';
                    $v2->writeJSON($s);
                    ++$n1Idx;
                    if (n1Idx != $n1Size) { $s .= ','; }
                }
                $s .= '}';
                ++$listDictIdx;
                if ($listDictIdx != $listDictSize) { $s .= ','; }
            }
            $s .= ']';
        }
        $dictListExists = (isset($this->dictList) && count($this->dictList) > 0);
        if (!empty($comma) && $dictListExists) { $s .= $comma; $comma = ''; }
        if ($dictListExists) {
            $s .= '"'; $s .= 'dictList'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictListSize = (!isset($this->dictList) ? 0 : count($this->dictList));
            $s .= "\n"; $s .= '{';
            $dictListIdx = 0;
            foreach ($this->dictList as $k1 => &$v1) {
                $k1Size = (!isset($k1) ? 0 : count($k1));
                $s .= "\n"; $s .= '[';
                $k1Idx = 0;
                foreach ($k1 as &$n2) {
                    $s .= '"'; $s .= $n2; $s .= '"';
                    ++$k1Idx;
                    if ($k1Idx != $k1Size) { $s .= ','; }
                }
                $s .= ']';
                $v1Size = (!isset($v1) ? 0 : count($v1));
                $s .= "\n"; $s .= '[';
                $v1Idx = 0;
                foreach ($v1 as &$n2) {
                    $n2->writeJSON($s);
                    ++$v1Idx;
                    if ($v1Idx != $v1Size) { $s .= ','; }
                }
                $s .= ']';
                ++$dictListIdx;
                if (dictListIdx != $dictListSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $list5dExists = (isset($this->list5d) && count($this->list5d) > 0);
        if (!empty($comma) && $list5dExists) { $s .= $comma; $comma = ''; }
        if ($list5dExists) {
            $s .= '"'; $s .= 'list5d'; $s .= '"'; $s .= ':'; $comma = ',';
            $list5dSize = (!isset($this->list5d) ? 0 : count($this->list5d));
            $s .= "\n"; $s .= '[';
            $list5dIdx = 0;
            foreach ($this->list5d as &$n1) {
                $n1Size = (!isset($n1) ? 0 : count($n1));
                $s .= "\n"; $s .= '[';
                $n1Idx = 0;
                foreach ($n1 as &$n2) {
                    $n2Size = (!isset($n2) ? 0 : count($n2));
                    $s .= "\n"; $s .= '[';
                    $n2Idx = 0;
                    foreach ($n2 as &$n3) {
                        $n3Size = (!isset($n3) ? 0 : count($n3));
                        $s .= "\n"; $s .= '[';
                        $n3Idx = 0;
                        foreach ($n3 as &$n4) {
                            $n4Size = (!isset($n4) ? 0 : count($n4));
                            $s .= "\n"; $s .= '[';
                            $n4Idx = 0;
                            foreach ($n4 as &$n5) {
                                $n5->writeJSON($s);
                                ++$n4Idx;
                                if ($n4Idx != $n4Size) { $s .= ','; }
                            }
                            $s .= ']';
                            ++$n3Idx;
                            if ($n3Idx != $n3Size) { $s .= ','; }
                        }
                        $s .= ']';
                        ++$n2Idx;
                        if ($n2Idx != $n2Size) { $s .= ','; }
                    }
                    $s .= ']';
                    ++$n1Idx;
                    if ($n1Idx != $n1Size) { $s .= ','; }
                }
                $s .= ']';
                ++$list5dIdx;
                if ($list5dIdx != $list5dSize) { $s .= ','; }
            }
            $s .= ']';
        }
        $s .= '}'; $s .= "\n";
    }
    /* End of writeJSON(...) */

    public function &toStringXML()
    {
        $code  = '<?xml version="1.0" encoding="UTF-8"?>';
        $code .= "\n"; $code .= '<!-- '; $code .= 'TestNest'; $code .= '.CRC32: 0x';
        $code .= strtoupper(dechex(self::CRC32)); $code .= ' -->';
        $code .= "\n"; $this->writeXML($code, 'TestNest');
        return $code;
    }

    public function writeXML (& $s, $name)
    {
        $attrs = ''; $nodes = '';
        if (count($this->listDict) > 0) {
            $nodes .= '<'; $nodes .= 'listDict'; $nodes .= '>';
            foreach ($this->listDict as &$n1) {
                $nodes .= '<'; $nodes .= 'n1'; $nodes .= '>';
                foreach ($n1 as $k2 => &$v2) {
                    $nodes .= '<'; $nodes .= 'k2'; $nodes .= ' ';
                    $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                    $nodes .= $$k2; $nodes .= '"';  $nodes .= '/>';
                    $v2->writeXML($nodes, 'v2');
                }
                $nodes .= '</'; $nodes .= 'n1'; $nodes .= '>';
            }
            $nodes .= '</'; $nodes .= 'listDict'; $nodes .= '>';
        }
        if (count($this->dictList) > 0) {
            $nodes .= '<'; $nodes .= 'dictList'; $nodes .= '>';
            foreach ($this->dictList as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= '>';
                foreach ($k1 as &$n2) {
                    $nodes .= '<'; $nodes .= 'n2'; $nodes .= ' ';
                    $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                    $nodes .= $$n2; $nodes .= '"';  $nodes .= '/>';
                }
                $nodes .= '</'; $nodes .= 'k1'; $nodes .= '>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= '>';
                foreach ($v1 as &$n2) {
                    $n2->writeXML($nodes, 'n2');
                }
                $nodes .= '</'; $nodes .= 'v1'; $nodes .= '>';
            }
            $nodes .= '</'; $nodes .= 'dictList'; $nodes .= '>';
        }
        if (count($this->list5d) > 0) {
            $nodes .= '<'; $nodes .= 'list5d'; $nodes .= '>';
            foreach ($this->list5d as &$n1) {
                $nodes .= '<'; $nodes .= 'n1'; $nodes .= '>';
                foreach ($n1 as &$n2) {
                    $nodes .= '<'; $nodes .= 'n2'; $nodes .= '>';
                    foreach ($n2 as &$n3) {
                        $nodes .= '<'; $nodes .= 'n3'; $nodes .= '>';
                        foreach ($n3 as &$n4) {
                            $nodes .= '<'; $nodes .= 'n4'; $nodes .= '>';
                            foreach ($n4 as &$n5) {
                                $n5->writeXML($nodes, 'n5');
                            }
                            $nodes .= '</'; $nodes .= 'n4'; $nodes .= '>';
                        }
                        $nodes .= '</'; $nodes .= 'n3'; $nodes .= '>';
                    }
                    $nodes .= '</'; $nodes .= 'n2'; $nodes .= '>';
                }
                $nodes .= '</'; $nodes .= 'n1'; $nodes .= '>';
            }
            $nodes .= '</'; $nodes .= 'list5d'; $nodes .= '>';
        }
        $s .= '<';
        $s .= $name;
        $s .= $attrs;
        if (strlen($nodes) == 0) {
            $s .= '/>';
        } else {
            $s .= '>'; $s .= $nodes;
            $s .= '</'; $s .= $name; $s .= '>';
        }
    }
    /* End of writeXML(...) */

}
