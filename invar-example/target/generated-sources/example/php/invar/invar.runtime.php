<?php
/*===----------------------------*  PHP 5  *-------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace invar;

require_once dirname(__FILE__) . '/../test/protoc/TestHeartBeat2C.php';
require_once dirname(__FILE__) . '/../test/protoc/TestHeartBeatR2S.php';
require_once dirname(__FILE__) . '/../test/protoc/TestServerTimeN2C.php';
require_once dirname(__FILE__) . '/../test/protoc/TestUserLocationN2S.php';
require_once dirname(__FILE__) . '/../test/protoc/TestUserLogin2S.php';
require_once dirname(__FILE__) . '/../test/protoc/TestUserLoginR2C.php';

use \test\protoc\TestHeartBeat2C;
use \test\protoc\TestHeartBeatR2S;
use \test\protoc\TestServerTimeN2C;
use \test\protoc\TestUserLocationN2S;
use \test\protoc\TestUserLogin2S;
use \test\protoc\TestUserLoginR2C;

final class InvarRuntime {

static public function HandleProtocAsServer (&$bytes)
{
    $h = null; $req = null; $rep = null; $ntf = null;
    $r = new BinaryReader($bytes);
    $id = $r->peekUInt16();
    switch ($id) {
    case 65527: /* 客户端请求,服务端响应 */
    { $req = new TestUserLogin2S; $req->read($r); $h = '\HandleTestUserLogin2S'; $rep = new TestUserLoginR2C; break; }
    case 65531: /* 客户端通知服务端 */
    { $ntf = new TestUserLocationN2S; $ntf->read($r); $h = '\HandleTestUserLocationN2S'; break; }
    case 65533: /* 服务端请求,客户端响应 */
    { $rep = new TestHeartBeatR2S; $rep->read($r); $h = '\HandleTestHeartBeatR2S'; break; }
    default: throw new \Exception('Unsupported protocol id: ' . $id, 503/* Service Unavailable */);
    }
    if (!function_exists($h)) { throw new \Exception('No function: ' . $h, 501/* Not Implemented */); }
    if ($req != null && $rep != null) {
        $h($req, $rep); return;
    }
    if ($ntf != null) {
        $h($ntf); return;
    }
    if ($rep != null) {
        $h($rep); return;
    }
    throw new \Exception('Unhandled protocol: ' . $id, 500/* Internal Server Error */);
} // HandleProtocAsServer(...)

static public function HandleProtocAsClient (&$bytes)
{
    $h = null; $req = null; $rep = null; $ntf = null;
    $r = new BinaryReader($bytes);
    $id = $r->peekUInt16();
    switch ($id) {
    case 65528: /* 客户端请求,服务端响应 */
    { $rep = new TestUserLoginR2C; $rep->read($r); $h = '\HandleTestUserLoginR2C'; break; }
    case 65530: /* 服务器通知客户端 */
    { $ntf = new TestServerTimeN2C; $ntf->read($r); $h = '\HandleTestServerTimeN2C'; break; }
    case 65534: /* 服务端请求,客户端响应 */
    { $req = new TestHeartBeat2C; $req->read($r); $h = '\HandleTestHeartBeat2C'; $rep = new TestHeartBeatR2S; break; }
    default: throw new \Exception('Unsupported protocol id: ' . $id, 503/* Service Unavailable */);
    }
    if (!function_exists($h)) { throw new \Exception('No function: ' . $h, 501/* Not Implemented */); }
    if ($req != null && $rep != null) {
        $h($req, $rep); return;
    }
    if ($ntf != null) {
        $h($ntf); return;
    }
    if ($rep != null) {
        $h($rep); return;
    }
    throw new \Exception('Unhandled protocol: ' . $id, 500/* Internal Server Error */);
} // HandleProtocAsClient(...)

} //class InvarRuntime
