#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ===------------------------------*  Python  *------------------------------===
#             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
# ===------------------------------------------------------------------------===

from TestAbcGender import Gender
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO
from InvarCodec import DataWriter
from InvarCodec import DataReader

class TestBasic(object):

    """基础类型"""
    CRC32_ = 0xF60C9915
    SIZE_  = 55

    __slots__ = (
        '_numberI08',
        '_numberI16',
        '_numberI32',
        '_numberI64',
        '_numberU08',
        '_numberU16',
        '_numberU32',
        '_numberU64',
        '_numberSingle',
        '_numberDouble',
        '_boolValue',
        '_stringValue',
        '_enumValue',
        '_enumDeft')
   #__slots__

    def __init__(self):
        self._numberI08    = -128
        self._numberI16    = -32768
        self._numberI32    = -2147483648
        self._numberI64    = -9223372036854774808
        self._numberU08    = 255
        self._numberU16    = 65535
        self._numberU32    = 4294967295
        self._numberU64    = 18446744073709551615
        self._numberSingle = 3.14159
        self._numberDouble = 3.1415926
        self._boolValue    = False
        self._stringValue  = 'hello世界'
        self._enumValue    = Gender.NONE
        self._enumDeft     = Gender.MALE
   #def __init__

    def __str__(self):
        s = StringIO()
        s.write(u'{')
        s.write(u' ')
        s.write(u'TestBasic')
        s.write(u',')
        s.write(u' ')
        s.write(u'numberI08')
        s.write(u':')
        s.write(unicode(self._numberI08))
        s.write(u',')
        s.write(u' ')
        s.write(u'numberI16')
        s.write(u':')
        s.write(unicode(self._numberI16))
        s.write(u',')
        s.write(u' ')
        s.write(u'numberI32')
        s.write(u':')
        s.write(unicode(self._numberI32))
        s.write(u',')
        s.write(u' ')
        s.write(u'numberI64')
        s.write(u':')
        s.write(unicode(self._numberI64))
        s.write(u',')
        s.write(u' ')
        s.write(u'numberU08')
        s.write(u':')
        s.write(unicode(self._numberU08))
        s.write(u',')
        s.write(u' ')
        s.write(u'numberU16')
        s.write(u':')
        s.write(unicode(self._numberU16))
        s.write(u',')
        s.write(u' ')
        s.write(u'numberU32')
        s.write(u':')
        s.write(unicode(self._numberU32))
        s.write(u',')
        s.write(u' ')
        s.write(u'numberU64')
        s.write(u':')
        s.write(unicode(self._numberU64))
        s.write(u',')
        s.write(u' ')
        s.write(u'numberSingle')
        s.write(u':')
        s.write(unicode(self._numberSingle))
        s.write(u',')
        s.write(u' ')
        s.write(u'numberDouble')
        s.write(u':')
        s.write(unicode(self._numberDouble))
        s.write(u',')
        s.write(u' ')
        s.write(u'boolValue')
        s.write(u':')
        s.write(unicode(self._boolValue))
        s.write(u',')
        s.write(u' ')
        s.write(u'stringValue')
        s.write(u':')
        s.write(u'"')
        s.write(self._stringValue)
        s.write(u'"')
        s.write(u',')
        s.write(u' ')
        s.write(u'enumValue')
        s.write(u':')
        s.write(unicode(self._enumValue))
        s.write(u',')
        s.write(u' ')
        s.write(u'enumDeft')
        s.write(u':')
        s.write(unicode(self._enumDeft))
        s.write(u' ')
        s.write(u'}')
        result = s.getvalue()
        s.close()
        return result
   #def __str__

    def __len__(self):
        size = TestBasic.SIZE_
        size += len(self._stringValue)
        return size
   #def __len__

    def read(r):
        self._numberI08 = r.readInt8()
        self._numberI16 = r.readInt16()
        self._numberI32 = r.readInt32()
        self._numberI64 = r.readInt64()
        self._numberU08 = r.readUInt8()
        self._numberU16 = r.readUInt16()
        self._numberU32 = r.readUInt32()
        self._numberU64 = r.readUInt64()
        self._numberSingle = r.readSingle()
        self._numberDouble = r.readDouble()
        self._boolValue = r.readBoolean()
        self._stringValue = r.readString()
        self._enumValue = r.readInt32()
        self._enumDeft = r.readInt32()
   #def read

    def write(w):
        w.writeInt8(self._numberI08)
        w.writeInt16(self._numberI16)
        w.writeInt32(self._numberI32)
        w.writeInt64(self._numberI64)
        w.writeUInt8(self._numberU08)
        w.writeUInt16(self._numberU16)
        w.writeUInt32(self._numberU32)
        w.writeUInt64(self._numberU64)
        w.writeFloat(self._numberSingle)
        w.writeDouble(self._numberDouble)
        w.writeBool(self._boolValue)
        w.writeString(self._stringValue)
        w.writeInt32(self._enumValue)
        w.writeInt32(self._enumDeft)
   #def write

#class TestBasic

if '__main__' == __name__:
    print('dir(TestBasic()) =>\n' + '\n'.join(dir(TestBasic())))
    print('TestBasic.__doc__ => ' + TestBasic.__doc__)
    print('TestBasic.__len__ => ' + str(len(TestBasic())))
    print('TestBasic.__str__ => ' + str(TestBasic()))
