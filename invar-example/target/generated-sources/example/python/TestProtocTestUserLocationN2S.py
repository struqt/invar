#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ===------------------------------*  Python  *------------------------------===
#             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
# ===------------------------------------------------------------------------===

from TestProtocProtoc2S import Protoc2S
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO
from InvarCodec import DataWriter
from InvarCodec import DataReader

class TestUserLocationN2S(object):

    """客户端通知服务端"""
    CRC32_ = 0xEC953457
    SIZE_  = 16

    __slots__ = (
        '_protocId',
        '_protocCRC',
        '_protoc2S',
        '_x',
        '_y',
        '_hotfix')
   #__slots__

    def __init__(self):
        self._protocId  = 65531
        self._protocCRC = TestUserLocationN2S.CRC32_
        self._protoc2S  = None
        self._x         = 0.0
        self._y         = 0.0
        self._hotfix    = None
   #def __init__

    def __str__(self):
        s = StringIO()
        s.write(u'{')
        s.write(u' ')
        s.write(u'TestUserLocationN2S')
        s.write(u',')
        s.write(u' ')
        s.write(u'protocId')
        s.write(u':')
        s.write(unicode(self._protocId))
        s.write(u',')
        s.write(u' ')
        s.write(u'protocCRC')
        s.write(u':')
        s.write(unicode(self._protocCRC))
        s.write(u',')
        s.write(u' ')
        s.write(u'protoc2S')
        s.write(u':')
        if self._protoc2S is None:
            s.write(u'null')
        else:
            s.write(u'<')
            s.write(u'Protoc2S')
            s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'x')
        s.write(u':')
        s.write(unicode(self._x))
        s.write(u',')
        s.write(u' ')
        s.write(u'y')
        s.write(u':')
        s.write(unicode(self._y))
        s.write(u',')
        s.write(u' ')
        s.write(u'hotfix')
        s.write(u':')
        if self._hotfix is None:
            s.write(u'null')
        else:
            s.write(u'[')
            s.write(str(len(self._hotfix)))
            s.write(u']')
        s.write(u' ')
        s.write(u'}')
        result = s.getvalue()
        s.close()
        return result
   #def __str__

    def __len__(self):
        size = TestUserLocationN2S.SIZE_
        if self._protoc2S is not None:
            size += len(self._protoc2S)
        if self._hotfix is not None:
            size += 4
            for (k1,v1) in self._hotfix.items():
                size += len(k1)
                size += len(v1)
        return size
   #def __len__

    def read(r):
        self._protocId = r.readUInt16()
        self._protocCRC = r.readUInt32()
        if CRC32 != self._protocCRC:
            raise InvarError(499, "Protoc read error: CRC32 is mismatched.", 499)
        protoc2SExists = r.readInt8()
        if 0x01 == protoc2SExists:
            if self._protoc2S == None:
                self._protoc2S = Protoc2S()
            self._protoc2S.read(r)
        elif 0x00 == protoc2SExists:
            self._protoc2S = None
        else:
            raise InvarError(497, 'Protoc read error: The value of \'protoc2SExists\' is invalid.')
        self._x = r.readSingle()
        self._y = r.readSingle()
        hotfixExists = r.readInt8()
        if 0x01 == hotfixExists:
            if self._hotfix == None:
                self._hotfix = dict()
            lenHotfix = r.readUInt32()
            num = 0
            while num < lenHotfix:
                num += 1
                k1 = r.readString()
                v1 = r.readString()
                self._hotfix[k1] = v1
        elif 0x00 == hotfixExists:
            self._hotfix = None
        else:
            raise InvarError(498, 'Protoc read error: The value of \'hotfixExists\' is invalid.')
   #def read

    def write(w):
        w.writeUInt16(self._protocId)
        w.writeUInt32(self._protocCRC)
        if self._protoc2S != None:
            w.writeUInt8(0x01)
            self._protoc2S.write(w)
        else:
            w.writeUInt8(0x00)
        w.writeFloat(self._x)
        w.writeFloat(self._y)
        if self._hotfix != None:
            w.writeUInt8(0x01)
            w.writeUInt32(len(self._hotfix))
            for (k1,v1) in self._hotfix.items():
                w.writeString(k1)
                w.writeString(v1)
        else:
            w.writeUInt8(0x00)
   #def write

#class TestUserLocationN2S

if '__main__' == __name__:
    print('dir(TestUserLocationN2S()) =>\n' + '\n'.join(dir(TestUserLocationN2S())))
    print('TestUserLocationN2S.__doc__ => ' + TestUserLocationN2S.__doc__)
    print('TestUserLocationN2S.__len__ => ' + str(len(TestUserLocationN2S())))
    print('TestUserLocationN2S.__str__ => ' + str(TestUserLocationN2S()))
