<?php
/*===----------------------------*  PHP 5  *-------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace test\xyz;

require_once dirname(__FILE__) . '/../../test/abc/Gender.php';
require_once dirname(__FILE__) . '/../../test/abc/Custom.php';
require_once dirname(__FILE__) . '/../../invar/invar.codec.php';

use \invar\BinaryReader;
use \invar\BinaryWriter;
use \test\abc\Custom;
use \test\abc\Gender;

final class TestDict
{
    const CRC32 = 0x969046DE;

    static public function &CreateFromBytes (& $str)
    {
        $o = new TestDict;
        $o->read(new BinaryReader($str));
        return $o;
    }

    private $dictI08     ;/* 0 map<int8,int8> // 有符号的8位整数 */
    private $dictI16     ;/* 1 map<int16,int16> // 有符号的16位整数 */
    private $dictI32     ;/* 2 map<int32,int32> // 有符号的32位整数 */
    private $dictI64     ;/* 3 map<int64,int64> // 有符号的64位整数 */
    private $dictU08     ;/* 4 map<uint8,uint8> // 无符号的8位整数 */
    private $dictU16     ;/* 5 map<uint16,uint16> // 无符号的16位整数 */
    private $dictU32     ;/* 6 map<uint32,uint32> // 无符号的32位整数 */
    private $dictU64     ;/* 7 map<uint64,uint64> // 无符号的64位整数 */
    private $dictSingle  ;/* 8 map<float,float> // 单精度浮点小数 */
    private $dictDouble  ;/* 9 map<double,double> // 双精度浮点小数 */
    private $dictBoolean ;/* 10 map<bool,bool> // 布尔值 */
    private $dictString  ;/* 11 map<string,string> // 字符串 */
    private $dictEnum    ;/* 12 map<test.abc.Gender,test.abc.Gender> // 枚举值 */
    private $dictStruct  ;/* 13 map<test.abc.Custom,test.abc.Custom> // 自定义结构 */
    private $hotfix      ;/* 14 map<string,string> // [AutoAdd] Hotfix */

    function __construct()
    {
        $this->dictI08     = array();
        $this->dictI16     = array();
        $this->dictI32     = array();
        $this->dictI64     = array();
        $this->dictU08     = array();
        $this->dictU16     = array();
        $this->dictU32     = array();
        $this->dictU64     = array();
        $this->dictSingle  = array();
        $this->dictDouble  = array();
        $this->dictBoolean = array();
        $this->dictString  = array();
        $this->dictEnum    = array();
        $this->dictStruct  = array();
        $this->hotfix      = NULL;
    }
    /* End of constructor() */

    public function &copy (& $from)
    {
        if ($this == $from || $from == NULL) {
            return this;
        }
        if ($from->dictI08 != NULL) {
            $this->dictI08 = array_merge($from->dictI08);
        } else {
            $this->dictI08 = array();
        }
        if ($from->dictI16 != NULL) {
            $this->dictI16 = array_merge($from->dictI16);
        } else {
            $this->dictI16 = array();
        }
        if ($from->dictI32 != NULL) {
            $this->dictI32 = array_merge($from->dictI32);
        } else {
            $this->dictI32 = array();
        }
        if ($from->dictI64 != NULL) {
            $this->dictI64 = array_merge($from->dictI64);
        } else {
            $this->dictI64 = array();
        }
        if ($from->dictU08 != NULL) {
            $this->dictU08 = array_merge($from->dictU08);
        } else {
            $this->dictU08 = array();
        }
        if ($from->dictU16 != NULL) {
            $this->dictU16 = array_merge($from->dictU16);
        } else {
            $this->dictU16 = array();
        }
        if ($from->dictU32 != NULL) {
            $this->dictU32 = array_merge($from->dictU32);
        } else {
            $this->dictU32 = array();
        }
        if ($from->dictU64 != NULL) {
            $this->dictU64 = array_merge($from->dictU64);
        } else {
            $this->dictU64 = array();
        }
        if ($from->dictSingle != NULL) {
            $this->dictSingle = array_merge($from->dictSingle);
        } else {
            $this->dictSingle = array();
        }
        if ($from->dictDouble != NULL) {
            $this->dictDouble = array_merge($from->dictDouble);
        } else {
            $this->dictDouble = array();
        }
        if ($from->dictBoolean != NULL) {
            $this->dictBoolean = array_merge($from->dictBoolean);
        } else {
            $this->dictBoolean = array();
        }
        if ($from->dictString != NULL) {
            $this->dictString = array_merge($from->dictString);
        } else {
            $this->dictString = array();
        }
        if ($from->dictEnum != NULL) {
            $this->dictEnum = array_merge($from->dictEnum);
        } else {
            $this->dictEnum = array();
        }
        if ($from->dictStruct != NULL) {
            $this->dictStruct = array_merge($from->dictStruct);
        } else {
            $this->dictStruct = array();
        }
        if ($from->hotfix != NULL) {
            $this->hotfix = array();
            $this->hotfix = array_merge($from->hotfix);
        } else {
            $this->hotfix = NULL;
        }
        return $this;
    }
    /* End of copy(...) */

    public function &read (& $r)
    {
        $this->dictI08 = array();
        $lenDictI08 = $r->readUInt32();
        for ($iDictI08 = 0; $iDictI08 < $lenDictI08; ++$iDictI08) {
            $k1 = $r->readInt08();
            $v1 = $r->readInt08();
            $this->dictI08[$k1] = $v1;
        }
        $this->dictI16 = array();
        $lenDictI16 = $r->readUInt32();
        for ($iDictI16 = 0; $iDictI16 < $lenDictI16; ++$iDictI16) {
            $k1 = $r->readInt16();
            $v1 = $r->readInt16();
            $this->dictI16[$k1] = $v1;
        }
        $this->dictI32 = array();
        $lenDictI32 = $r->readUInt32();
        for ($iDictI32 = 0; $iDictI32 < $lenDictI32; ++$iDictI32) {
            $k1 = $r->readInt32();
            $v1 = $r->readInt32();
            $this->dictI32[$k1] = $v1;
        }
        $this->dictI64 = array();
        $lenDictI64 = $r->readUInt32();
        for ($iDictI64 = 0; $iDictI64 < $lenDictI64; ++$iDictI64) {
            $k1 = $r->readInt64();
            $v1 = $r->readInt64();
            $this->dictI64[$k1] = $v1;
        }
        $this->dictU08 = array();
        $lenDictU08 = $r->readUInt32();
        for ($iDictU08 = 0; $iDictU08 < $lenDictU08; ++$iDictU08) {
            $k1 = $r->readUInt08();
            $v1 = $r->readUInt08();
            $this->dictU08[$k1] = $v1;
        }
        $this->dictU16 = array();
        $lenDictU16 = $r->readUInt32();
        for ($iDictU16 = 0; $iDictU16 < $lenDictU16; ++$iDictU16) {
            $k1 = $r->readUInt16();
            $v1 = $r->readUInt16();
            $this->dictU16[$k1] = $v1;
        }
        $this->dictU32 = array();
        $lenDictU32 = $r->readUInt32();
        for ($iDictU32 = 0; $iDictU32 < $lenDictU32; ++$iDictU32) {
            $k1 = $r->readUInt32();
            $v1 = $r->readUInt32();
            $this->dictU32[$k1] = $v1;
        }
        $this->dictU64 = array();
        $lenDictU64 = $r->readUInt32();
        for ($iDictU64 = 0; $iDictU64 < $lenDictU64; ++$iDictU64) {
            $k1 = $r->readUInt64();
            $v1 = $r->readUInt64();
            $this->dictU64[$k1] = $v1;
        }
        $this->dictSingle = array();
        $lenDictSingle = $r->readUInt32();
        for ($iDictSingle = 0; $iDictSingle < $lenDictSingle; ++$iDictSingle) {
            $k1 = $r->readFloat32();
            $v1 = $r->readFloat32();
            $this->dictSingle[$k1] = $v1;
        }
        $this->dictDouble = array();
        $lenDictDouble = $r->readUInt32();
        for ($iDictDouble = 0; $iDictDouble < $lenDictDouble; ++$iDictDouble) {
            $k1 = $r->readFloat64();
            $v1 = $r->readFloat64();
            $this->dictDouble[$k1] = $v1;
        }
        $this->dictBoolean = array();
        $lenDictBoolean = $r->readUInt32();
        for ($iDictBoolean = 0; $iDictBoolean < $lenDictBoolean; ++$iDictBoolean) {
            $k1 = $r->readBoolean();
            $v1 = $r->readBoolean();
            $this->dictBoolean[$k1] = $v1;
        }
        $this->dictString = array();
        $lenDictString = $r->readUInt32();
        for ($iDictString = 0; $iDictString < $lenDictString; ++$iDictString) {
            $k1 = $r->readUTF();
            $v1 = $r->readUTF();
            $this->dictString[$k1] = $v1;
        }
        $this->dictEnum = array();
        $lenDictEnum = $r->readUInt32();
        for ($iDictEnum = 0; $iDictEnum < $lenDictEnum; ++$iDictEnum) {
            $k1 = $r->readInt32();
            $v1 = $r->readInt32();
            $this->dictEnum[$k1] = $v1;
        }
        $this->dictStruct = array();
        $lenDictStruct = $r->readUInt32();
        for ($iDictStruct = 0; $iDictStruct < $lenDictStruct; ++$iDictStruct) {
            $k1 = new Custom();
            $k1->read($r);
            $v1 = new Custom();
            $v1->read($r);
            $this->dictStruct[$k1] = $v1;
        }
        $hotfixExists = $r->readInt08();
        if (0x01 == $hotfixExists) {
            if ($this->hotfix == NULL) { $this->hotfix = array(); }
            $lenHotfix = $r->readUInt32();
            for ($iHotfix = 0; $iHotfix < $lenHotfix; ++$iHotfix) {
                $k1 = $r->readUTF();
                $v1 = $r->readUTF();
                $this->hotfix[$k1] = $v1;
            }
        }
        else if (0x00 == $hotfixExists) { $this->hotfix = NULL; }
        else { throw new \Exception('Protoc read error: The value of ' . $hotfixExists . ' is invalid.', 498); }
        return $this;
    }
    /* End of read(...) */

    public function write (& $str)
    {
        BinaryWriter::writeInt32(count($this->dictI08), $str);
        foreach ($this->dictI08 as $k1 => &$v1) {
            BinaryWriter::writeInt08($k1, $str);
            BinaryWriter::writeInt08($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictI16), $str);
        foreach ($this->dictI16 as $k1 => &$v1) {
            BinaryWriter::writeInt16($k1, $str);
            BinaryWriter::writeInt16($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictI32), $str);
        foreach ($this->dictI32 as $k1 => &$v1) {
            BinaryWriter::writeInt32($k1, $str);
            BinaryWriter::writeInt32($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictI64), $str);
        foreach ($this->dictI64 as $k1 => &$v1) {
            BinaryWriter::writeInt64($k1, $str);
            BinaryWriter::writeInt64($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictU08), $str);
        foreach ($this->dictU08 as $k1 => &$v1) {
            BinaryWriter::writeUInt08($k1, $str);
            BinaryWriter::writeUInt08($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictU16), $str);
        foreach ($this->dictU16 as $k1 => &$v1) {
            BinaryWriter::writeUInt16($k1, $str);
            BinaryWriter::writeUInt16($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictU32), $str);
        foreach ($this->dictU32 as $k1 => &$v1) {
            BinaryWriter::writeUInt32($k1, $str);
            BinaryWriter::writeUInt32($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictU64), $str);
        foreach ($this->dictU64 as $k1 => &$v1) {
            BinaryWriter::writeUInt64($k1, $str);
            BinaryWriter::writeUInt64($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictSingle), $str);
        foreach ($this->dictSingle as $k1 => &$v1) {
            BinaryWriter::writeFloat32($k1, $str);
            BinaryWriter::writeFloat32($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictDouble), $str);
        foreach ($this->dictDouble as $k1 => &$v1) {
            BinaryWriter::writeFloat64($k1, $str);
            BinaryWriter::writeFloat64($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictBoolean), $str);
        foreach ($this->dictBoolean as $k1 => &$v1) {
            BinaryWriter::writeBoolean($k1, $str);
            BinaryWriter::writeBoolean($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictString), $str);
        foreach ($this->dictString as $k1 => &$v1) {
            BinaryWriter::writeUTF($k1, $str);
            BinaryWriter::writeUTF($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictEnum), $str);
        foreach ($this->dictEnum as $k1 => &$v1) {
            BinaryWriter::writeInt32($k1, $str);
            BinaryWriter::writeInt32($v1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictStruct), $str);
        foreach ($this->dictStruct as $k1 => &$v1) {
            $k1->write($str);
            $v1->write($str);
        }
        if ($this->hotfix != NULL) {
            BinaryWriter::writeInt08(0x01, $str);
            BinaryWriter::writeInt32(count($this->hotfix), $str);
            foreach ($this->hotfix as $k1 => &$v1) {
                BinaryWriter::writeUTF($k1, $str);
                BinaryWriter::writeUTF($v1, $str);
            }
        } else {
            BinaryWriter::writeInt08(0x00, $str);
        }
    }
    /* End of write(...) */

    /** 有符号的8位整数 */
    public function &getDictI08() { return $this->dictI08; }

    /** 有符号的16位整数 */
    public function &getDictI16() { return $this->dictI16; }

    /** 有符号的32位整数 */
    public function &getDictI32() { return $this->dictI32; }

    /** 有符号的64位整数 */
    public function &getDictI64() { return $this->dictI64; }

    /** 无符号的8位整数 */
    public function &getDictU08() { return $this->dictU08; }

    /** 无符号的16位整数 */
    public function &getDictU16() { return $this->dictU16; }

    /** 无符号的32位整数 */
    public function &getDictU32() { return $this->dictU32; }

    /** 无符号的64位整数 */
    public function &getDictU64() { return $this->dictU64; }

    /** 单精度浮点小数 */
    public function &getDictSingle() { return $this->dictSingle; }

    /** 双精度浮点小数 */
    public function &getDictDouble() { return $this->dictDouble; }

    /** 布尔值 */
    public function &getDictBoolean() { return $this->dictBoolean; }

    /** 字符串 */
    public function &getDictString() { return $this->dictString; }

    /** 枚举值 */
    public function &getDictEnum() { return $this->dictEnum; }

    /** 自定义结构 */
    public function &getDictStruct() { return $this->dictStruct; }

    /** [AutoAdd] Hotfix */
    public function getHotfix() { return $this->hotfix; }

    /** [AutoAdd] Hotfix */
    public function setHotfix($value) { $this->hotfix = $value; return $this; }

    public function &toString()
    {
        $s  = '{'; $s .= get_class($this);
        $s .= ','; $s .= 'dictI08'; $s .= ':';
        $s .= '['; $s .= count($this->dictI08); $s .= ']';
        $s .= ','; $s .= 'dictI16'; $s .= ':';
        $s .= '['; $s .= count($this->dictI16); $s .= ']';
        $s .= ','; $s .= 'dictI32'; $s .= ':';
        $s .= '['; $s .= count($this->dictI32); $s .= ']';
        $s .= ','; $s .= 'dictI64'; $s .= ':';
        $s .= '['; $s .= count($this->dictI64); $s .= ']';
        $s .= ','; $s .= 'dictU08'; $s .= ':';
        $s .= '['; $s .= count($this->dictU08); $s .= ']';
        $s .= ','; $s .= 'dictU16'; $s .= ':';
        $s .= '['; $s .= count($this->dictU16); $s .= ']';
        $s .= ','; $s .= 'dictU32'; $s .= ':';
        $s .= '['; $s .= count($this->dictU32); $s .= ']';
        $s .= ','; $s .= 'dictU64'; $s .= ':';
        $s .= '['; $s .= count($this->dictU64); $s .= ']';
        $s .= ','; $s .= 'dictSingle'; $s .= ':';
        $s .= '['; $s .= count($this->dictSingle); $s .= ']';
        $s .= ','; $s .= 'dictDouble'; $s .= ':';
        $s .= '['; $s .= count($this->dictDouble); $s .= ']';
        $s .= ','; $s .= 'dictBoolean'; $s .= ':';
        $s .= '['; $s .= count($this->dictBoolean); $s .= ']';
        $s .= ','; $s .= 'dictString'; $s .= ':';
        $s .= '['; $s .= count($this->dictString); $s .= ']';
        $s .= ','; $s .= 'dictEnum'; $s .= ':';
        $s .= '['; $s .= count($this->dictEnum); $s .= ']';
        $s .= ','; $s .= 'dictStruct'; $s .= ':';
        $s .= '['; $s .= count($this->dictStruct); $s .= ']';
        $s .= ','; $s .= 'hotfix'; $s .= ':';
        if (isset($this->hotfix)) { $s .= '['; $s .= count($this->hotfix); $s .= ']'; }
        else { $s .= 'null'; }
        $s .= '}';
        return $s;
    }
    /* End of toString() */

    public function &toStringJSON()
    {
        $code = '';
        $this->writeJSON($code);
        return $code;
    }

    public function writeJSON(& $s)
    {
        $s .= "\n"; $s .= '{';
        $dictI08Exists = (isset($this->dictI08) && count($this->dictI08) > 0);
        if ($dictI08Exists) {
            $s .= '"'; $s .= 'dictI08'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictI08Size = (!isset($this->dictI08) ? 0 : count($this->dictI08));
            $s .= "\n"; $s .= '{';
            $dictI08Idx = 0;
            foreach ($this->dictI08 as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictI08Idx;
                if (dictI08Idx != $dictI08Size) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictI16Exists = (isset($this->dictI16) && count($this->dictI16) > 0);
        if (!empty($comma) && $dictI16Exists) { $s .= $comma; $comma = ''; }
        if ($dictI16Exists) {
            $s .= '"'; $s .= 'dictI16'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictI16Size = (!isset($this->dictI16) ? 0 : count($this->dictI16));
            $s .= "\n"; $s .= '{';
            $dictI16Idx = 0;
            foreach ($this->dictI16 as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictI16Idx;
                if (dictI16Idx != $dictI16Size) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictI32Exists = (isset($this->dictI32) && count($this->dictI32) > 0);
        if (!empty($comma) && $dictI32Exists) { $s .= $comma; $comma = ''; }
        if ($dictI32Exists) {
            $s .= '"'; $s .= 'dictI32'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictI32Size = (!isset($this->dictI32) ? 0 : count($this->dictI32));
            $s .= "\n"; $s .= '{';
            $dictI32Idx = 0;
            foreach ($this->dictI32 as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictI32Idx;
                if (dictI32Idx != $dictI32Size) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictI64Exists = (isset($this->dictI64) && count($this->dictI64) > 0);
        if (!empty($comma) && $dictI64Exists) { $s .= $comma; $comma = ''; }
        if ($dictI64Exists) {
            $s .= '"'; $s .= 'dictI64'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictI64Size = (!isset($this->dictI64) ? 0 : count($this->dictI64));
            $s .= "\n"; $s .= '{';
            $dictI64Idx = 0;
            foreach ($this->dictI64 as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictI64Idx;
                if (dictI64Idx != $dictI64Size) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictU08Exists = (isset($this->dictU08) && count($this->dictU08) > 0);
        if (!empty($comma) && $dictU08Exists) { $s .= $comma; $comma = ''; }
        if ($dictU08Exists) {
            $s .= '"'; $s .= 'dictU08'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictU08Size = (!isset($this->dictU08) ? 0 : count($this->dictU08));
            $s .= "\n"; $s .= '{';
            $dictU08Idx = 0;
            foreach ($this->dictU08 as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictU08Idx;
                if (dictU08Idx != $dictU08Size) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictU16Exists = (isset($this->dictU16) && count($this->dictU16) > 0);
        if (!empty($comma) && $dictU16Exists) { $s .= $comma; $comma = ''; }
        if ($dictU16Exists) {
            $s .= '"'; $s .= 'dictU16'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictU16Size = (!isset($this->dictU16) ? 0 : count($this->dictU16));
            $s .= "\n"; $s .= '{';
            $dictU16Idx = 0;
            foreach ($this->dictU16 as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictU16Idx;
                if (dictU16Idx != $dictU16Size) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictU32Exists = (isset($this->dictU32) && count($this->dictU32) > 0);
        if (!empty($comma) && $dictU32Exists) { $s .= $comma; $comma = ''; }
        if ($dictU32Exists) {
            $s .= '"'; $s .= 'dictU32'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictU32Size = (!isset($this->dictU32) ? 0 : count($this->dictU32));
            $s .= "\n"; $s .= '{';
            $dictU32Idx = 0;
            foreach ($this->dictU32 as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictU32Idx;
                if (dictU32Idx != $dictU32Size) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictU64Exists = (isset($this->dictU64) && count($this->dictU64) > 0);
        if (!empty($comma) && $dictU64Exists) { $s .= $comma; $comma = ''; }
        if ($dictU64Exists) {
            $s .= '"'; $s .= 'dictU64'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictU64Size = (!isset($this->dictU64) ? 0 : count($this->dictU64));
            $s .= "\n"; $s .= '{';
            $dictU64Idx = 0;
            foreach ($this->dictU64 as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictU64Idx;
                if (dictU64Idx != $dictU64Size) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictSingleExists = (isset($this->dictSingle) && count($this->dictSingle) > 0);
        if (!empty($comma) && $dictSingleExists) { $s .= $comma; $comma = ''; }
        if ($dictSingleExists) {
            $s .= '"'; $s .= 'dictSingle'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictSingleSize = (!isset($this->dictSingle) ? 0 : count($this->dictSingle));
            $s .= "\n"; $s .= '{';
            $dictSingleIdx = 0;
            foreach ($this->dictSingle as $k1 => &$v1) {
                $s .= number_format($k1, 6, '.', '');
                $s .= number_format($v1, 6, '.', '');
                ++$dictSingleIdx;
                if (dictSingleIdx != $dictSingleSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictDoubleExists = (isset($this->dictDouble) && count($this->dictDouble) > 0);
        if (!empty($comma) && $dictDoubleExists) { $s .= $comma; $comma = ''; }
        if ($dictDoubleExists) {
            $s .= '"'; $s .= 'dictDouble'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictDoubleSize = (!isset($this->dictDouble) ? 0 : count($this->dictDouble));
            $s .= "\n"; $s .= '{';
            $dictDoubleIdx = 0;
            foreach ($this->dictDouble as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictDoubleIdx;
                if (dictDoubleIdx != $dictDoubleSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictBooleanExists = (isset($this->dictBoolean) && count($this->dictBoolean) > 0);
        if (!empty($comma) && $dictBooleanExists) { $s .= $comma; $comma = ''; }
        if ($dictBooleanExists) {
            $s .= '"'; $s .= 'dictBoolean'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictBooleanSize = (!isset($this->dictBoolean) ? 0 : count($this->dictBoolean));
            $s .= "\n"; $s .= '{';
            $dictBooleanIdx = 0;
            foreach ($this->dictBoolean as $k1 => &$v1) {
                $s .= $k1 ? "true" : "false";
                $s .= $v1 ? "true" : "false";
                ++$dictBooleanIdx;
                if (dictBooleanIdx != $dictBooleanSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictStringExists = (isset($this->dictString) && count($this->dictString) > 0);
        if (!empty($comma) && $dictStringExists) { $s .= $comma; $comma = ''; }
        if ($dictStringExists) {
            $s .= '"'; $s .= 'dictString'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictStringSize = (!isset($this->dictString) ? 0 : count($this->dictString));
            $s .= "\n"; $s .= '{';
            $dictStringIdx = 0;
            foreach ($this->dictString as $k1 => &$v1) {
                $s .= '"'; $s .= $k1; $s .= '"';
                $s .= '"'; $s .= $v1; $s .= '"';
                ++$dictStringIdx;
                if (dictStringIdx != $dictStringSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictEnumExists = (isset($this->dictEnum) && count($this->dictEnum) > 0);
        if (!empty($comma) && $dictEnumExists) { $s .= $comma; $comma = ''; }
        if ($dictEnumExists) {
            $s .= '"'; $s .= 'dictEnum'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictEnumSize = (!isset($this->dictEnum) ? 0 : count($this->dictEnum));
            $s .= "\n"; $s .= '{';
            $dictEnumIdx = 0;
            foreach ($this->dictEnum as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictEnumIdx;
                if (dictEnumIdx != $dictEnumSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $dictStructExists = (isset($this->dictStruct) && count($this->dictStruct) > 0);
        if (!empty($comma) && $dictStructExists) { $s .= $comma; $comma = ''; }
        if ($dictStructExists) {
            $s .= '"'; $s .= 'dictStruct'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictStructSize = (!isset($this->dictStruct) ? 0 : count($this->dictStruct));
            $s .= "\n"; $s .= '{';
            $dictStructIdx = 0;
            foreach ($this->dictStruct as $k1 => &$v1) {
                $k1->writeJSON($s);
                $v1->writeJSON($s);
                ++$dictStructIdx;
                if (dictStructIdx != $dictStructSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $hotfixExists = (isset($this->hotfix) && count($this->hotfix) > 0);
        if (!empty($comma) && $hotfixExists) { $s .= $comma; $comma = ''; }
        if ($hotfixExists) {
            $s .= '"'; $s .= 'hotfix'; $s .= '"'; $s .= ':'; $comma = ',';
            $hotfixSize = (!isset($this->hotfix) ? 0 : count($this->hotfix));
            $s .= "\n"; $s .= '{';
            $hotfixIdx = 0;
            foreach ($this->hotfix as $k1 => &$v1) {
                $s .= '"'; $s .= $k1; $s .= '"';
                $s .= '"'; $s .= $v1; $s .= '"';
                ++$hotfixIdx;
                if (hotfixIdx != $hotfixSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $s .= '}'; $s .= "\n";
    }
    /* End of writeJSON(...) */

    public function &toStringXML()
    {
        $code  = '<?xml version="1.0" encoding="UTF-8"?>';
        $code .= "\n"; $code .= '<!-- '; $code .= 'TestDict'; $code .= '.CRC32: 0x';
        $code .= strtoupper(dechex(self::CRC32)); $code .= ' -->';
        $code .= "\n"; $this->writeXML($code, 'TestDict');
        return $code;
    }

    public function writeXML (& $s, $name)
    {
        $attrs = ''; $nodes = '';
        if (count($this->dictI08) > 0) {
            $nodes .= '<'; $nodes .= 'dictI08'; $nodes .= '>';
            foreach ($this->dictI08 as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictI08'; $nodes .= '>';
        }
        if (count($this->dictI16) > 0) {
            $nodes .= '<'; $nodes .= 'dictI16'; $nodes .= '>';
            foreach ($this->dictI16 as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictI16'; $nodes .= '>';
        }
        if (count($this->dictI32) > 0) {
            $nodes .= '<'; $nodes .= 'dictI32'; $nodes .= '>';
            foreach ($this->dictI32 as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictI32'; $nodes .= '>';
        }
        if (count($this->dictI64) > 0) {
            $nodes .= '<'; $nodes .= 'dictI64'; $nodes .= '>';
            foreach ($this->dictI64 as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictI64'; $nodes .= '>';
        }
        if (count($this->dictU08) > 0) {
            $nodes .= '<'; $nodes .= 'dictU08'; $nodes .= '>';
            foreach ($this->dictU08 as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictU08'; $nodes .= '>';
        }
        if (count($this->dictU16) > 0) {
            $nodes .= '<'; $nodes .= 'dictU16'; $nodes .= '>';
            foreach ($this->dictU16 as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictU16'; $nodes .= '>';
        }
        if (count($this->dictU32) > 0) {
            $nodes .= '<'; $nodes .= 'dictU32'; $nodes .= '>';
            foreach ($this->dictU32 as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictU32'; $nodes .= '>';
        }
        if (count($this->dictU64) > 0) {
            $nodes .= '<'; $nodes .= 'dictU64'; $nodes .= '>';
            foreach ($this->dictU64 as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictU64'; $nodes .= '>';
        }
        if (count($this->dictSingle) > 0) {
            $nodes .= '<'; $nodes .= 'dictSingle'; $nodes .= '>';
            foreach ($this->dictSingle as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $number_format($k1, 6, '.', ''); $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $number_format($v1, 6, '.', ''); $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictSingle'; $nodes .= '>';
        }
        if (count($this->dictDouble) > 0) {
            $nodes .= '<'; $nodes .= 'dictDouble'; $nodes .= '>';
            foreach ($this->dictDouble as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictDouble'; $nodes .= '>';
        }
        if (count($this->dictBoolean) > 0) {
            $nodes .= '<'; $nodes .= 'dictBoolean'; $nodes .= '>';
            foreach ($this->dictBoolean as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1 ? "true" : "false"; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1 ? "true" : "false"; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictBoolean'; $nodes .= '>';
        }
        if (count($this->dictString) > 0) {
            $nodes .= '<'; $nodes .= 'dictString'; $nodes .= '>';
            foreach ($this->dictString as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictString'; $nodes .= '>';
        }
        if (count($this->dictEnum) > 0) {
            $nodes .= '<'; $nodes .= 'dictEnum'; $nodes .= '>';
            foreach ($this->dictEnum as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictEnum'; $nodes .= '>';
        }
        if (count($this->dictStruct) > 0) {
            $nodes .= '<'; $nodes .= 'dictStruct'; $nodes .= '>';
            foreach ($this->dictStruct as $k1 => &$v1) {
                $k1->writeXML($nodes, 'k1');
                $v1->writeXML($nodes, 'v1');
            }
            $nodes .= '</'; $nodes .= 'dictStruct'; $nodes .= '>';
        }
        if (isset($this->hotfix) && count($this->hotfix) > 0) {
            $nodes .= '<'; $nodes .= 'hotfix'; $nodes .= '>';
            foreach ($this->hotfix as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'hotfix'; $nodes .= '>';
        }
        $s .= '<';
        $s .= $name;
        $s .= $attrs;
        if (strlen($nodes) == 0) {
            $s .= '/>';
        } else {
            $s .= '>'; $s .= $nodes;
            $s .= '</'; $s .= $name; $s .= '>';
        }
    }
    /* End of writeXML(...) */

}
