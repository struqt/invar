#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ===------------------------------*  Python  *------------------------------===
#             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
# ===------------------------------------------------------------------------===

from TestAbcCustom import Custom
from TestAbcGender import Gender
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO
from InvarCodec import DataWriter
from InvarCodec import DataReader

class TestDict(object):

    """测试基本的映射类型"""
    CRC32_ = 0x969046DE
    SIZE_  = 57

    __slots__ = (
        '_dictI08',
        '_dictI16',
        '_dictI32',
        '_dictI64',
        '_dictU08',
        '_dictU16',
        '_dictU32',
        '_dictU64',
        '_dictSingle',
        '_dictDouble',
        '_dictBoolean',
        '_dictString',
        '_dictEnum',
        '_dictStruct',
        '_hotfix')
   #__slots__

    def __init__(self):
        self._dictI08     = {}
        self._dictI16     = {}
        self._dictI32     = {}
        self._dictI64     = {}
        self._dictU08     = {}
        self._dictU16     = {}
        self._dictU32     = {}
        self._dictU64     = {}
        self._dictSingle  = {}
        self._dictDouble  = {}
        self._dictBoolean = {}
        self._dictString  = {}
        self._dictEnum    = {}
        self._dictStruct  = {}
        self._hotfix      = None
   #def __init__

    def __str__(self):
        s = StringIO()
        s.write(u'{')
        s.write(u' ')
        s.write(u'TestDict')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictI08')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictI08)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictI16')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictI16)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictI32')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictI32)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictI64')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictI64)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictU08')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictU08)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictU16')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictU16)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictU32')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictU32)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictU64')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictU64)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictSingle')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictSingle)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictDouble')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictDouble)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictBoolean')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictBoolean)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictString')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictString)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictEnum')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictEnum)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictStruct')
        s.write(u':')
        s.write(u'[')
        s.write(str(len(self._dictStruct)))
        s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'hotfix')
        s.write(u':')
        if self._hotfix is None:
            s.write(u'null')
        else:
            s.write(u'[')
            s.write(str(len(self._hotfix)))
            s.write(u']')
        s.write(u' ')
        s.write(u'}')
        result = s.getvalue()
        s.close()
        return result
   #def __str__

    def __len__(self):
        size = TestDict.SIZE_
        if len(self._dictI08) > 0:
            size += len(self._dictI08) * 2
        if len(self._dictI16) > 0:
            size += len(self._dictI16) * 4
        if len(self._dictI32) > 0:
            size += len(self._dictI32) * 8
        if len(self._dictI64) > 0:
            size += len(self._dictI64) * 16
        if len(self._dictU08) > 0:
            size += len(self._dictU08) * 2
        if len(self._dictU16) > 0:
            size += len(self._dictU16) * 4
        if len(self._dictU32) > 0:
            size += len(self._dictU32) * 8
        if len(self._dictU64) > 0:
            size += len(self._dictU64) * 8
        if len(self._dictSingle) > 0:
            size += len(self._dictSingle) * 8
        if len(self._dictDouble) > 0:
            size += len(self._dictDouble) * 16
        if len(self._dictBoolean) > 0:
            size += len(self._dictBoolean) * 2
        size += 4
        for (k1,v1) in self._dictString.items():
            size += len(k1)
            size += len(v1)
        if len(self._dictEnum) > 0:
            size += len(self._dictEnum) * 8
        size += 4
        for (k1,v1) in self._dictStruct.items():
            size += len(k1)
            size += len(v1)
        if self._hotfix is not None:
            size += 4
            for (k1,v1) in self._hotfix.items():
                size += len(k1)
                size += len(v1)
        return size
   #def __len__

    def read(r):
        lenDictI08 = r.readUInt32()
        num = 0
        while num < lenDictI08:
            num += 1
            k1 = r.readInt8()
            v1 = r.readInt8()
            self._dictI08[k1] = v1
        lenDictI16 = r.readUInt32()
        num = 0
        while num < lenDictI16:
            num += 1
            k1 = r.readInt16()
            v1 = r.readInt16()
            self._dictI16[k1] = v1
        lenDictI32 = r.readUInt32()
        num = 0
        while num < lenDictI32:
            num += 1
            k1 = r.readInt32()
            v1 = r.readInt32()
            self._dictI32[k1] = v1
        lenDictI64 = r.readUInt32()
        num = 0
        while num < lenDictI64:
            num += 1
            k1 = r.readInt64()
            v1 = r.readInt64()
            self._dictI64[k1] = v1
        lenDictU08 = r.readUInt32()
        num = 0
        while num < lenDictU08:
            num += 1
            k1 = r.readUInt8()
            v1 = r.readUInt8()
            self._dictU08[k1] = v1
        lenDictU16 = r.readUInt32()
        num = 0
        while num < lenDictU16:
            num += 1
            k1 = r.readUInt16()
            v1 = r.readUInt16()
            self._dictU16[k1] = v1
        lenDictU32 = r.readUInt32()
        num = 0
        while num < lenDictU32:
            num += 1
            k1 = r.readUInt32()
            v1 = r.readUInt32()
            self._dictU32[k1] = v1
        lenDictU64 = r.readUInt32()
        num = 0
        while num < lenDictU64:
            num += 1
            k1 = r.readUInt32()
            v1 = r.readUInt32()
            self._dictU64[k1] = v1
        lenDictSingle = r.readUInt32()
        num = 0
        while num < lenDictSingle:
            num += 1
            k1 = r.readSingle()
            v1 = r.readSingle()
            self._dictSingle[k1] = v1
        lenDictDouble = r.readUInt32()
        num = 0
        while num < lenDictDouble:
            num += 1
            k1 = r.readDouble()
            v1 = r.readDouble()
            self._dictDouble[k1] = v1
        lenDictBoolean = r.readUInt32()
        num = 0
        while num < lenDictBoolean:
            num += 1
            k1 = r.readBoolean()
            v1 = r.readBoolean()
            self._dictBoolean[k1] = v1
        lenDictString = r.readUInt32()
        num = 0
        while num < lenDictString:
            num += 1
            k1 = r.readString()
            v1 = r.readString()
            self._dictString[k1] = v1
        lenDictEnum = r.readUInt32()
        num = 0
        while num < lenDictEnum:
            num += 1
            k1 = r.readInt32()
            v1 = r.readInt32()
            self._dictEnum[k1] = v1
        lenDictStruct = r.readUInt32()
        num = 0
        while num < lenDictStruct:
            num += 1
            k1 = Custom()
            k1.read(r)
            v1 = Custom()
            v1.read(r)
            self._dictStruct[k1] = v1
        hotfixExists = r.readInt8()
        if 0x01 == hotfixExists:
            if self._hotfix == None:
                self._hotfix = dict()
            lenHotfix = r.readUInt32()
            num = 0
            while num < lenHotfix:
                num += 1
                k1 = r.readString()
                v1 = r.readString()
                self._hotfix[k1] = v1
        elif 0x00 == hotfixExists:
            self._hotfix = None
        else:
            raise InvarError(498, 'Protoc read error: The value of \'hotfixExists\' is invalid.')
   #def read

    def write(w):
        w.writeUInt32(len(self._dictI08))
        for (k1,v1) in self._dictI08.items():
            w.writeInt8(k1)
            w.writeInt8(v1)
        w.writeUInt32(len(self._dictI16))
        for (k1,v1) in self._dictI16.items():
            w.writeInt16(k1)
            w.writeInt16(v1)
        w.writeUInt32(len(self._dictI32))
        for (k1,v1) in self._dictI32.items():
            w.writeInt32(k1)
            w.writeInt32(v1)
        w.writeUInt32(len(self._dictI64))
        for (k1,v1) in self._dictI64.items():
            w.writeInt64(k1)
            w.writeInt64(v1)
        w.writeUInt32(len(self._dictU08))
        for (k1,v1) in self._dictU08.items():
            w.writeUInt8(k1)
            w.writeUInt8(v1)
        w.writeUInt32(len(self._dictU16))
        for (k1,v1) in self._dictU16.items():
            w.writeUInt16(k1)
            w.writeUInt16(v1)
        w.writeUInt32(len(self._dictU32))
        for (k1,v1) in self._dictU32.items():
            w.writeUInt32(k1)
            w.writeUInt32(v1)
        w.writeUInt32(len(self._dictU64))
        for (k1,v1) in self._dictU64.items():
            w.writeUInt32(k1)
            w.writeUInt32(v1)
        w.writeUInt32(len(self._dictSingle))
        for (k1,v1) in self._dictSingle.items():
            w.writeFloat(k1)
            w.writeFloat(v1)
        w.writeUInt32(len(self._dictDouble))
        for (k1,v1) in self._dictDouble.items():
            w.writeDouble(k1)
            w.writeDouble(v1)
        w.writeUInt32(len(self._dictBoolean))
        for (k1,v1) in self._dictBoolean.items():
            w.writeBool(k1)
            w.writeBool(v1)
        w.writeUInt32(len(self._dictString))
        for (k1,v1) in self._dictString.items():
            w.writeString(k1)
            w.writeString(v1)
        w.writeUInt32(len(self._dictEnum))
        for (k1,v1) in self._dictEnum.items():
            w.writeInt32(k1)
            w.writeInt32(v1)
        w.writeUInt32(len(self._dictStruct))
        for (k1,v1) in self._dictStruct.items():
            k1.write(w)
            v1.write(w)
        if self._hotfix != None:
            w.writeUInt8(0x01)
            w.writeUInt32(len(self._hotfix))
            for (k1,v1) in self._hotfix.items():
                w.writeString(k1)
                w.writeString(v1)
        else:
            w.writeUInt8(0x00)
   #def write

#class TestDict

if '__main__' == __name__:
    print('dir(TestDict()) =>\n' + '\n'.join(dir(TestDict())))
    print('TestDict.__doc__ => ' + TestDict.__doc__)
    print('TestDict.__len__ => ' + str(len(TestDict())))
    print('TestDict.__str__ => ' + str(TestDict()))
