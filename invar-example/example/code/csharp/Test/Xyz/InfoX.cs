/*===-----------------------------*  C#  *---------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace Test.Xyz {

using System.Collections.Generic;
using System.IO;
using System.Text;
using System;
using Test.Abc;

/// Complex data structure.
public sealed class InfoX
: Invar.BinaryDecode
, Invar.BinaryEncode
, Invar.JSONEncode
, Invar.XMLEncode
{
    public const uint CRC32 = 0xF55867E1;

    private List<List<List<List<List<Info>>>>>        infos      = new List<List<List<List<List<Info>>>>>();
    private Test.Xyz.Conflict                         conflict_x = new Test.Xyz.Conflict(); // Two types with the same name..
    private Test.Abc.Conflict                         conflict_a = new Test.Abc.Conflict(); // Two types with the same name..
    private Dictionary<Int32,Test.Abc.Conflict>       mConflict  = new Dictionary<Int32,Test.Abc.Conflict>();
    private List<List<Info>>                          info2d     = new List<List<Info>>(); // 2 dimension list.
    private List<List<List<Info>>>                    info3d     = new List<List<List<Info>>>(); // 3 dimension list.
    private List<List<List<List<List<Info>>>>>        info5d     = new List<List<List<List<List<Info>>>>>();
    private List<Dictionary<Int16,Info>>              infovm     = new List<Dictionary<Int16,Info>>();
    private Dictionary<List<Gender>,Info>             mvei       = new Dictionary<List<Gender>,Info>();
    private Dictionary<Info,List<Gender>>             mive       = new Dictionary<Info,List<Gender>>();
    private Dictionary<List<Info>,List<Gender>>       mvive      = new Dictionary<List<Info>,List<Gender>>();
    private List<Dictionary<List<Info>,List<Gender>>> vmvive     = new List<Dictionary<List<Info>,List<Gender>>>();
    private Dictionary<String,String>                 hotfix     = null; // [AutoAdd] Hotfix.

    /// .
    [Invar.InvarRule("vec<vec<vec<vec<vec<Test.Abc.Info>>>>>", "0")]
    public List<List<List<List<List<Info>>>>> GetInfos() { return this.infos; }

    /// Two types with the same name..
    [Invar.InvarRule("Test.Xyz.Conflict", "1")]
    public Test.Xyz.Conflict GetConflict_x() { return this.conflict_x; }

    /// Two types with the same name..
    [Invar.InvarRule("Test.Abc.Conflict", "2")]
    public Test.Abc.Conflict GetConflict_a() { return this.conflict_a; }

    /// .
    [Invar.InvarRule("map<int32,Test.Abc.Conflict>", "3")]
    public Dictionary<Int32,Test.Abc.Conflict> GetMConflict() { return this.mConflict; }

    /// 2 dimension list.
    [Invar.InvarRule("vec<vec<Test.Abc.Info>>", "4")]
    public List<List<Info>> GetInfo2d() { return this.info2d; }

    /// 3 dimension list.
    [Invar.InvarRule("vec<vec<vec<Test.Abc.Info>>>", "5")]
    public List<List<List<Info>>> GetInfo3d() { return this.info3d; }

    /// .
    [Invar.InvarRule("vec<vec<vec<vec<vec<Test.Abc.Info>>>>>", "6")]
    public List<List<List<List<List<Info>>>>> GetInfo5d() { return this.info5d; }

    /// .
    [Invar.InvarRule("vec<map<int16,Test.Abc.Info>>", "7")]
    public List<Dictionary<Int16,Info>> GetInfovm() { return this.infovm; }

    /// .
    [Invar.InvarRule("map<vec<Test.Abc.Gender>,Test.Abc.Info>", "8")]
    public Dictionary<List<Gender>,Info> GetMvei() { return this.mvei; }

    /// .
    [Invar.InvarRule("map<Test.Abc.Info,vec<Test.Abc.Gender>>", "9")]
    public Dictionary<Info,List<Gender>> GetMive() { return this.mive; }

    /// .
    [Invar.InvarRule("map<vec<Test.Abc.Info>,vec<Test.Abc.Gender>>", "10")]
    public Dictionary<List<Info>,List<Gender>> GetMvive() { return this.mvive; }

    /// .
    [Invar.InvarRule("vec<map<vec<Test.Abc.Info>,vec<Test.Abc.Gender>>>", "11")]
    public List<Dictionary<List<Info>,List<Gender>>> GetVmvive() { return this.vmvive; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "12")]
    public Dictionary<String,String> GetHotfix() { return this.hotfix; }

    /// Two types with the same name..
    [Invar.InvarRule("Test.Xyz.Conflict", "1")]
    public InfoX SetConflict_x(Test.Xyz.Conflict value) { this.conflict_x = value; return this; }

    /// Two types with the same name..
    [Invar.InvarRule("Test.Abc.Conflict", "2")]
    public InfoX SetConflict_a(Test.Abc.Conflict value) { this.conflict_a = value; return this; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "12")]
    public InfoX SetHotfix(Dictionary<String,String> value) { this.hotfix = value; return this; }

    public InfoX Reuse()
    {
        this.infos.Clear();
        this.conflict_x.Reuse();
        this.conflict_a.Reuse();
        this.mConflict.Clear();
        this.info2d.Clear();
        this.info3d.Clear();
        this.info5d.Clear();
        this.infovm.Clear();
        this.mvei.Clear();
        this.mive.Clear();
        this.mvive.Clear();
        this.vmvive.Clear();
        if (this.hotfix != null) { this.hotfix.Clear(); }
        return this;
    } //InfoX::Reuse()

    public InfoX Copy(InfoX from_)
    {
        if (null == from_ || this == from_) {
            return this;
        }
        this.infos.Clear();
        this.infos.AddRange(from_.infos);
        this.conflict_x.Copy(from_.conflict_x);
        this.conflict_a.Copy(from_.conflict_a);
        this.mConflict.Clear();
        foreach (var mConflictIter in from_.mConflict) {
            this.mConflict.Add(mConflictIter.Key, mConflictIter.Value);
        }
        this.info2d.Clear();
        this.info2d.AddRange(from_.info2d);
        this.info3d.Clear();
        this.info3d.AddRange(from_.info3d);
        this.info5d.Clear();
        this.info5d.AddRange(from_.info5d);
        this.infovm.Clear();
        this.infovm.AddRange(from_.infovm);
        this.mvei.Clear();
        foreach (var mveiIter in from_.mvei) {
            this.mvei.Add(mveiIter.Key, mveiIter.Value);
        }
        this.mive.Clear();
        foreach (var miveIter in from_.mive) {
            this.mive.Add(miveIter.Key, miveIter.Value);
        }
        this.mvive.Clear();
        foreach (var mviveIter in from_.mvive) {
            this.mvive.Add(mviveIter.Key, mviveIter.Value);
        }
        this.vmvive.Clear();
        this.vmvive.AddRange(from_.vmvive);
        if (null == from_.hotfix) {
            this.hotfix = null;
        } else {
            if (null == this.hotfix) { this.hotfix = new Dictionary<String,String>(); }
            else { this.hotfix.Clear(); }
            foreach (var hotfixIter in from_.hotfix) {
                this.hotfix.Add(hotfixIter.Key, hotfixIter.Value);
            }
        }
        return this;
    } //InfoX::Copy(...)

    public void Read(BinaryReader r)
    {
        UInt32 lenInfos = r.ReadUInt32();
        for (UInt32 iInfos = 0; iInfos < lenInfos; iInfos++) {
            List<List<List<List<Info>>>> n1 = new List<List<List<List<Info>>>>(); //read.vec.head
            UInt32 lenN1 = r.ReadUInt32();
            for (UInt32 iN1 = 0; iN1 < lenN1; iN1++) {
                List<List<List<Info>>> n2 = new List<List<List<Info>>>(); //read.vec.head
                UInt32 lenN2 = r.ReadUInt32();
                for (UInt32 iN2 = 0; iN2 < lenN2; iN2++) {
                    List<List<Info>> n3 = new List<List<Info>>(); //read.vec.head
                    UInt32 lenN3 = r.ReadUInt32();
                    for (UInt32 iN3 = 0; iN3 < lenN3; iN3++) {
                        List<Info> n4 = new List<Info>(); //read.vec.head
                        UInt32 lenN4 = r.ReadUInt32();
                        for (UInt32 iN4 = 0; iN4 < lenN4; iN4++) {
                            Info n5 = new Info();
                            n5.Read(r);
                            n4.Add(n5);
                        }
                        n3.Add(n4);
                    }
                    n2.Add(n3);
                }
                n1.Add(n2);
            }
            this.infos.Add(n1);
        }
        this.conflict_x.Read(r);
        this.conflict_a.Read(r);
        UInt32 lenMConflict = r.ReadUInt32();
        for (UInt32 iMConflict = 0; iMConflict < lenMConflict; iMConflict++) {
            Int32 k1 = r.ReadInt32();
            Test.Abc.Conflict v1 = new Test.Abc.Conflict();
            v1.Read(r);
            if (!this.mConflict.ContainsKey(k1)) {
                this.mConflict.Add(k1, v1);
            } else {
                this.mConflict[k1] = v1;
            }
        }
        UInt32 lenInfo2d = r.ReadUInt32();
        for (UInt32 iInfo2d = 0; iInfo2d < lenInfo2d; iInfo2d++) {
            List<Info> n1 = new List<Info>(); //read.vec.head
            UInt32 lenN1 = r.ReadUInt32();
            for (UInt32 iN1 = 0; iN1 < lenN1; iN1++) {
                Info n2 = new Info();
                n2.Read(r);
                n1.Add(n2);
            }
            this.info2d.Add(n1);
        }
        UInt32 lenInfo3d = r.ReadUInt32();
        for (UInt32 iInfo3d = 0; iInfo3d < lenInfo3d; iInfo3d++) {
            List<List<Info>> n1 = new List<List<Info>>(); //read.vec.head
            UInt32 lenN1 = r.ReadUInt32();
            for (UInt32 iN1 = 0; iN1 < lenN1; iN1++) {
                List<Info> n2 = new List<Info>(); //read.vec.head
                UInt32 lenN2 = r.ReadUInt32();
                for (UInt32 iN2 = 0; iN2 < lenN2; iN2++) {
                    Info n3 = new Info();
                    n3.Read(r);
                    n2.Add(n3);
                }
                n1.Add(n2);
            }
            this.info3d.Add(n1);
        }
        UInt32 lenInfo5d = r.ReadUInt32();
        for (UInt32 iInfo5d = 0; iInfo5d < lenInfo5d; iInfo5d++) {
            List<List<List<List<Info>>>> n1 = new List<List<List<List<Info>>>>(); //read.vec.head
            UInt32 lenN1 = r.ReadUInt32();
            for (UInt32 iN1 = 0; iN1 < lenN1; iN1++) {
                List<List<List<Info>>> n2 = new List<List<List<Info>>>(); //read.vec.head
                UInt32 lenN2 = r.ReadUInt32();
                for (UInt32 iN2 = 0; iN2 < lenN2; iN2++) {
                    List<List<Info>> n3 = new List<List<Info>>(); //read.vec.head
                    UInt32 lenN3 = r.ReadUInt32();
                    for (UInt32 iN3 = 0; iN3 < lenN3; iN3++) {
                        List<Info> n4 = new List<Info>(); //read.vec.head
                        UInt32 lenN4 = r.ReadUInt32();
                        for (UInt32 iN4 = 0; iN4 < lenN4; iN4++) {
                            Info n5 = new Info();
                            n5.Read(r);
                            n4.Add(n5);
                        }
                        n3.Add(n4);
                    }
                    n2.Add(n3);
                }
                n1.Add(n2);
            }
            this.info5d.Add(n1);
        }
        UInt32 lenInfovm = r.ReadUInt32();
        for (UInt32 iInfovm = 0; iInfovm < lenInfovm; iInfovm++) {
            Dictionary<Int16,Info> n1 = new Dictionary<Int16,Info>(); //read.vec.head
            UInt32 lenN1 = r.ReadUInt32();
            for (UInt32 iN1 = 0; iN1 < lenN1; iN1++) {
                Int16 k2 = r.ReadInt16();
                Info v2 = new Info();
                v2.Read(r);
                if (!n1.ContainsKey(k2)) {
                    n1.Add(k2, v2);
                } else {
                    n1[k2] = v2;
                }
            }
            this.infovm.Add(n1);
        }
        UInt32 lenMvei = r.ReadUInt32();
        for (UInt32 iMvei = 0; iMvei < lenMvei; iMvei++) {
            List<Gender> k1 = new List<Gender>(); //read.map.head
            UInt32 lenK1 = r.ReadUInt32();
            for (UInt32 iK1 = 0; iK1 < lenK1; iK1++) {
                Gender n2 = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
                k1.Add(n2);
            }
            Info v1 = new Info();
            v1.Read(r);
            if (!this.mvei.ContainsKey(k1)) {
                this.mvei.Add(k1, v1);
            } else {
                this.mvei[k1] = v1;
            }
        }
        UInt32 lenMive = r.ReadUInt32();
        for (UInt32 iMive = 0; iMive < lenMive; iMive++) {
            Info k1 = new Info();
            k1.Read(r);
            List<Gender> v1 = new List<Gender>(); //read.map.head
            UInt32 lenV1 = r.ReadUInt32();
            for (UInt32 iV1 = 0; iV1 < lenV1; iV1++) {
                Gender n2 = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
                v1.Add(n2);
            }
            if (!this.mive.ContainsKey(k1)) {
                this.mive.Add(k1, v1);
            } else {
                this.mive[k1] = v1;
            }
        }
        UInt32 lenMvive = r.ReadUInt32();
        for (UInt32 iMvive = 0; iMvive < lenMvive; iMvive++) {
            List<Info> k1 = new List<Info>(); //read.map.head
            UInt32 lenK1 = r.ReadUInt32();
            for (UInt32 iK1 = 0; iK1 < lenK1; iK1++) {
                Info n2 = new Info();
                n2.Read(r);
                k1.Add(n2);
            }
            List<Gender> v1 = new List<Gender>(); //read.map.head
            UInt32 lenV1 = r.ReadUInt32();
            for (UInt32 iV1 = 0; iV1 < lenV1; iV1++) {
                Gender n2 = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
                v1.Add(n2);
            }
            if (!this.mvive.ContainsKey(k1)) {
                this.mvive.Add(k1, v1);
            } else {
                this.mvive[k1] = v1;
            }
        }
        UInt32 lenVmvive = r.ReadUInt32();
        for (UInt32 iVmvive = 0; iVmvive < lenVmvive; iVmvive++) {
            Dictionary<List<Info>,List<Gender>> n1 = new Dictionary<List<Info>,List<Gender>>(); //read.vec.head
            UInt32 lenN1 = r.ReadUInt32();
            for (UInt32 iN1 = 0; iN1 < lenN1; iN1++) {
                List<Info> k2 = new List<Info>(); //read.map.head
                UInt32 lenK2 = r.ReadUInt32();
                for (UInt32 iK2 = 0; iK2 < lenK2; iK2++) {
                    Info n3 = new Info();
                    n3.Read(r);
                    k2.Add(n3);
                }
                List<Gender> v2 = new List<Gender>(); //read.map.head
                UInt32 lenV2 = r.ReadUInt32();
                for (UInt32 iV2 = 0; iV2 < lenV2; iV2++) {
                    Gender n3 = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
                    v2.Add(n3);
                }
                if (!n1.ContainsKey(k2)) {
                    n1.Add(k2, v2);
                } else {
                    n1[k2] = v2;
                }
            }
            this.vmvive.Add(n1);
        }
        sbyte hotfixExists = r.ReadSByte();
        if ((sbyte)0x01 == hotfixExists) {
            if (this.hotfix == null) { this.hotfix = new Dictionary<String,String>(); }
            UInt32 lenHotfix = r.ReadUInt32();
            for (UInt32 iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
                String k1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                String v1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                if (!this.hotfix.ContainsKey(k1)) {
                    this.hotfix.Add(k1, v1);
                } else {
                    this.hotfix[k1] = v1;
                }
            }
        }
        else if ((sbyte)0x00 == hotfixExists) { this.hotfix = null; }
        else { throw new IOException("Protoc read error: The value of 'hotfixExists' is invalid.", 498); }
    } //InfoX::Read(...)

    public void Write(BinaryWriter w)
    {
        w.Write(this.infos.Count);
        foreach (List<List<List<List<Info>>>> n1 in this.infos) {
            w.Write(n1.Count);
            foreach (List<List<List<Info>>> n2 in n1) {
                w.Write(n2.Count);
                foreach (List<List<Info>> n3 in n2) {
                    w.Write(n3.Count);
                    foreach (List<Info> n4 in n3) {
                        w.Write(n4.Count);
                        foreach (Info n5 in n4) {
                            n5.Write(w);
                        }
                    }
                }
            }
        }
        this.conflict_x.Write(w);
        this.conflict_a.Write(w);
        w.Write(this.mConflict.Count);
        foreach (KeyValuePair<Int32,Test.Abc.Conflict> mConflictIter in this.mConflict) {
            Int32 k1 = mConflictIter.Key;
            w.Write(k1);
            Test.Abc.Conflict v1 = mConflictIter.Value;
            v1.Write(w);
        }
        w.Write(this.info2d.Count);
        foreach (List<Info> n1 in this.info2d) {
            w.Write(n1.Count);
            foreach (Info n2 in n1) {
                n2.Write(w);
            }
        }
        w.Write(this.info3d.Count);
        foreach (List<List<Info>> n1 in this.info3d) {
            w.Write(n1.Count);
            foreach (List<Info> n2 in n1) {
                w.Write(n2.Count);
                foreach (Info n3 in n2) {
                    n3.Write(w);
                }
            }
        }
        w.Write(this.info5d.Count);
        foreach (List<List<List<List<Info>>>> n1 in this.info5d) {
            w.Write(n1.Count);
            foreach (List<List<List<Info>>> n2 in n1) {
                w.Write(n2.Count);
                foreach (List<List<Info>> n3 in n2) {
                    w.Write(n3.Count);
                    foreach (List<Info> n4 in n3) {
                        w.Write(n4.Count);
                        foreach (Info n5 in n4) {
                            n5.Write(w);
                        }
                    }
                }
            }
        }
        w.Write(this.infovm.Count);
        foreach (Dictionary<Int16,Info> n1 in this.infovm) {
            w.Write(n1.Count);
            foreach (KeyValuePair<Int16,Info> n1Iter in n1) {
                Int16 k2 = n1Iter.Key;
                w.Write(k2);
                Info v2 = n1Iter.Value;
                v2.Write(w);
            }
        }
        w.Write(this.mvei.Count);
        foreach (KeyValuePair<List<Gender>,Info> mveiIter in this.mvei) {
            List<Gender> k1 = mveiIter.Key;
            w.Write(k1.Count);
            foreach (Gender n2 in k1) {
                w.Write((Int32)n2);
            }
            Info v1 = mveiIter.Value;
            v1.Write(w);
        }
        w.Write(this.mive.Count);
        foreach (KeyValuePair<Info,List<Gender>> miveIter in this.mive) {
            Info k1 = miveIter.Key;
            k1.Write(w);
            List<Gender> v1 = miveIter.Value;
            w.Write(v1.Count);
            foreach (Gender n2 in v1) {
                w.Write((Int32)n2);
            }
        }
        w.Write(this.mvive.Count);
        foreach (KeyValuePair<List<Info>,List<Gender>> mviveIter in this.mvive) {
            List<Info> k1 = mviveIter.Key;
            w.Write(k1.Count);
            foreach (Info n2 in k1) {
                n2.Write(w);
            }
            List<Gender> v1 = mviveIter.Value;
            w.Write(v1.Count);
            foreach (Gender n2 in v1) {
                w.Write((Int32)n2);
            }
        }
        w.Write(this.vmvive.Count);
        foreach (Dictionary<List<Info>,List<Gender>> n1 in this.vmvive) {
            w.Write(n1.Count);
            foreach (KeyValuePair<List<Info>,List<Gender>> n1Iter in n1) {
                List<Info> k2 = n1Iter.Key;
                w.Write(k2.Count);
                foreach (Info n3 in k2) {
                    n3.Write(w);
                }
                List<Gender> v2 = n1Iter.Value;
                w.Write(v2.Count);
                foreach (Gender n3 in v2) {
                    w.Write((Int32)n3);
                }
            }
        }
        if (this.hotfix != null) {
            w.Write((sbyte)0x01);
            w.Write(this.hotfix.Count);
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                String k1 = hotfixIter.Key;
                byte[] k1Bytes = Encoding.UTF8.GetBytes(k1);
                w.Write(k1Bytes.Length);
                w.Write(k1Bytes);
                String v1 = hotfixIter.Value;
                byte[] v1Bytes = Encoding.UTF8.GetBytes(v1);
                w.Write(v1Bytes.Length);
                w.Write(v1Bytes);
            }
        } else {
            w.Write((sbyte)0x00);
        }
    } //InfoX::Write(...)

    public override String ToString()
    {
        StringBuilder result = new StringBuilder();
        result.Append('{').Append(' ');
        result.Append(GetType().ToString());
        result.Append(',').Append(' ').Append("infos").Append(':');
        result.Append("(" + this.infos.Count + ")");
        result.Append(',').Append(' ').Append("conflict_x").Append(':');
        result.Append("<Test.Xyz.Conflict>");
        result.Append(',').Append(' ').Append("conflict_a").Append(':');
        result.Append("<Test.Abc.Conflict>");
        result.Append(',').Append(' ').Append("mConflict").Append(':');
        result.Append("[" + this.mConflict.Count + "]");
        result.Append(',').Append(' ').Append("info2d").Append(':');
        result.Append("(" + this.info2d.Count + ")");
        result.Append(',').Append(' ').Append("info3d").Append(':');
        result.Append("(" + this.info3d.Count + ")");
        result.Append(',').Append(' ').Append("info5d").Append(':');
        result.Append("(" + this.info5d.Count + ")");
        result.Append(',').Append(' ').Append("infovm").Append(':');
        result.Append("(" + this.infovm.Count + ")");
        result.Append(',').Append(' ').Append("mvei").Append(':');
        result.Append("[" + this.mvei.Count + "]");
        result.Append(',').Append(' ').Append("mive").Append(':');
        result.Append("[" + this.mive.Count + "]");
        result.Append(',').Append(' ').Append("mvive").Append(':');
        result.Append("[" + this.mvive.Count + "]");
        result.Append(',').Append(' ').Append("vmvive").Append(':');
        result.Append("(" + this.vmvive.Count + ")");
        result.Append(',').Append(' ').Append("hotfix").Append(':');
        if (this.hotfix != null) { result.Append("[" + this.hotfix.Count + "]"); }
        else { result.Append("null"); }
        result.Append(' ').Append('}');
        return result.ToString();
    } //InfoX::ToString()

    public StringBuilder ToStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.WriteJSON(code);
        return code;
    }

    public void WriteJSON(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        bool infosExists = (null != this.infos && this.infos.Count > 0);
        if (infosExists) { s.Append('"').Append("infos").Append('"').Append(':'); comma = ","; }
        int infosSize = (null == this.infos ? 0 : this.infos.Count);
        if (infosSize > 0) {
            s.Append('\n').Append('[');
            int infosIdx = 0;
            foreach (List<List<List<List<Info>>>> n1 in this.infos) { /* vec.for: this.infos */
                ++infosIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('[');
                    int n1Idx = 0;
                    foreach (List<List<List<Info>>> n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        int n2Size = (null == n2 ? 0 : n2.Count);
                        if (n2Size > 0) {
                            s.Append('\n').Append('[');
                            int n2Idx = 0;
                            foreach (List<List<Info>> n3 in n2) { /* vec.for: n2 */
                                ++n2Idx;
                                int n3Size = (null == n3 ? 0 : n3.Count);
                                if (n3Size > 0) {
                                    s.Append('\n').Append('[');
                                    int n3Idx = 0;
                                    foreach (List<Info> n4 in n3) { /* vec.for: n3 */
                                        ++n3Idx;
                                        int n4Size = (null == n4 ? 0 : n4.Count);
                                        if (n4Size > 0) {
                                            s.Append('\n').Append('[');
                                            int n4Idx = 0;
                                            foreach (Info n5 in n4) { /* vec.for: n4 */
                                                ++n4Idx;
                                                n5.WriteJSON(s);
                                                if (n4Idx != n4Size) { s.Append(','); }
                                            }
                                            s.Append(']');
                                        }
                                        if (n3Idx != n3Size) { s.Append(','); }
                                    }
                                    s.Append(']');
                                }
                                if (n2Idx != n2Size) { s.Append(','); }
                            }
                            s.Append(']');
                        }
                        if (n1Idx != n1Size) { s.Append(','); }
                    }
                    s.Append(']');
                }
                if (infosIdx != infosSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool conflict_xExists = (null != this.conflict_x);
        if (!String.IsNullOrEmpty(comma) && conflict_xExists) { s.Append(comma); comma = null; }
        if (conflict_xExists) {
            s.Append('"').Append("conflict_x").Append('"').Append(':'); comma = ","; this.conflict_x.WriteJSON(s);
        }
        bool conflict_aExists = (null != this.conflict_a);
        if (!String.IsNullOrEmpty(comma) && conflict_aExists) { s.Append(comma); comma = null; }
        if (conflict_aExists) {
            s.Append('"').Append("conflict_a").Append('"').Append(':'); comma = ","; this.conflict_a.WriteJSON(s);
        }
        bool mConflictExists = (null != this.mConflict && this.mConflict.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mConflictExists) { s.Append(comma); comma = null; }
        if (mConflictExists) { s.Append('"').Append("mConflict").Append('"').Append(':'); comma = ","; }
        int mConflictSize = (null == this.mConflict ? 0 : this.mConflict.Count);
        if (mConflictSize > 0) {
            s.Append('\n').Append('{');
            int mConflictIdx = 0;
            foreach (KeyValuePair<Int32,Test.Abc.Conflict> mConflictIter in this.mConflict) { /* map.for: this.mConflict */
                ++mConflictIdx;
                Int32 k1 = mConflictIter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                Test.Abc.Conflict v1 = mConflictIter.Value; /* nest.v */
                v1.WriteJSON(s);
                if (mConflictIdx != mConflictSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool info2dExists = (null != this.info2d && this.info2d.Count > 0);
        if (!String.IsNullOrEmpty(comma) && info2dExists) { s.Append(comma); comma = null; }
        if (info2dExists) { s.Append('"').Append("info2d").Append('"').Append(':'); comma = ","; }
        int info2dSize = (null == this.info2d ? 0 : this.info2d.Count);
        if (info2dSize > 0) {
            s.Append('\n').Append('[');
            int info2dIdx = 0;
            foreach (List<Info> n1 in this.info2d) { /* vec.for: this.info2d */
                ++info2dIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('[');
                    int n1Idx = 0;
                    foreach (Info n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        n2.WriteJSON(s);
                        if (n1Idx != n1Size) { s.Append(','); }
                    }
                    s.Append(']');
                }
                if (info2dIdx != info2dSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool info3dExists = (null != this.info3d && this.info3d.Count > 0);
        if (!String.IsNullOrEmpty(comma) && info3dExists) { s.Append(comma); comma = null; }
        if (info3dExists) { s.Append('"').Append("info3d").Append('"').Append(':'); comma = ","; }
        int info3dSize = (null == this.info3d ? 0 : this.info3d.Count);
        if (info3dSize > 0) {
            s.Append('\n').Append('[');
            int info3dIdx = 0;
            foreach (List<List<Info>> n1 in this.info3d) { /* vec.for: this.info3d */
                ++info3dIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('[');
                    int n1Idx = 0;
                    foreach (List<Info> n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        int n2Size = (null == n2 ? 0 : n2.Count);
                        if (n2Size > 0) {
                            s.Append('\n').Append('[');
                            int n2Idx = 0;
                            foreach (Info n3 in n2) { /* vec.for: n2 */
                                ++n2Idx;
                                n3.WriteJSON(s);
                                if (n2Idx != n2Size) { s.Append(','); }
                            }
                            s.Append(']');
                        }
                        if (n1Idx != n1Size) { s.Append(','); }
                    }
                    s.Append(']');
                }
                if (info3dIdx != info3dSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool info5dExists = (null != this.info5d && this.info5d.Count > 0);
        if (!String.IsNullOrEmpty(comma) && info5dExists) { s.Append(comma); comma = null; }
        if (info5dExists) { s.Append('"').Append("info5d").Append('"').Append(':'); comma = ","; }
        int info5dSize = (null == this.info5d ? 0 : this.info5d.Count);
        if (info5dSize > 0) {
            s.Append('\n').Append('[');
            int info5dIdx = 0;
            foreach (List<List<List<List<Info>>>> n1 in this.info5d) { /* vec.for: this.info5d */
                ++info5dIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('[');
                    int n1Idx = 0;
                    foreach (List<List<List<Info>>> n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        int n2Size = (null == n2 ? 0 : n2.Count);
                        if (n2Size > 0) {
                            s.Append('\n').Append('[');
                            int n2Idx = 0;
                            foreach (List<List<Info>> n3 in n2) { /* vec.for: n2 */
                                ++n2Idx;
                                int n3Size = (null == n3 ? 0 : n3.Count);
                                if (n3Size > 0) {
                                    s.Append('\n').Append('[');
                                    int n3Idx = 0;
                                    foreach (List<Info> n4 in n3) { /* vec.for: n3 */
                                        ++n3Idx;
                                        int n4Size = (null == n4 ? 0 : n4.Count);
                                        if (n4Size > 0) {
                                            s.Append('\n').Append('[');
                                            int n4Idx = 0;
                                            foreach (Info n5 in n4) { /* vec.for: n4 */
                                                ++n4Idx;
                                                n5.WriteJSON(s);
                                                if (n4Idx != n4Size) { s.Append(','); }
                                            }
                                            s.Append(']');
                                        }
                                        if (n3Idx != n3Size) { s.Append(','); }
                                    }
                                    s.Append(']');
                                }
                                if (n2Idx != n2Size) { s.Append(','); }
                            }
                            s.Append(']');
                        }
                        if (n1Idx != n1Size) { s.Append(','); }
                    }
                    s.Append(']');
                }
                if (info5dIdx != info5dSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool infovmExists = (null != this.infovm && this.infovm.Count > 0);
        if (!String.IsNullOrEmpty(comma) && infovmExists) { s.Append(comma); comma = null; }
        if (infovmExists) { s.Append('"').Append("infovm").Append('"').Append(':'); comma = ","; }
        int infovmSize = (null == this.infovm ? 0 : this.infovm.Count);
        if (infovmSize > 0) {
            s.Append('\n').Append('[');
            int infovmIdx = 0;
            foreach (Dictionary<Int16,Info> n1 in this.infovm) { /* vec.for: this.infovm */
                ++infovmIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('{');
                    int n1Idx = 0;
                    foreach (KeyValuePair<Int16,Info> n1Iter in n1) { /* map.for: n1 */
                        ++n1Idx;
                        Int16 k2 = n1Iter.Key; /* nest.k */
                        s.Append('"'); s.Append(k2.ToString()); s.Append('"').Append(':');
                        Info v2 = n1Iter.Value; /* nest.v */
                        v2.WriteJSON(s);
                        if (n1Idx != n1Size) { s.Append(','); }
                    }
                    s.Append('}');
                }
                if (infovmIdx != infovmSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool mveiExists = (null != this.mvei && this.mvei.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mveiExists) { s.Append(comma); comma = null; }
        if (mveiExists) { s.Append('"').Append("mvei").Append('"').Append(':'); comma = ","; }
        int mveiSize = (null == this.mvei ? 0 : this.mvei.Count);
        if (mveiSize > 0) {
            s.Append('\n').Append('{');
            int mveiIdx = 0;
            foreach (KeyValuePair<List<Gender>,Info> mveiIter in this.mvei) { /* map.for: this.mvei */
                ++mveiIdx;
                List<Gender> k1 = mveiIter.Key;
                int k1Size = (null == k1 ? 0 : k1.Count);
                if (k1Size > 0) {
                    s.Append('\n').Append('[');
                    int k1Idx = 0;
                    foreach (Gender n2 in k1) { /* vec.for: k1 */
                        ++k1Idx;
                        s.Append((int)n2);;
                        if (k1Idx != k1Size) { s.Append(','); }
                    }
                    s.Append(']');
                }
                Info v1 = mveiIter.Value; /* nest.v */
                v1.WriteJSON(s);
                if (mveiIdx != mveiSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool miveExists = (null != this.mive && this.mive.Count > 0);
        if (!String.IsNullOrEmpty(comma) && miveExists) { s.Append(comma); comma = null; }
        if (miveExists) { s.Append('"').Append("mive").Append('"').Append(':'); comma = ","; }
        int miveSize = (null == this.mive ? 0 : this.mive.Count);
        if (miveSize > 0) {
            s.Append('\n').Append('{');
            int miveIdx = 0;
            foreach (KeyValuePair<Info,List<Gender>> miveIter in this.mive) { /* map.for: this.mive */
                ++miveIdx;
                Info k1 = miveIter.Key; /* nest.k */
                s.Append('"'); k1.WriteJSON(s); s.Append('"').Append(':');
                List<Gender> v1 = miveIter.Value;
                int v1Size = (null == v1 ? 0 : v1.Count);
                if (v1Size > 0) {
                    s.Append('\n').Append('[');
                    int v1Idx = 0;
                    foreach (Gender n2 in v1) { /* vec.for: v1 */
                        ++v1Idx;
                        s.Append((int)n2);;
                        if (v1Idx != v1Size) { s.Append(','); }
                    }
                    s.Append(']');
                }
                if (miveIdx != miveSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool mviveExists = (null != this.mvive && this.mvive.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mviveExists) { s.Append(comma); comma = null; }
        if (mviveExists) { s.Append('"').Append("mvive").Append('"').Append(':'); comma = ","; }
        int mviveSize = (null == this.mvive ? 0 : this.mvive.Count);
        if (mviveSize > 0) {
            s.Append('\n').Append('{');
            int mviveIdx = 0;
            foreach (KeyValuePair<List<Info>,List<Gender>> mviveIter in this.mvive) { /* map.for: this.mvive */
                ++mviveIdx;
                List<Info> k1 = mviveIter.Key;
                int k1Size = (null == k1 ? 0 : k1.Count);
                if (k1Size > 0) {
                    s.Append('\n').Append('[');
                    int k1Idx = 0;
                    foreach (Info n2 in k1) { /* vec.for: k1 */
                        ++k1Idx;
                        n2.WriteJSON(s);
                        if (k1Idx != k1Size) { s.Append(','); }
                    }
                    s.Append(']');
                }
                List<Gender> v1 = mviveIter.Value;
                int v1Size = (null == v1 ? 0 : v1.Count);
                if (v1Size > 0) {
                    s.Append('\n').Append('[');
                    int v1Idx = 0;
                    foreach (Gender n2 in v1) { /* vec.for: v1 */
                        ++v1Idx;
                        s.Append((int)n2);;
                        if (v1Idx != v1Size) { s.Append(','); }
                    }
                    s.Append(']');
                }
                if (mviveIdx != mviveSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool vmviveExists = (null != this.vmvive && this.vmvive.Count > 0);
        if (!String.IsNullOrEmpty(comma) && vmviveExists) { s.Append(comma); comma = null; }
        if (vmviveExists) { s.Append('"').Append("vmvive").Append('"').Append(':'); comma = ","; }
        int vmviveSize = (null == this.vmvive ? 0 : this.vmvive.Count);
        if (vmviveSize > 0) {
            s.Append('\n').Append('[');
            int vmviveIdx = 0;
            foreach (Dictionary<List<Info>,List<Gender>> n1 in this.vmvive) { /* vec.for: this.vmvive */
                ++vmviveIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('{');
                    int n1Idx = 0;
                    foreach (KeyValuePair<List<Info>,List<Gender>> n1Iter in n1) { /* map.for: n1 */
                        ++n1Idx;
                        List<Info> k2 = n1Iter.Key;
                        int k2Size = (null == k2 ? 0 : k2.Count);
                        if (k2Size > 0) {
                            s.Append('\n').Append('[');
                            int k2Idx = 0;
                            foreach (Info n3 in k2) { /* vec.for: k2 */
                                ++k2Idx;
                                n3.WriteJSON(s);
                                if (k2Idx != k2Size) { s.Append(','); }
                            }
                            s.Append(']');
                        }
                        List<Gender> v2 = n1Iter.Value;
                        int v2Size = (null == v2 ? 0 : v2.Count);
                        if (v2Size > 0) {
                            s.Append('\n').Append('[');
                            int v2Idx = 0;
                            foreach (Gender n3 in v2) { /* vec.for: v2 */
                                ++v2Idx;
                                s.Append((int)n3);;
                                if (v2Idx != v2Size) { s.Append(','); }
                            }
                            s.Append(']');
                        }
                        if (n1Idx != n1Size) { s.Append(','); }
                    }
                    s.Append('}');
                }
                if (vmviveIdx != vmviveSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"'); s.Append('"').Append(k1.ToString()).Append('"'); s.Append('"').Append(':');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                }
                s.Append('}');
            } comma = ",";
        }
        s.Append('}').Append('\n');
    } //InfoX::WriteJSON(...)

    public StringBuilder ToStringLua()
    {
        StringBuilder code = new StringBuilder();
        code.Append("-- InfoX.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" --").Append('\n');
        code.Append("local table=");
        this.WriteLua(code); code.Append(';');
        return code;
    }

    public void WriteLua(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        bool infosExists = (null != this.infos && this.infos.Count > 0);
        if (infosExists) { s.Append("infos").Append('='); comma = ","; }
        int infosSize = (null == this.infos ? 0 : this.infos.Count);
        if (infosSize > 0) {
            s.Append('\n').Append('{');
            int infosIdx = 0;
            foreach (List<List<List<List<Info>>>> n1 in this.infos) { /* vec.for: this.infos */
                ++infosIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('{');
                    int n1Idx = 0;
                    foreach (List<List<List<Info>>> n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        int n2Size = (null == n2 ? 0 : n2.Count);
                        if (n2Size > 0) {
                            s.Append('\n').Append('{');
                            int n2Idx = 0;
                            foreach (List<List<Info>> n3 in n2) { /* vec.for: n2 */
                                ++n2Idx;
                                int n3Size = (null == n3 ? 0 : n3.Count);
                                if (n3Size > 0) {
                                    s.Append('\n').Append('{');
                                    int n3Idx = 0;
                                    foreach (List<Info> n4 in n3) { /* vec.for: n3 */
                                        ++n3Idx;
                                        int n4Size = (null == n4 ? 0 : n4.Count);
                                        if (n4Size > 0) {
                                            s.Append('\n').Append('{');
                                            int n4Idx = 0;
                                            foreach (Info n5 in n4) { /* vec.for: n4 */
                                                ++n4Idx;
                                                n5.WriteLua(s);
                                                if (n4Idx != n4Size) { s.Append(','); }
                                                s.Append('}');
                                            }
                                        }
                                        if (n3Idx != n3Size) { s.Append(','); }
                                        s.Append('}');
                                    }
                                }
                                if (n2Idx != n2Size) { s.Append(','); }
                                s.Append('}');
                            }
                        }
                        if (n1Idx != n1Size) { s.Append(','); }
                        s.Append('}');
                    }
                }
                if (infosIdx != infosSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool conflict_xExists = (null != this.conflict_x);
        if (!String.IsNullOrEmpty(comma) && conflict_xExists) { s.Append(comma); comma = null; }
        if (conflict_xExists) {
            s.Append("conflict_x").Append('='); comma = ","; this.conflict_x.WriteLua(s);
        }
        bool conflict_aExists = (null != this.conflict_a);
        if (!String.IsNullOrEmpty(comma) && conflict_aExists) { s.Append(comma); comma = null; }
        if (conflict_aExists) {
            s.Append("conflict_a").Append('='); comma = ","; this.conflict_a.WriteLua(s);
        }
        bool mConflictExists = (null != this.mConflict && this.mConflict.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mConflictExists) { s.Append(comma); comma = null; }
        if (mConflictExists) { s.Append("mConflict").Append('='); comma = ","; }
        int mConflictSize = (null == this.mConflict ? 0 : this.mConflict.Count);
        if (mConflictSize > 0) {
            s.Append('\n').Append('{');
            int mConflictIdx = 0;
            foreach (KeyValuePair<Int32,Test.Abc.Conflict> mConflictIter in this.mConflict) { /* map.for: this.mConflict */
                ++mConflictIdx;
                Int32 k1 = mConflictIter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                Test.Abc.Conflict v1 = mConflictIter.Value; /* nest.v */
                v1.WriteLua(s);
                if (mConflictIdx != mConflictSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool info2dExists = (null != this.info2d && this.info2d.Count > 0);
        if (!String.IsNullOrEmpty(comma) && info2dExists) { s.Append(comma); comma = null; }
        if (info2dExists) { s.Append("info2d").Append('='); comma = ","; }
        int info2dSize = (null == this.info2d ? 0 : this.info2d.Count);
        if (info2dSize > 0) {
            s.Append('\n').Append('{');
            int info2dIdx = 0;
            foreach (List<Info> n1 in this.info2d) { /* vec.for: this.info2d */
                ++info2dIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('{');
                    int n1Idx = 0;
                    foreach (Info n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        n2.WriteLua(s);
                        if (n1Idx != n1Size) { s.Append(','); }
                        s.Append('}');
                    }
                }
                if (info2dIdx != info2dSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool info3dExists = (null != this.info3d && this.info3d.Count > 0);
        if (!String.IsNullOrEmpty(comma) && info3dExists) { s.Append(comma); comma = null; }
        if (info3dExists) { s.Append("info3d").Append('='); comma = ","; }
        int info3dSize = (null == this.info3d ? 0 : this.info3d.Count);
        if (info3dSize > 0) {
            s.Append('\n').Append('{');
            int info3dIdx = 0;
            foreach (List<List<Info>> n1 in this.info3d) { /* vec.for: this.info3d */
                ++info3dIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('{');
                    int n1Idx = 0;
                    foreach (List<Info> n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        int n2Size = (null == n2 ? 0 : n2.Count);
                        if (n2Size > 0) {
                            s.Append('\n').Append('{');
                            int n2Idx = 0;
                            foreach (Info n3 in n2) { /* vec.for: n2 */
                                ++n2Idx;
                                n3.WriteLua(s);
                                if (n2Idx != n2Size) { s.Append(','); }
                                s.Append('}');
                            }
                        }
                        if (n1Idx != n1Size) { s.Append(','); }
                        s.Append('}');
                    }
                }
                if (info3dIdx != info3dSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool info5dExists = (null != this.info5d && this.info5d.Count > 0);
        if (!String.IsNullOrEmpty(comma) && info5dExists) { s.Append(comma); comma = null; }
        if (info5dExists) { s.Append("info5d").Append('='); comma = ","; }
        int info5dSize = (null == this.info5d ? 0 : this.info5d.Count);
        if (info5dSize > 0) {
            s.Append('\n').Append('{');
            int info5dIdx = 0;
            foreach (List<List<List<List<Info>>>> n1 in this.info5d) { /* vec.for: this.info5d */
                ++info5dIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('{');
                    int n1Idx = 0;
                    foreach (List<List<List<Info>>> n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        int n2Size = (null == n2 ? 0 : n2.Count);
                        if (n2Size > 0) {
                            s.Append('\n').Append('{');
                            int n2Idx = 0;
                            foreach (List<List<Info>> n3 in n2) { /* vec.for: n2 */
                                ++n2Idx;
                                int n3Size = (null == n3 ? 0 : n3.Count);
                                if (n3Size > 0) {
                                    s.Append('\n').Append('{');
                                    int n3Idx = 0;
                                    foreach (List<Info> n4 in n3) { /* vec.for: n3 */
                                        ++n3Idx;
                                        int n4Size = (null == n4 ? 0 : n4.Count);
                                        if (n4Size > 0) {
                                            s.Append('\n').Append('{');
                                            int n4Idx = 0;
                                            foreach (Info n5 in n4) { /* vec.for: n4 */
                                                ++n4Idx;
                                                n5.WriteLua(s);
                                                if (n4Idx != n4Size) { s.Append(','); }
                                                s.Append('}');
                                            }
                                        }
                                        if (n3Idx != n3Size) { s.Append(','); }
                                        s.Append('}');
                                    }
                                }
                                if (n2Idx != n2Size) { s.Append(','); }
                                s.Append('}');
                            }
                        }
                        if (n1Idx != n1Size) { s.Append(','); }
                        s.Append('}');
                    }
                }
                if (info5dIdx != info5dSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool infovmExists = (null != this.infovm && this.infovm.Count > 0);
        if (!String.IsNullOrEmpty(comma) && infovmExists) { s.Append(comma); comma = null; }
        if (infovmExists) { s.Append("infovm").Append('='); comma = ","; }
        int infovmSize = (null == this.infovm ? 0 : this.infovm.Count);
        if (infovmSize > 0) {
            s.Append('\n').Append('{');
            int infovmIdx = 0;
            foreach (Dictionary<Int16,Info> n1 in this.infovm) { /* vec.for: this.infovm */
                ++infovmIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('{');
                    int n1Idx = 0;
                    foreach (KeyValuePair<Int16,Info> n1Iter in n1) { /* map.for: n1 */
                        ++n1Idx;
                        Int16 k2 = n1Iter.Key; /* nest.k */
                        s.Append('['); s.Append(k2.ToString()); s.Append(']').Append('=');
                        Info v2 = n1Iter.Value; /* nest.v */
                        v2.WriteLua(s);
                        if (n1Idx != n1Size) { s.Append(','); }
                        s.Append('}');
                    }
                }
                if (infovmIdx != infovmSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool mveiExists = (null != this.mvei && this.mvei.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mveiExists) { s.Append(comma); comma = null; }
        if (mveiExists) { s.Append("mvei").Append('='); comma = ","; }
        int mveiSize = (null == this.mvei ? 0 : this.mvei.Count);
        if (mveiSize > 0) {
            s.Append('\n').Append('{');
            int mveiIdx = 0;
            foreach (KeyValuePair<List<Gender>,Info> mveiIter in this.mvei) { /* map.for: this.mvei */
                ++mveiIdx;
                List<Gender> k1 = mveiIter.Key;
                int k1Size = (null == k1 ? 0 : k1.Count);
                if (k1Size > 0) {
                    s.Append('\n').Append('{');
                    int k1Idx = 0;
                    foreach (Gender n2 in k1) { /* vec.for: k1 */
                        ++k1Idx;
                        s.Append((int)n2);;
                        if (k1Idx != k1Size) { s.Append(','); }
                        s.Append('}');
                    }
                }
                Info v1 = mveiIter.Value; /* nest.v */
                v1.WriteLua(s);
                if (mveiIdx != mveiSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool miveExists = (null != this.mive && this.mive.Count > 0);
        if (!String.IsNullOrEmpty(comma) && miveExists) { s.Append(comma); comma = null; }
        if (miveExists) { s.Append("mive").Append('='); comma = ","; }
        int miveSize = (null == this.mive ? 0 : this.mive.Count);
        if (miveSize > 0) {
            s.Append('\n').Append('{');
            int miveIdx = 0;
            foreach (KeyValuePair<Info,List<Gender>> miveIter in this.mive) { /* map.for: this.mive */
                ++miveIdx;
                Info k1 = miveIter.Key; /* nest.k */
                k1.WriteLua(s); s.Append('=');
                List<Gender> v1 = miveIter.Value;
                int v1Size = (null == v1 ? 0 : v1.Count);
                if (v1Size > 0) {
                    s.Append('\n').Append('{');
                    int v1Idx = 0;
                    foreach (Gender n2 in v1) { /* vec.for: v1 */
                        ++v1Idx;
                        s.Append((int)n2);;
                        if (v1Idx != v1Size) { s.Append(','); }
                        s.Append('}');
                    }
                }
                if (miveIdx != miveSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool mviveExists = (null != this.mvive && this.mvive.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mviveExists) { s.Append(comma); comma = null; }
        if (mviveExists) { s.Append("mvive").Append('='); comma = ","; }
        int mviveSize = (null == this.mvive ? 0 : this.mvive.Count);
        if (mviveSize > 0) {
            s.Append('\n').Append('{');
            int mviveIdx = 0;
            foreach (KeyValuePair<List<Info>,List<Gender>> mviveIter in this.mvive) { /* map.for: this.mvive */
                ++mviveIdx;
                List<Info> k1 = mviveIter.Key;
                int k1Size = (null == k1 ? 0 : k1.Count);
                if (k1Size > 0) {
                    s.Append('\n').Append('{');
                    int k1Idx = 0;
                    foreach (Info n2 in k1) { /* vec.for: k1 */
                        ++k1Idx;
                        n2.WriteLua(s);
                        if (k1Idx != k1Size) { s.Append(','); }
                        s.Append('}');
                    }
                }
                List<Gender> v1 = mviveIter.Value;
                int v1Size = (null == v1 ? 0 : v1.Count);
                if (v1Size > 0) {
                    s.Append('\n').Append('{');
                    int v1Idx = 0;
                    foreach (Gender n2 in v1) { /* vec.for: v1 */
                        ++v1Idx;
                        s.Append((int)n2);;
                        if (v1Idx != v1Size) { s.Append(','); }
                        s.Append('}');
                    }
                }
                if (mviveIdx != mviveSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool vmviveExists = (null != this.vmvive && this.vmvive.Count > 0);
        if (!String.IsNullOrEmpty(comma) && vmviveExists) { s.Append(comma); comma = null; }
        if (vmviveExists) { s.Append("vmvive").Append('='); comma = ","; }
        int vmviveSize = (null == this.vmvive ? 0 : this.vmvive.Count);
        if (vmviveSize > 0) {
            s.Append('\n').Append('{');
            int vmviveIdx = 0;
            foreach (Dictionary<List<Info>,List<Gender>> n1 in this.vmvive) { /* vec.for: this.vmvive */
                ++vmviveIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append('\n').Append('{');
                    int n1Idx = 0;
                    foreach (KeyValuePair<List<Info>,List<Gender>> n1Iter in n1) { /* map.for: n1 */
                        ++n1Idx;
                        List<Info> k2 = n1Iter.Key;
                        int k2Size = (null == k2 ? 0 : k2.Count);
                        if (k2Size > 0) {
                            s.Append('\n').Append('{');
                            int k2Idx = 0;
                            foreach (Info n3 in k2) { /* vec.for: k2 */
                                ++k2Idx;
                                n3.WriteLua(s);
                                if (k2Idx != k2Size) { s.Append(','); }
                                s.Append('}');
                            }
                        }
                        List<Gender> v2 = n1Iter.Value;
                        int v2Size = (null == v2 ? 0 : v2.Count);
                        if (v2Size > 0) {
                            s.Append('\n').Append('{');
                            int v2Idx = 0;
                            foreach (Gender n3 in v2) { /* vec.for: v2 */
                                ++v2Idx;
                                s.Append((int)n3);;
                                if (v2Idx != v2Size) { s.Append(','); }
                                s.Append('}');
                            }
                        }
                        if (n1Idx != n1Size) { s.Append(','); }
                        s.Append('}');
                    }
                }
                if (vmviveIdx != vmviveSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"').Append(k1.ToString()).Append('"'); s.Append('=');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        s.Append('}').Append('\n');
    }

    public StringBuilder ToStringPHP()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?php ").Append("/* InfoX.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" */").Append('\n');
        code.Append('\n').Append("return ");
        this.WritePHP(code); code.Append(';').Append('\n');
        return code;
    }

    public void WritePHP(StringBuilder s)
    {
        s.Append("array").Append('(').Append('\n');
        string comma = null;
        bool infosExists = (null != this.infos && this.infos.Count > 0);
        if (infosExists) { s.Append('\'').Append("infos").Append('\'').Append("=>"); comma = ","; }
        int infosSize = (null == this.infos ? 0 : this.infos.Count);
        if (infosSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int infosIdx = 0;
            foreach (List<List<List<List<Info>>>> n1 in this.infos) { /* vec.for: this.infos */
                ++infosIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append("array").Append('(').Append('\n');
                    int n1Idx = 0;
                    foreach (List<List<List<Info>>> n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        int n2Size = (null == n2 ? 0 : n2.Count);
                        if (n2Size > 0) {
                            s.Append("array").Append('(').Append('\n');
                            int n2Idx = 0;
                            foreach (List<List<Info>> n3 in n2) { /* vec.for: n2 */
                                ++n2Idx;
                                int n3Size = (null == n3 ? 0 : n3.Count);
                                if (n3Size > 0) {
                                    s.Append("array").Append('(').Append('\n');
                                    int n3Idx = 0;
                                    foreach (List<Info> n4 in n3) { /* vec.for: n3 */
                                        ++n3Idx;
                                        int n4Size = (null == n4 ? 0 : n4.Count);
                                        if (n4Size > 0) {
                                            s.Append("array").Append('(').Append('\n');
                                            int n4Idx = 0;
                                            foreach (Info n5 in n4) { /* vec.for: n4 */
                                                ++n4Idx;
                                                n5.WritePHP(s);
                                                if (n4Idx != n4Size) { s.Append(',').Append('\n'); }
                                            }
                                            s.Append("/* vec size: ").Append(n4.Count).Append(" */").Append(')');
                                        }
                                        if (n3Idx != n3Size) { s.Append(',').Append('\n'); }
                                    }
                                    s.Append("/* vec size: ").Append(n3.Count).Append(" */").Append(')');
                                }
                                if (n2Idx != n2Size) { s.Append(',').Append('\n'); }
                            }
                            s.Append("/* vec size: ").Append(n2.Count).Append(" */").Append(')');
                        }
                        if (n1Idx != n1Size) { s.Append(',').Append('\n'); }
                    }
                    s.Append("/* vec size: ").Append(n1.Count).Append(" */").Append(')');
                }
                if (infosIdx != infosSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.infos.Count).Append(" */").Append(')');
        }
        bool conflict_xExists = (null != this.conflict_x);
        if (!String.IsNullOrEmpty(comma) && conflict_xExists) { s.Append(comma).Append('\n'); comma = null; }
        if (conflict_xExists) {
            s.Append('\'').Append("conflict_x").Append('\'').Append("=>"); comma = ","; this.conflict_x.WritePHP(s);
        }
        bool conflict_aExists = (null != this.conflict_a);
        if (!String.IsNullOrEmpty(comma) && conflict_aExists) { s.Append(comma).Append('\n'); comma = null; }
        if (conflict_aExists) {
            s.Append('\'').Append("conflict_a").Append('\'').Append("=>"); comma = ","; this.conflict_a.WritePHP(s);
        }
        bool mConflictExists = (null != this.mConflict && this.mConflict.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mConflictExists) { s.Append(comma).Append('\n'); comma = null; }
        if (mConflictExists) { s.Append('\'').Append("mConflict").Append('\'').Append("=>"); comma = ","; }
        int mConflictSize = (null == this.mConflict ? 0 : this.mConflict.Count);
        if (mConflictSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int mConflictIdx = 0;
            foreach (KeyValuePair<Int32,Test.Abc.Conflict> mConflictIter in this.mConflict) { /* map.for: this.mConflict */
                ++mConflictIdx;
                Int32 k1 = mConflictIter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                Test.Abc.Conflict v1 = mConflictIter.Value; /* nest.v */
                v1.WritePHP(s);
                if (mConflictIdx != mConflictSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.mConflict.Count).Append(" */").Append(')');
        }
        bool info2dExists = (null != this.info2d && this.info2d.Count > 0);
        if (!String.IsNullOrEmpty(comma) && info2dExists) { s.Append(comma).Append('\n'); comma = null; }
        if (info2dExists) { s.Append('\'').Append("info2d").Append('\'').Append("=>"); comma = ","; }
        int info2dSize = (null == this.info2d ? 0 : this.info2d.Count);
        if (info2dSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int info2dIdx = 0;
            foreach (List<Info> n1 in this.info2d) { /* vec.for: this.info2d */
                ++info2dIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append("array").Append('(').Append('\n');
                    int n1Idx = 0;
                    foreach (Info n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        n2.WritePHP(s);
                        if (n1Idx != n1Size) { s.Append(',').Append('\n'); }
                    }
                    s.Append("/* vec size: ").Append(n1.Count).Append(" */").Append(')');
                }
                if (info2dIdx != info2dSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.info2d.Count).Append(" */").Append(')');
        }
        bool info3dExists = (null != this.info3d && this.info3d.Count > 0);
        if (!String.IsNullOrEmpty(comma) && info3dExists) { s.Append(comma).Append('\n'); comma = null; }
        if (info3dExists) { s.Append('\'').Append("info3d").Append('\'').Append("=>"); comma = ","; }
        int info3dSize = (null == this.info3d ? 0 : this.info3d.Count);
        if (info3dSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int info3dIdx = 0;
            foreach (List<List<Info>> n1 in this.info3d) { /* vec.for: this.info3d */
                ++info3dIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append("array").Append('(').Append('\n');
                    int n1Idx = 0;
                    foreach (List<Info> n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        int n2Size = (null == n2 ? 0 : n2.Count);
                        if (n2Size > 0) {
                            s.Append("array").Append('(').Append('\n');
                            int n2Idx = 0;
                            foreach (Info n3 in n2) { /* vec.for: n2 */
                                ++n2Idx;
                                n3.WritePHP(s);
                                if (n2Idx != n2Size) { s.Append(',').Append('\n'); }
                            }
                            s.Append("/* vec size: ").Append(n2.Count).Append(" */").Append(')');
                        }
                        if (n1Idx != n1Size) { s.Append(',').Append('\n'); }
                    }
                    s.Append("/* vec size: ").Append(n1.Count).Append(" */").Append(')');
                }
                if (info3dIdx != info3dSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.info3d.Count).Append(" */").Append(')');
        }
        bool info5dExists = (null != this.info5d && this.info5d.Count > 0);
        if (!String.IsNullOrEmpty(comma) && info5dExists) { s.Append(comma).Append('\n'); comma = null; }
        if (info5dExists) { s.Append('\'').Append("info5d").Append('\'').Append("=>"); comma = ","; }
        int info5dSize = (null == this.info5d ? 0 : this.info5d.Count);
        if (info5dSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int info5dIdx = 0;
            foreach (List<List<List<List<Info>>>> n1 in this.info5d) { /* vec.for: this.info5d */
                ++info5dIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append("array").Append('(').Append('\n');
                    int n1Idx = 0;
                    foreach (List<List<List<Info>>> n2 in n1) { /* vec.for: n1 */
                        ++n1Idx;
                        int n2Size = (null == n2 ? 0 : n2.Count);
                        if (n2Size > 0) {
                            s.Append("array").Append('(').Append('\n');
                            int n2Idx = 0;
                            foreach (List<List<Info>> n3 in n2) { /* vec.for: n2 */
                                ++n2Idx;
                                int n3Size = (null == n3 ? 0 : n3.Count);
                                if (n3Size > 0) {
                                    s.Append("array").Append('(').Append('\n');
                                    int n3Idx = 0;
                                    foreach (List<Info> n4 in n3) { /* vec.for: n3 */
                                        ++n3Idx;
                                        int n4Size = (null == n4 ? 0 : n4.Count);
                                        if (n4Size > 0) {
                                            s.Append("array").Append('(').Append('\n');
                                            int n4Idx = 0;
                                            foreach (Info n5 in n4) { /* vec.for: n4 */
                                                ++n4Idx;
                                                n5.WritePHP(s);
                                                if (n4Idx != n4Size) { s.Append(',').Append('\n'); }
                                            }
                                            s.Append("/* vec size: ").Append(n4.Count).Append(" */").Append(')');
                                        }
                                        if (n3Idx != n3Size) { s.Append(',').Append('\n'); }
                                    }
                                    s.Append("/* vec size: ").Append(n3.Count).Append(" */").Append(')');
                                }
                                if (n2Idx != n2Size) { s.Append(',').Append('\n'); }
                            }
                            s.Append("/* vec size: ").Append(n2.Count).Append(" */").Append(')');
                        }
                        if (n1Idx != n1Size) { s.Append(',').Append('\n'); }
                    }
                    s.Append("/* vec size: ").Append(n1.Count).Append(" */").Append(')');
                }
                if (info5dIdx != info5dSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.info5d.Count).Append(" */").Append(')');
        }
        bool infovmExists = (null != this.infovm && this.infovm.Count > 0);
        if (!String.IsNullOrEmpty(comma) && infovmExists) { s.Append(comma).Append('\n'); comma = null; }
        if (infovmExists) { s.Append('\'').Append("infovm").Append('\'').Append("=>"); comma = ","; }
        int infovmSize = (null == this.infovm ? 0 : this.infovm.Count);
        if (infovmSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int infovmIdx = 0;
            foreach (Dictionary<Int16,Info> n1 in this.infovm) { /* vec.for: this.infovm */
                ++infovmIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append("array").Append('(').Append('\n');
                    int n1Idx = 0;
                    foreach (KeyValuePair<Int16,Info> n1Iter in n1) { /* map.for: n1 */
                        ++n1Idx;
                        Int16 k2 = n1Iter.Key; /* nest.k */
                        s.Append(k2.ToString()); s.Append("=>");
                        Info v2 = n1Iter.Value; /* nest.v */
                        v2.WritePHP(s);
                        if (n1Idx != n1Size) { s.Append(','); s.Append('\n'); }
                    }
                    s.Append("/* map size: ").Append(n1.Count).Append(" */").Append(')');
                }
                if (infovmIdx != infovmSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.infovm.Count).Append(" */").Append(')');
        }
        bool mveiExists = (null != this.mvei && this.mvei.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mveiExists) { s.Append(comma).Append('\n'); comma = null; }
        if (mveiExists) { s.Append('\'').Append("mvei").Append('\'').Append("=>"); comma = ","; }
        int mveiSize = (null == this.mvei ? 0 : this.mvei.Count);
        if (mveiSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int mveiIdx = 0;
            foreach (KeyValuePair<List<Gender>,Info> mveiIter in this.mvei) { /* map.for: this.mvei */
                ++mveiIdx;
                List<Gender> k1 = mveiIter.Key; /* map.head.k */
                int k1Size = (null == k1 ? 0 : k1.Count);
                if (k1Size > 0) {
                    s.Append("array").Append('(').Append('\n');
                    int k1Idx = 0;
                    foreach (Gender n2 in k1) { /* vec.for: k1 */
                        ++k1Idx;
                        s.Append((int)n2);
                        s.Append("/*Gender::").Append(n2.ToString()).Append("*/");
                        if (k1Idx != k1Size) { s.Append(',').Append('\n'); }
                    }
                    s.Append("/* vec size: ").Append(k1.Count).Append(" */").Append(')');
                }
                Info v1 = mveiIter.Value; /* nest.v */
                v1.WritePHP(s);
                if (mveiIdx != mveiSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.mvei.Count).Append(" */").Append(')');
        }
        bool miveExists = (null != this.mive && this.mive.Count > 0);
        if (!String.IsNullOrEmpty(comma) && miveExists) { s.Append(comma).Append('\n'); comma = null; }
        if (miveExists) { s.Append('\'').Append("mive").Append('\'').Append("=>"); comma = ","; }
        int miveSize = (null == this.mive ? 0 : this.mive.Count);
        if (miveSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int miveIdx = 0;
            foreach (KeyValuePair<Info,List<Gender>> miveIter in this.mive) { /* map.for: this.mive */
                ++miveIdx;
                Info k1 = miveIter.Key; /* nest.k */
                k1.WritePHP(s); s.Append("=>");
                List<Gender> v1 = miveIter.Value; /* map.head.k */
                int v1Size = (null == v1 ? 0 : v1.Count);
                if (v1Size > 0) {
                    s.Append("array").Append('(').Append('\n');
                    int v1Idx = 0;
                    foreach (Gender n2 in v1) { /* vec.for: v1 */
                        ++v1Idx;
                        s.Append((int)n2);
                        s.Append("/*Gender::").Append(n2.ToString()).Append("*/");
                        if (v1Idx != v1Size) { s.Append(',').Append('\n'); }
                    }
                    s.Append("/* vec size: ").Append(v1.Count).Append(" */").Append(')');
                }
                if (miveIdx != miveSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.mive.Count).Append(" */").Append(')');
        }
        bool mviveExists = (null != this.mvive && this.mvive.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mviveExists) { s.Append(comma).Append('\n'); comma = null; }
        if (mviveExists) { s.Append('\'').Append("mvive").Append('\'').Append("=>"); comma = ","; }
        int mviveSize = (null == this.mvive ? 0 : this.mvive.Count);
        if (mviveSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int mviveIdx = 0;
            foreach (KeyValuePair<List<Info>,List<Gender>> mviveIter in this.mvive) { /* map.for: this.mvive */
                ++mviveIdx;
                List<Info> k1 = mviveIter.Key; /* map.head.k */
                int k1Size = (null == k1 ? 0 : k1.Count);
                if (k1Size > 0) {
                    s.Append("array").Append('(').Append('\n');
                    int k1Idx = 0;
                    foreach (Info n2 in k1) { /* vec.for: k1 */
                        ++k1Idx;
                        n2.WritePHP(s);
                        if (k1Idx != k1Size) { s.Append(',').Append('\n'); }
                    }
                    s.Append("/* vec size: ").Append(k1.Count).Append(" */").Append(')');
                }
                List<Gender> v1 = mviveIter.Value; /* map.head.k */
                int v1Size = (null == v1 ? 0 : v1.Count);
                if (v1Size > 0) {
                    s.Append("array").Append('(').Append('\n');
                    int v1Idx = 0;
                    foreach (Gender n2 in v1) { /* vec.for: v1 */
                        ++v1Idx;
                        s.Append((int)n2);
                        s.Append("/*Gender::").Append(n2.ToString()).Append("*/");
                        if (v1Idx != v1Size) { s.Append(',').Append('\n'); }
                    }
                    s.Append("/* vec size: ").Append(v1.Count).Append(" */").Append(')');
                }
                if (mviveIdx != mviveSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.mvive.Count).Append(" */").Append(')');
        }
        bool vmviveExists = (null != this.vmvive && this.vmvive.Count > 0);
        if (!String.IsNullOrEmpty(comma) && vmviveExists) { s.Append(comma).Append('\n'); comma = null; }
        if (vmviveExists) { s.Append('\'').Append("vmvive").Append('\'').Append("=>"); comma = ","; }
        int vmviveSize = (null == this.vmvive ? 0 : this.vmvive.Count);
        if (vmviveSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int vmviveIdx = 0;
            foreach (Dictionary<List<Info>,List<Gender>> n1 in this.vmvive) { /* vec.for: this.vmvive */
                ++vmviveIdx;
                int n1Size = (null == n1 ? 0 : n1.Count);
                if (n1Size > 0) {
                    s.Append("array").Append('(').Append('\n');
                    int n1Idx = 0;
                    foreach (KeyValuePair<List<Info>,List<Gender>> n1Iter in n1) { /* map.for: n1 */
                        ++n1Idx;
                        List<Info> k2 = n1Iter.Key; /* map.head.k */
                        int k2Size = (null == k2 ? 0 : k2.Count);
                        if (k2Size > 0) {
                            s.Append("array").Append('(').Append('\n');
                            int k2Idx = 0;
                            foreach (Info n3 in k2) { /* vec.for: k2 */
                                ++k2Idx;
                                n3.WritePHP(s);
                                if (k2Idx != k2Size) { s.Append(',').Append('\n'); }
                            }
                            s.Append("/* vec size: ").Append(k2.Count).Append(" */").Append(')');
                        }
                        List<Gender> v2 = n1Iter.Value; /* map.head.k */
                        int v2Size = (null == v2 ? 0 : v2.Count);
                        if (v2Size > 0) {
                            s.Append("array").Append('(').Append('\n');
                            int v2Idx = 0;
                            foreach (Gender n3 in v2) { /* vec.for: v2 */
                                ++v2Idx;
                                s.Append((int)n3);
                                s.Append("/*Gender::").Append(n3.ToString()).Append("*/");
                                if (v2Idx != v2Size) { s.Append(',').Append('\n'); }
                            }
                            s.Append("/* vec size: ").Append(v2.Count).Append(" */").Append(')');
                        }
                        if (n1Idx != n1Size) { s.Append(','); s.Append('\n'); }
                    }
                    s.Append("/* map size: ").Append(n1.Count).Append(" */").Append(')');
                }
                if (vmviveIdx != vmviveSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.vmvive.Count).Append(" */").Append(')');
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma).Append('\n'); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append("array").Append('(').Append('\n');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('\'').Append(k1.ToString()).Append('\''); s.Append("=>");
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('\'').Append(v1.ToString()).Append('\'');
                    if (hotfixIdx != hotfixSize) { s.Append(','); s.Append('\n'); }
                }
                s.Append("/* map size: ").Append(this.hotfix.Count).Append(" */").Append(')');
            } comma = ",";
        }
        s.Append("/* ").Append(GetType().ToString()).Append(" */");
        s.Append(')');
    }

    public StringBuilder ToStringXML()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        code.Append('\n').Append("<!-- ").Append("InfoX").Append(".CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" -->");
        this.WriteXML(code, "InfoX");
        return code;
    }

    public void WriteXML(StringBuilder s, String name)
    {
        StringBuilder attrs = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        if (this.infos.Count > 0) {
            nodes.Append('\n').Append('<').Append("infos").Append('>');
            foreach (List<List<List<List<Info>>>> n1 in this.infos) {
                nodes.Append('\n').Append('<').Append("n1").Append('>');
                foreach (List<List<List<Info>>> n2 in n1) {
                    nodes.Append('\n').Append('<').Append("n2").Append('>');
                    foreach (List<List<Info>> n3 in n2) {
                        nodes.Append('\n').Append('<').Append("n3").Append('>');
                        foreach (List<Info> n4 in n3) {
                            nodes.Append('\n').Append('<').Append("n4").Append('>');
                            foreach (Info n5 in n4) {
                                n5.WriteXML(nodes, "n5");
                            }
                            nodes.Append('<').Append('/').Append("n4").Append('>');
                        }
                        nodes.Append('<').Append('/').Append("n3").Append('>');
                    }
                    nodes.Append('<').Append('/').Append("n2").Append('>');
                }
                nodes.Append('<').Append('/').Append("n1").Append('>');
            }
            nodes.Append('<').Append('/').Append("infos").Append('>');
        }
        this.conflict_x.WriteXML(nodes, "conflict_x");
        this.conflict_a.WriteXML(nodes, "conflict_a");
        if (this.mConflict.Count > 0) {
            nodes.Append('\n').Append('<').Append("mConflict").Append('>');
            foreach (KeyValuePair<Int32,Test.Abc.Conflict> mConflictIter in this.mConflict) {
                nodes.Append('\n');
                Int32 k1 = mConflictIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Test.Abc.Conflict v1 = mConflictIter.Value;
                v1.WriteXML(nodes, "v1");
            }
            nodes.Append('<').Append('/').Append("mConflict").Append('>');
        }
        if (this.info2d.Count > 0) {
            nodes.Append('\n').Append('<').Append("info2d").Append('>');
            foreach (List<Info> n1 in this.info2d) {
                nodes.Append('\n').Append('<').Append("n1").Append('>');
                foreach (Info n2 in n1) {
                    n2.WriteXML(nodes, "n2");
                }
                nodes.Append('<').Append('/').Append("n1").Append('>');
            }
            nodes.Append('<').Append('/').Append("info2d").Append('>');
        }
        if (this.info3d.Count > 0) {
            nodes.Append('\n').Append('<').Append("info3d").Append('>');
            foreach (List<List<Info>> n1 in this.info3d) {
                nodes.Append('\n').Append('<').Append("n1").Append('>');
                foreach (List<Info> n2 in n1) {
                    nodes.Append('\n').Append('<').Append("n2").Append('>');
                    foreach (Info n3 in n2) {
                        n3.WriteXML(nodes, "n3");
                    }
                    nodes.Append('<').Append('/').Append("n2").Append('>');
                }
                nodes.Append('<').Append('/').Append("n1").Append('>');
            }
            nodes.Append('<').Append('/').Append("info3d").Append('>');
        }
        if (this.info5d.Count > 0) {
            nodes.Append('\n').Append('<').Append("info5d").Append('>');
            foreach (List<List<List<List<Info>>>> n1 in this.info5d) {
                nodes.Append('\n').Append('<').Append("n1").Append('>');
                foreach (List<List<List<Info>>> n2 in n1) {
                    nodes.Append('\n').Append('<').Append("n2").Append('>');
                    foreach (List<List<Info>> n3 in n2) {
                        nodes.Append('\n').Append('<').Append("n3").Append('>');
                        foreach (List<Info> n4 in n3) {
                            nodes.Append('\n').Append('<').Append("n4").Append('>');
                            foreach (Info n5 in n4) {
                                n5.WriteXML(nodes, "n5");
                            }
                            nodes.Append('<').Append('/').Append("n4").Append('>');
                        }
                        nodes.Append('<').Append('/').Append("n3").Append('>');
                    }
                    nodes.Append('<').Append('/').Append("n2").Append('>');
                }
                nodes.Append('<').Append('/').Append("n1").Append('>');
            }
            nodes.Append('<').Append('/').Append("info5d").Append('>');
        }
        if (this.infovm.Count > 0) {
            nodes.Append('\n').Append('<').Append("infovm").Append('>');
            foreach (Dictionary<Int16,Info> n1 in this.infovm) {
                nodes.Append('\n').Append('<').Append("n1").Append('>');
                foreach (KeyValuePair<Int16,Info> n1Iter in n1) {
                    nodes.Append('\n');
                    Int16 k2 = n1Iter.Key;
                    nodes.Append('<').Append("k2").Append(' ').Append("value").Append('=').Append('"');
                    nodes.Append(k2.ToString());
                    nodes.Append('"').Append('/').Append('>');
                    Info v2 = n1Iter.Value;
                    v2.WriteXML(nodes, "v2");
                }
                nodes.Append('<').Append('/').Append("n1").Append('>');
            }
            nodes.Append('<').Append('/').Append("infovm").Append('>');
        }
        if (this.mvei.Count > 0) {
            nodes.Append('\n').Append('<').Append("mvei").Append('>');
            foreach (KeyValuePair<List<Gender>,Info> mveiIter in this.mvei) {
                nodes.Append('\n');
                List<Gender> k1 = mveiIter.Key;
                nodes.Append('\n').Append('<').Append("k1").Append('>');
                foreach (Gender n2 in k1) {
                    nodes.Append('<').Append("n2").Append(' ').Append("value").Append('=').Append('"');
                    nodes.Append(n2.ToString());
                    nodes.Append('"').Append('/').Append('>');
                }
                nodes.Append('<').Append('/').Append("k1").Append('>');
                Info v1 = mveiIter.Value;
                v1.WriteXML(nodes, "v1");
            }
            nodes.Append('<').Append('/').Append("mvei").Append('>');
        }
        if (this.mive.Count > 0) {
            nodes.Append('\n').Append('<').Append("mive").Append('>');
            foreach (KeyValuePair<Info,List<Gender>> miveIter in this.mive) {
                nodes.Append('\n');
                Info k1 = miveIter.Key;
                k1.WriteXML(nodes, "k1");
                List<Gender> v1 = miveIter.Value;
                nodes.Append('\n').Append('<').Append("v1").Append('>');
                foreach (Gender n2 in v1) {
                    nodes.Append('<').Append("n2").Append(' ').Append("value").Append('=').Append('"');
                    nodes.Append(n2.ToString());
                    nodes.Append('"').Append('/').Append('>');
                }
                nodes.Append('<').Append('/').Append("v1").Append('>');
            }
            nodes.Append('<').Append('/').Append("mive").Append('>');
        }
        if (this.mvive.Count > 0) {
            nodes.Append('\n').Append('<').Append("mvive").Append('>');
            foreach (KeyValuePair<List<Info>,List<Gender>> mviveIter in this.mvive) {
                nodes.Append('\n');
                List<Info> k1 = mviveIter.Key;
                nodes.Append('\n').Append('<').Append("k1").Append('>');
                foreach (Info n2 in k1) {
                    n2.WriteXML(nodes, "n2");
                }
                nodes.Append('<').Append('/').Append("k1").Append('>');
                List<Gender> v1 = mviveIter.Value;
                nodes.Append('\n').Append('<').Append("v1").Append('>');
                foreach (Gender n2 in v1) {
                    nodes.Append('<').Append("n2").Append(' ').Append("value").Append('=').Append('"');
                    nodes.Append(n2.ToString());
                    nodes.Append('"').Append('/').Append('>');
                }
                nodes.Append('<').Append('/').Append("v1").Append('>');
            }
            nodes.Append('<').Append('/').Append("mvive").Append('>');
        }
        if (this.vmvive.Count > 0) {
            nodes.Append('\n').Append('<').Append("vmvive").Append('>');
            foreach (Dictionary<List<Info>,List<Gender>> n1 in this.vmvive) {
                nodes.Append('\n').Append('<').Append("n1").Append('>');
                foreach (KeyValuePair<List<Info>,List<Gender>> n1Iter in n1) {
                    nodes.Append('\n');
                    List<Info> k2 = n1Iter.Key;
                    nodes.Append('\n').Append('<').Append("k2").Append('>');
                    foreach (Info n3 in k2) {
                        n3.WriteXML(nodes, "n3");
                    }
                    nodes.Append('<').Append('/').Append("k2").Append('>');
                    List<Gender> v2 = n1Iter.Value;
                    nodes.Append('\n').Append('<').Append("v2").Append('>');
                    foreach (Gender n3 in v2) {
                        nodes.Append('<').Append("n3").Append(' ').Append("value").Append('=').Append('"');
                        nodes.Append(n3.ToString());
                        nodes.Append('"').Append('/').Append('>');
                    }
                    nodes.Append('<').Append('/').Append("v2").Append('>');
                }
                nodes.Append('<').Append('/').Append("n1").Append('>');
            }
            nodes.Append('<').Append('/').Append("vmvive").Append('>');
        }
        if (this.hotfix != null && this.hotfix.Count > 0) {
            nodes.Append('\n').Append('<').Append("hotfix").Append('>');
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                nodes.Append('\n');
                String k1 = hotfixIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1);
                nodes.Append('"').Append('/').Append('>');
                String v1 = hotfixIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("hotfix").Append('>');
        }
        s.Append('\n').Append('<').Append(name).Append(attrs);
        if (nodes.Length == 0) {
            s.Append('/').Append('>');
        } else {
            s.Append('>').Append(nodes);
            s.Append('<').Append('/').Append(name).Append('>');
        }
    } //InfoX::WriteXML(...)

} /* class: InfoX */
/*
3@test.xyz.InfoX/vec-vec-vec-vec-vec-test.abc.Info/test.xyz.Conflict/test.abc.Conflict/map-int32-tes
  t.abc.Conflict/vec-vec-test.abc.Info/vec-vec-vec-test.abc.Info/vec-vec-vec-vec-vec-test.abc.Info/v
  ec-map-int16-test.abc.Info/map-vec-int32-test.abc.Info/map-test.abc.Info-vec-int32/map-vec-test.ab
  c.Info-vec-int32/vec-map-vec-test.abc.Info-vec-int32/map-string-string
+@test.abc.Conflict/int32/string/vec-int8/map-string-string
+@test.abc.Info/int32/int8/int16/int32/int64/uint8/uint16/uint32/uint64/float/double/bool/string/vec
  -string/int32/test.abc.Info/test.abc.Conflict/vec-test.xyz.Conflict/vec-double/map-test.abc.Info-i
  nt32/map-int32-test.abc.Info/map-int32-double/map-string-string
+@test.xyz.Conflict/double/map-string-string
*/
} //namespace: Test.Xyz