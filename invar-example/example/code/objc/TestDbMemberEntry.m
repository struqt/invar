//*==---------------------------*  Obj-C  *--------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------==*//
///*
#if ! __has_feature(objc_arc)
#error This file must be compiled with ARC. Either turn on ARC for the project or use -fobjc-arc flag
#endif //*/

#import "TestDbMemberEntry.h"

#define CRC32__ 0x240151
#define SIZE__  29L

@interface MemberEntry ()
{
    uint32_t              _id        ; /* 0 &-uint32 */
    NSString            * _phone     ; /* 1 &-string */
    NSString            * _nickName  ; /* 2 &-string */
    int64_t               _createTime; /* 3 &-int64 */
    int64_t               _updateTime; /* 4 &-int64 */
    NSMutableDictionary * _hotfix    ; /* 5 *-map<string,string> */
}
@end

@implementation MemberEntry

- (instancetype) init
{
    self = [super init];
    if (!self) { return self; }
    _id         = 0;
    _phone      = @"";
    _nickName   = @"";
    _createTime = -1L;
    _updateTime = -1L;
    _hotfix     = nil;
    return self;
}
/* MemberEntry::init */

- (void) dealloc
{
    if (_phone     ) { _phone      = nil; }
    if (_nickName  ) { _nickName   = nil; }
    if (_hotfix    ) { _hotfix     = nil; }
}
/* MemberEntry::dealloc */

- (id) copyWithZone:(nullable NSZone *)zone;
{
    id copy = [[[self class] allocWithZone:zone] init];
    DataWriter *writer = [DataWriter CreateWithData:[[NSMutableData alloc] initWithCapacity:[self byteSize]]];
    [self write:writer];
    [copy read:[DataReader CreateWithData:writer.data]];
    return copy;
}
/* MemberEntry::copyWithZone */

- (uint32_t             ) id         { return _id        ; }
- (NSString            *) phone      { return _phone     ; }
- (NSString            *) nickName   { return _nickName  ; }
- (int64_t              ) createTime { return _createTime; }
- (int64_t              ) updateTime { return _updateTime; }
- (NSMutableDictionary *) hotfix     { return _hotfix    ; }

- (MemberEntry *) setId         : (uint32_t             )v { _id         = v; return self; }
- (MemberEntry *) setPhone      : (NSString            *)v { _phone      = v; return self; }
- (MemberEntry *) setNickName   : (NSString            *)v { _nickName   = v; return self; }
- (MemberEntry *) setCreateTime : (int64_t              )v { _createTime = v; return self; }
- (MemberEntry *) setUpdateTime : (int64_t              )v { _updateTime = v; return self; }
- (MemberEntry *) setHotfix     : (NSMutableDictionary *)v { _hotfix     = v; return self; }

- (NSInteger)read:(const DataReader * const)r
{
    BOOL eof = false;
    _id = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _phone = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _nickName = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _createTime = [r readInt64:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _updateTime = [r readInt64:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    int8_t hotfixExists = [r readInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    if (0x01 == hotfixExists) {
        if (_hotfix == nil) { _hotfix = [[NSMutableDictionary alloc] init]; }
        uint32_t lenHotfix = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
        for (uint32_t iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
            NSString *k1 = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
            NSString *v1 = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
            [_hotfix setObject:v1 forKey:k1];
        }
    }
    else if (0x00 == hotfixExists) { _hotfix = nil; }
    else { return INVAR_ERR_DECODE_VEC_MAP_P; } if (eof) { return INVAR_ERR_DECODE_EOF; }
    return INVAR_ERR_NONE;
}
/* MemberEntry::read(...) */

- (NSInteger)write:(DataWriter *)w
{
    [w writeUInt32:_id];
    [w writeString:_phone];
    [w writeString:_nickName];
    [w writeInt64:_createTime];
    [w writeInt64:_updateTime];
    if (_hotfix != nil) {
        [w writeInt8:0x01];
        [w writeUInt32:(uint32_t)[_hotfix count]];
        for (id k1 in _hotfix) {
            [w writeString:k1];
            NSString *v1 = [_hotfix objectForKey:k1];
            [w writeString:v1];
        }
    } else {
        [w writeInt8:0x00];
    }
    return 0;
}
/* MemberEntry::write */

- (NSUInteger)byteSize
{
    NSUInteger size = SIZE__;
    size += [_phone length];
    size += [_nickName length];
    if (_hotfix != nil) {
        size += sizeof(uint32_t);
        for (id k1 in _hotfix) {
            size += [k1 length];
            NSString *v1 = [_hotfix objectForKey:k1];
            size += [v1 length];
        }
    }
    return size;
}
/* MemberEntry::byteSize */

- (NSString *)toStringJSON;
{
    NSMutableString *s = [[NSMutableString alloc] init] ;
    [self writeJSON:s];
    return s;
}

- (void)writeJSON:(NSMutableString *)s
{
    [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
    NSString *comma = nil;
    [s appendString:QUOTATION_S]; [s appendString:@"id"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_id)];
    BOOL phoneExists = (_phone && [_phone length] > 0);
    if (comma && phoneExists) { [s appendString:comma]; comma = nil; }
    if (phoneExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"phone"]; [s appendString:QUOTATION_S];
        [s appendString:COLON_S]; [s appendString:QUOTATION_S]; [s appendString:_phone]; [s appendString:QUOTATION_S]; comma = COMMA_S;
    }
    BOOL nickNameExists = (_nickName && [_nickName length] > 0);
    if (comma && nickNameExists) { [s appendString:comma]; comma = nil; }
    if (nickNameExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"nickName"]; [s appendString:QUOTATION_S];
        [s appendString:COLON_S]; [s appendString:QUOTATION_S]; [s appendString:_nickName]; [s appendString:QUOTATION_S]; comma = COMMA_S;
    }
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"createTime"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_createTime)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"updateTime"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_updateTime)];
    BOOL hotfixExists = (nil != _hotfix && [_hotfix count] > 0);
    if (comma && hotfixExists) { [s appendString:comma]; comma = nil; }
    if (hotfixExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"hotfix"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger hotfixSize = (nil == _hotfix ? 0 : [_hotfix count]);
        if (hotfixSize > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
            int hotfixIdx = 0;
            for (id k1 in _hotfix) { /* map.for: _hotfix */
                ++hotfixIdx;
                [s appendString:QUOTATION_S]; [s appendString:k1]; [s appendString:QUOTATION_S]; [s appendString:COLON_S]; /* nest.k.string */
                id v1 = [_hotfix objectForKey:k1];
                [s appendString:QUOTATION_S]; [s appendString:v1]; [s appendString:QUOTATION_S]; /* nest.v */
                if (hotfixIdx != hotfixSize) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_CURLY_S];
        } comma = COMMA_S;
    }
    [s appendString:RIGHT_CURLY_S]; [s appendString:LINE_FEED_S];
}
/* MemberEntry::writeJSON */

@end /* @implementation MemberEntry */
/*
0@test.db.MemberEntry/uint32/string/string/int64/int64/map-string-string
*/

