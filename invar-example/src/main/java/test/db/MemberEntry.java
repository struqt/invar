/*===----------------------------*  Java  *--------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/
package test.db;

import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/** 名字冲突的类型 */
public final class MemberEntry
implements
invar.InvarCodec.BinaryDecode,
invar.InvarCodec.BinaryEncode,
invar.InvarCodec.XMLEncode
{
    static public final long CRC32 = 0x240151;

    static public MemberEntry Create() {
        return new MemberEntry();
    }

    private java.lang.Long               id        ;/* 主键，自增长 */
    private java.lang.String             phone     ;/* 手机号码 */
    private java.lang.String             nickName  ;/* 会员昵称 */
    private Long                         createTime;/* 创建时间 */
    private Long                         updateTime;/* 创建时间 */
    private LinkedHashMap<String,String> hotfix    ;/* [AutoAdd] Hotfix */

    public MemberEntry()
    {
        id         = 0L;
        phone      = "";
        nickName   = "";
        createTime = -1L;
        updateTime = -1L;
        hotfix     = null;
    }

    public MemberEntry reuse()
    {
        id = 0L;
        phone = "";
        nickName = "";
        createTime = -1L;
        updateTime = -1L;
        if (hotfix != null) {
            hotfix.clear();
        }
        return this;
    }

    /** 主键，自增长 */
    @invar.InvarRule(T="uint32", S="f0")
    public java.lang.Long getId() { return id; }

    /** 手机号码 */
    @invar.InvarRule(T="string", S="f1")
    public java.lang.String getPhone() { return phone; }

    /** 会员昵称 */
    @invar.InvarRule(T="string", S="f2")
    public java.lang.String getNickName() { return nickName; }

    /** 创建时间 */
    @invar.InvarRule(T="int64", S="f3")
    public Long getCreateTime() { return createTime; }

    /** 创建时间 */
    @invar.InvarRule(T="int64", S="f4")
    public Long getUpdateTime() { return updateTime; }

    /** [AutoAdd] Hotfix */
    @invar.InvarRule(T="map<string,string>", S="f5")
    public LinkedHashMap<String,String> getHotfix() { return hotfix; }

    /** 主键，自增长 */
    @invar.InvarRule(T="uint32", S="f0")
    public MemberEntry setId(java.lang.Long value) { this.id = value; return this; }

    /** 手机号码 */
    @invar.InvarRule(T="string", S="f1")
    public MemberEntry setPhone(java.lang.String value) { this.phone = value; return this; }

    /** 会员昵称 */
    @invar.InvarRule(T="string", S="f2")
    public MemberEntry setNickName(java.lang.String value) { this.nickName = value; return this; }

    /** 创建时间 */
    @invar.InvarRule(T="int64", S="f3")
    public MemberEntry setCreateTime(Long value) { this.createTime = value; return this; }

    /** 创建时间 */
    @invar.InvarRule(T="int64", S="f4")
    public MemberEntry setUpdateTime(Long value) { this.updateTime = value; return this; }

    /** [AutoAdd] Hotfix */
    @invar.InvarRule(T="map<string,string>", S="f5")
    public MemberEntry setHotfix(LinkedHashMap<String,String> value) { this.hotfix = value; return this; }

    public MemberEntry copy (MemberEntry from)
    {
        if (this == from || from == null) {
            return this;
        }
        id = from.id;
        phone = from.phone;
        nickName = from.nickName;
        createTime = from.createTime;
        updateTime = from.updateTime;
        if (from.hotfix != null) {
            hotfix.clear();
            hotfix.putAll(from.hotfix);
        } else {
            hotfix = null;
        }
        return this;
    } //copyFrom(...)

    public void read(InputStream from) throws IOException
    {
        this.read((DataInput)new DataInputStream(from));
    }

    public void read(DataInput from) throws IOException
    {
        id = from.readInt() & 0xFFFFFFFFL;
        phone = from.readUTF();
        nickName = from.readUTF();
        createTime = from.readLong();
        updateTime = from.readLong();
        hotfix.clear();
        if (from.readByte() == (byte)0x01) {
            Long lenHotfix = from.readInt() & 0xFFFFFFFFL;
            for (Long iHotfix = 0L; iHotfix < lenHotfix; ++iHotfix) {
                java.lang.String k1 = from.readUTF();
                java.lang.String v1 = from.readUTF();
                hotfix.put(k1,v1);
            }
        }
    }

    public void write(OutputStream from) throws IOException
    {
        this.write((DataOutput)new DataOutputStream(from));
    }

    public void write(DataOutput dest) throws IOException
    {
        dest.writeInt(id.intValue());
        dest.writeUTF(phone);
        dest.writeUTF(nickName);
        dest.writeLong(createTime);
        dest.writeLong(updateTime);
        if (hotfix != null) {
            dest.writeByte((byte)0x01);
            dest.writeInt(hotfix.size());
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                dest.writeUTF(k1);
                java.lang.String v1 = hotfixIter.getValue();
                dest.writeUTF(v1);
            }
        } else {
            dest.writeByte((byte)0x00);
        }
    }

    public StringBuilder toStringXML (String name)
    {
        StringBuilder result = new StringBuilder();
        StringBuilder attrs  = new StringBuilder();
        StringBuilder nodes  = new StringBuilder();
        attrs.append(" id=\"");
        attrs.append(id.toString()); attrs.append("\"");
        attrs.append(" phone=\"");
        attrs.append(phone); attrs.append("\"");
        attrs.append(" nickName=\"");
        attrs.append(nickName); attrs.append("\"");
        attrs.append(" createTime=\"");
        attrs.append(createTime.toString()); attrs.append("\"");
        attrs.append(" updateTime=\"");
        attrs.append(updateTime.toString()); attrs.append("\"");
        if (hotfix != null && hotfix.size() > 0) {
            nodes.append("<hotfix>");
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                nodes.append("<k1 value=\"");
                nodes.append(k1);
                nodes.append("\">");
                java.lang.String v1 = hotfixIter.getValue();
                nodes.append("<v1 value=\"");
                nodes.append(v1);
                nodes.append("\">");
            }
            nodes.append("</hotfix>");
        }
        result.append("<"); result.append(name); result.append(attrs);
        if (nodes.length() == 0) {
            result.append("/>");
        } else {
            result.append(">");
            result.append(nodes);
            result.append("</"); result.append(name); result.append(">");
        }
        return result;
    } //MemberEntry::toStringXML (String name)

    public String toString ()
    {
        StringBuilder result = new StringBuilder();
        result.append("{ ");
        result.append(getClass().getName());
        result.append(", id:");
        result.append(id.toString());
        result.append(", phone:");
        result.append("\"" + phone + "\"");
        result.append(", nickName:");
        result.append("\"" + nickName + "\"");
        result.append(", createTime:");
        result.append(createTime.toString());
        result.append(", updateTime:");
        result.append(updateTime.toString());
        result.append(", hotfix:");
        if (hotfix != null) {
            result.append("[" + hotfix.size() + "]");
        } else {
            result.append("null");
        }
        result.append(" }");
        return result.toString();
    } //MemberEntry::toString ()

    public Object[] SqlParamsAll()
    {
        return new Object[] {
            phone,
            nickName,
        };
    }

    static public final class SQL {

        static public final String TABLE = "tbl_member";

        static private List<String> variableFields = null;

        static List<String> getVariableFields() {
            if (variableFields != null) {
                return variableFields;
            }
            List<String> list = new ArrayList<String>();
            variableFields.add("phone");
            variableFields.add("nick_name");
            return variableFields = list;
        }

        static private Map<String, String> aliasMap = null;

        static Map<String, String> getAliasMap() {
            if (aliasMap != null) {
                return aliasMap;
            }
            Map<String, String> map = new LinkedHashMap<String, String>();
            aliasMap.put("id", "id");
            aliasMap.put("phone", "phone");
            aliasMap.put("nickName", "nick_name");
            aliasMap.put("createTime", "create_time");
            aliasMap.put("updateTime", "update_time");
            return aliasMap = map;
        }

        public static StringBuilder buildInsert() {
            StringBuilder s = new StringBuilder(512);
            StringBuilder v = new StringBuilder(256);
            s.append("INSERT INTO ");
            s.append('`');
            s.append(TABLE);
            s.append('`');
            s.append('(');
            Iterator<String> iter = getVariableFields().iterator();
            while (iter.hasNext()) {
                String field = iter.next();
                s.append('`');
                s.append(field);
                s.append('`');
                v.append('?');
                if (iter.hasNext()) {
                    s.append(',');
                    v.append(',');
                }
            }
            s.append(" VALUES ");
            s.append('(');
            s.append(v);
            s.append(')');
            return s;
        }

        public static StringBuilder buildSelect(String where, String... fields) {
            Set<String> includes = new HashSet<String>(fields.length);
            for (String f : fields) {
                includes.add(f);
            }
            StringBuilder s = new StringBuilder(512);
            s.append("SELECT ");
            Iterator<Map.Entry<String, String>> iter = getAliasMap().entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry<String, String> i = iter.next();
                final String k = i.getKey();
                final String v = i.getValue();
                if (includes.size() > 0 && !includes.contains(k) && !includes.contains(v)) {
                    continue;
                }
                s.append('`');
                s.append(k);
                s.append('`');
                if (!k.equals(v)) {
                    s.append(" AS ");
                    s.append(v);
                }
                if (iter.hasNext()) {
                    s.append(", ");
                }
            }
            s.append(" FROM ");
            s.append('`');
            s.append(TABLE);
            s.append('`');
            s.append(" WHERE ");
            s.append(where);
            return s;
        }

        public static StringBuilder buildUpdate(String where, String... fields) {
            Set<String> includes = new HashSet<String>(fields.length);
            for (String f : fields) {
                includes.add(f);
            }
            StringBuilder s = new StringBuilder(512);
            s.append("UPDATE ");
            s.append('`');
            s.append(TABLE);
            s.append('`');
            s.append(" SET ");
            Iterator<String> iter = getVariableFields().iterator();
            while (iter.hasNext()) {
                String field = iter.next();
                if (includes.size() > 0 && !includes.contains(field)) {
                    continue;
                }
                s.append('`');
                s.append(field);
                s.append('=');
                s.append('?');
                s.append('`');
                if (iter.hasNext()) {
                    s.append(',');
                }
            }
            s.append(" WHERE ");
            s.append(where);
            return s;
        }

    }

}

