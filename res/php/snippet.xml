<?xml version="1.1" encoding="UTF-8"?>
<tns:root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="invar.template ../snippet.xsd"
  xmlns:tns="invar.template" language="php">

  <!-- Redefine 14 Invar buildin types to adapt Java language -->
  <!-- & &amp; < &lt; > &gt; " &quot; ' &apos; -->
  <export resPath="res/php/invar.codec.php" destDir="" destName="invar.codec.php" />
  <redefine>
    <int8 pack="php" type="int08" initValue="-1" />
    <int16 pack="php" type="int16" initValue="-1" />
    <int32 pack="php" type="int32" initValue="-1" />
    <int64 pack="php" type="int64" initValue="-1" />
    <uint8 pack="php" type="uint08" initValue="0" />
    <uint16 pack="php" type="uint16" initValue="0" />
    <uint32 pack="php" type="uint32" initValue="0" />
    <uint64 pack="php" type="uint32" initValue="0" />
    <float pack="php" type="float32" initValue="0.0" />
    <double pack="php" type="float64" initValue="0.00" />
    <string pack="php" type="string" initValue="" />
    <bool pack="php" type="boolean" initValue="FALSE" />
    <vec pack="php" type="list" generic="&lt;?&gt;" initValue="" />
    <map pack="php" type="dict" generic="&lt;?,?&gt;" initValue="" />
    <dialect pack="invar" type="BinaryWriter" include="invar.codec.php" />
    <dialect pack="invar" type="BinaryReader" include="invar.codec.php" />
  </redefine>
  <template key="trace.all.types">     <![CDATA[false]]></template>
  <template key="include.self">        <![CDATA[false]]></template>
  <template key="pack.name.nested">    <![CDATA[false]]></template>
  <template key="file.name.lowercase"> <![CDATA[false]]></template>
  <template key="capitalize.pack.head"><![CDATA[false]]></template>
  <template key="method.indent.num">   <![CDATA[1]]></template>
  <template key="one.pack.one.file">   <![CDATA[false]]></template>
  <template key="code.dir.flatten">    <![CDATA[false]]></template>
  <template key="code.dir.prefix">     <![CDATA[]]></template>
  <template key="refer.spec">    <![CDATA[&]]></template>
  <template key="refer.invoke">  <![CDATA[.]]></template>
  <template key="refer.copy">    <![CDATA[(#name) = (#arg);]]></template>
  <template key="refer.const">   <![CDATA[const]]></template>
  <template key="pointer.spec">  <![CDATA[ ]]></template>
  <template key="pointer.invoke"><![CDATA[->]]></template>
  <template key="pointer.null">  <![CDATA[NULL]]></template>
  <template key="pointer.copy">  <![CDATA[(#name) = (#arg);]]></template>
  <template key="byte.yes">      <![CDATA[0x01]]></template>
  <template key="byte.non">      <![CDATA[0x00]]></template>

  <template key="init.any">    <![CDATA[ (#deft)    ]]></template>
  <template key="init.string"> <![CDATA[ '(#deft)'  ]]></template>
  <template key="init.struct"> <![CDATA[ new (#type)]]></template>
  <template key="init.enum">   <![CDATA[ (#type)::(#name)]]></template>
  <template key="init.vec">    <![CDATA[ array() ]]></template>
  <template key="init.map">    <![CDATA[ array() ]]></template>

  <template key="import"><![CDATA[use \(#body);(#brk)]]></template>
  <template key="import.body"><![CDATA[(#pack)(#name)]]></template>
  <template key="import.split"><![CDATA[\]]></template>
  <template key="import.exclude.conflict"><![CDATA[true]]></template>
  <template key="import.exclude.same.pack"><![CDATA[true]]></template>
  <template key="import.exclude.packs"><![CDATA[php]]></template>
  <template key="doc">     <![CDATA[ /** (#doc) */    ]]></template>
  <template key="doc.line"><![CDATA[ (#space)//(#doc) ]]></template>

  <template key="file"><![CDATA[
    <?php
	//===----------------------------*  PHP 5  *-------------------------------===//
    //
    //             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
    //
    //===----------------------------------------------------------------------===//
    (#blank)
    (#pack) ]]></template>
  <template key="file.include">      <![CDATA[ require_once dirname(__FILE__) . (#name);(#brk) ]]></template>
  <template key="file.include.wrap"> <![CDATA[ '/(#nameupper)(#value)' ]]></template>
  <template key="file.include.split"><![CDATA[/]]></template>
  <template key="file.pack.split"><![CDATA[\]]></template>
  <template key="file.pack"><![CDATA[
	namespace (#name);
    (#blank)
    (#includes)
    (#body) ]]></template>
  <template key="file.body"><![CDATA[
    (#import)
    (#enums)(#structs) ]]></template>

  <template key="enum.field"><![CDATA[
    (#tab)const (#name) = (#value);(#doc)
  ]]></template>
  <template key="enum"><![CDATA[ (#concat)final class (#name)
    {
    (#body)}
  ]]></template>
  <template key="struct"><![CDATA[
    [#addImport(struct; imports; invar::BinaryReader)]
    [#addImport(struct; imports; invar::BinaryWriter)]
    (#concat)
    (#blank)
    final class (#name)
    {
    [#codeFields (struct; fields)]
    [#codeNested (ctor.;  useFullName; struct; fields; imports)](#brk)
    [#codeNested (reuse.; useFullName; struct; fields; imports)](#brk)
    [#codeNested (write.; useFullName; struct; fields; imports)](#brk)
    [#codeNested (read.;  useFullName; struct; fields; imports)](#brk)
    [#codeNested (copy.;  useFullName; struct; fields; imports)](#brk)
    [#codeNested (toxml.; useFullName; struct; fields; imports)](#brk)
    [#codeNested (tostr.; useFullName; struct; fields; imports)](#brk)
    [#codeGetters(struct; fields)]
    [#codeSetters(struct; fields)]
    }
	]]></template>
  <template key="struct.meta"><![CDATA[@invar.InvarRule(T="(#type)", S="f(#index)")]]></template>
  <template key="struct.field.prefix"><![CDATA[this->]]></template>
  <template key="struct.field"><![CDATA[
    (#tab)private \$[#clampLen(lenFieldName; 16; (#name) )];
    (#concat)[#codeLineDoc(fields; (#index))]
  ]]></template>
  <template key="struct.setter"><![CDATA[
    (#tab)[#codeDoc(fields; (#index))]
    (#tab)public function set[#upperHeadChar( (#namer) )](\$value) { \$(#name) = \$value; return \$this; }
  ]]></template>
  <template key="struct.getter"><![CDATA[
    (#tab)[#codeDoc(fields; (#index))]
    (#tab)public function (#spec) get[#upperHeadChar( (#namer) )]() { return \$(#name); }
  ]]></template>

  <!-- Method Construct -->
  <template key="ctor.method"><![CDATA[ (#tab)function __construct()
    (#tab){(#body)
    (#tab)} //construct() ]]></template>
  <template key="ctor.any | ctor.vec | ctor.map"><![CDATA[ \$[#clampLen(lenFieldName; 24; (#name))] = (#deft) ]]></template>
  <template key="ctor.ptr.any">                  <![CDATA[ \$[#clampLen(lenFieldName; 24; (#name))] = (#null); ]]></template>
  <template key="ctor.ref.any">                  <![CDATA[ (#body); ]]></template>

  <!-- Method Reuse -->
  <template key="reuse.method"><![CDATA[ (#tab)public function reuse()
    (#tab){(#body)
    (#tab)} //reuse() ]]></template>
  <template key="reuse.any | reuse.vec | reuse.map"><![CDATA[ \$[#clampLen(lenFieldName; 24; (#name))] = (#deft) ]]></template>
  <template key="reuse.ptr.any">                    <![CDATA[ \$[#clampLen(lenFieldName; 24; (#name))] = (#null); ]]></template>
  <template key="reuse.ref.any">                    <![CDATA[ (#body); ]]></template>

  <!-- CopyFrom Method -->
  <template key="copy.method.arg"><![CDATA[\$from]]></template>
  <template key="copy.method"><![CDATA[ (#tab)public function copy (\$from)
    (#tab){
      (#tab)(#tab)if (\$this == \$from || \$from == (#null)) {
      (#tab)(#tab)(#tab)return this;
      (#tab)(#tab)}(#body)
      (#tab)(#tab)return \$this;
    (#tab)} //copy(...)]]></template>
  <template key="copy.any"><![CDATA[ (#arg)->(#namer) ]]></template>
  <template key="copy.vec | copy.map"><![CDATA[ array_merge(\$(#name), (#arg)->(#namer)) ]]></template>
  <template key="copy.ref.any"><![CDATA[ \$(#name) = (#body); ]]></template>
  <template key="copy.ref.vec|copy.ref.map"><![CDATA[ \$(#name) = array();
    (#body); ]]></template>
  <template key="copy.ptr.any"><![CDATA[ \$(#name) = (#body);  ]]></template>
  <template key="copy.ptr.struct"><![CDATA[
    if ((#arg)->(#namer) != (#null)) {
    (#tab)\$(#name).copy((#body));
    } else {
    (#tab)\$(#name) = (#null);
    }
  ]]></template>
  <template key="copy.ptr.vec|copy.ptr.map"><![CDATA[
    if ((#arg)->(#namer) != (#null)) {
    (#tab)\$(#name) = array();
    (#tab)(#body);
    } else {
    (#tab)\$(#name) = (#null);
    }
  ]]></template>

  <!-- Read bytes from a Stream -->
  <template key="read.method.arg"><![CDATA[\$bytes_]]></template>
  <template key="read.method"><![CDATA[
    (#tab)public function read (&\$bytes_)
    (#tab){(#body)
    (#tab)}]]></template>
  <template key="read.int8">  <![CDATA[ (#arg)->readInt08()  ]]></template>
  <template key="read.int16"> <![CDATA[ (#arg)->readInt16()  ]]></template>
  <template key="read.int32"> <![CDATA[ (#arg)->readInt32()  ]]></template>
  <template key="read.int64"> <![CDATA[ (#arg)->readInt64()  ]]></template>
  <template key="read.uint8"> <![CDATA[ (#arg)->readUInt08() ]]></template>
  <template key="read.uint16"><![CDATA[ (#arg)->readUInt16() ]]></template>
  <template key="read.uint32"><![CDATA[ (#arg)->readUInt32() ]]></template>
  <template key="read.uint64"><![CDATA[ (#arg)->readUInt64() ]]></template>
  <template key="read.float"> <![CDATA[ (#arg)->readFloat32()]]></template>
  <template key="read.double"><![CDATA[ (#arg)->readFloat64()]]></template>
  <template key="read.string"><![CDATA[ (#arg)->readUTF()    ]]></template>
  <template key="read.bool">  <![CDATA[ (#arg)->readBoolean()]]></template>
  <template key="read.enum">  <![CDATA[ (#arg)->readInt32()  ]]></template>
  <template key="read.struct"><![CDATA[ \$(#name)->read(\$bytes_) ]]></template>
  <template key="read.nest.n|read.nest.k|read.nest.v"><![CDATA[ \$(#name) = (#body); ]]></template>
  <template key="read.nest.n.struct|read.nest.k.struct|read.nest.v.struct"><![CDATA[
    \$(#name) = new (#type)();(#brk)(#body); ]]></template>
  <template key="read.vec.head">  <![CDATA[\$(#name) = array(); //read.vec.head(#brk)]]></template>
  <template key="read.vec.for"><![CDATA[
    \$(#len) = (#arg)->readUInt32();
    for (\$(#index) = 0; \$(#index) < \$(#len); ++\$(#index)) {(#body)
    (#tab)\$(#name)[] = \$(#value);
    }
  ]]></template>
  <template key="read.map.head"> <![CDATA[\$(#name) = array(); //read.map.head(#brk)]]></template>
  <template key="read.map.for"><![CDATA[
    \$(#len) = (#arg)->readUInt32();
    for (\$(#index) = 0; \$(#index) < \$(#len); ++\$(#index)) {(#body)
    (#tab)\$(#name)[\$(#key)] = \$(#value);
    }
  ]]></template>
  <template key="read.ref.any"><![CDATA[ \$(#name) = (#body); ]]></template>
  <template key="read.ref.struct"><![CDATA[ (#body); ]]></template>
  <template key="read.ref.vec"><![CDATA[ \$(#name) = array();(#brk)(#body) ]]></template>
  <template key="read.ref.map"><![CDATA[ \$(#name) = array();(#brk)(#body) ]]></template>
  <template key="read.ptr.string"><![CDATA[
    if ((#arg)->readInt08() == (#byteyes)) {
    (#tab)\$(#name) = (#body);
    }
  ]]></template>
  <template key="read.ptr.struct"><![CDATA[
    if ((#arg)->readInt08() == (#byteyes)) {
    (#tab)if (\$(#name) == (#null)) {
    (#tab)(#tab)\$(#name) = new (#type)();
    (#tab)}
    (#tab)(#body);
    }
  ]]></template>
  <template key="read.ptr.vec|read.ptr.map"><![CDATA[
    \$(#name) = NULL;
    if ((#arg)->readInt08() == (#byteyes)) {
    (#tab)\$(#name) = array();(#bodyindent)
    }
  ]]></template>


  <!-- Write bytes to a Stream -->
  <template key="write.method.arg"><![CDATA[\$bytes_]]></template>
  <template key="write.method"><![CDATA[ (#tab)public function write (&\$bytes_)
    (#tab){(#body)
    (#tab)(#tab)return \$bytes_;
    (#tab)} //(#type)::write() ]]></template>
  <template key="write.int8">  <![CDATA[ BinaryWriter::writeInt08(\$(#name), (#arg))  ]]></template>
  <template key="write.int16"> <![CDATA[ BinaryWriter::writeInt16(\$(#name), (#arg))  ]]></template>
  <template key="write.int32"> <![CDATA[ BinaryWriter::writeInt32(\$(#name), (#arg))  ]]></template>
  <template key="write.int64"> <![CDATA[ BinaryWriter::writeInt64(\$(#name), (#arg))  ]]></template>
  <template key="write.uint8"> <![CDATA[ BinaryWriter::writeUInt08(\$(#name), (#arg)) ]]></template>
  <template key="write.uint16"><![CDATA[ BinaryWriter::writeUInt16(\$(#name), (#arg)) ]]></template>
  <template key="write.uint32"><![CDATA[ BinaryWriter::writeUInt32(\$(#name), (#arg)) ]]></template>
  <template key="write.uint64"><![CDATA[ BinaryWriter::writeUInt64(\$(#name), (#arg)) ]]></template>
  <template key="write.float"> <![CDATA[ BinaryWriter::writeFloat32(\$(#name), (#arg))]]></template>
  <template key="write.double"><![CDATA[ BinaryWriter::writeFloat64(\$(#name), (#arg))]]></template>
  <template key="write.bool">  <![CDATA[ BinaryWriter::writeBoolean(\$(#name), (#arg))]]></template>
  <template key="write.string"><![CDATA[ BinaryWriter::writeUTF(\$(#name), (#arg))    ]]></template>
  <template key="write.enum">  <![CDATA[ BinaryWriter::writeInt32(\$(#name), (#arg))  ]]></template>
  <template key="write.struct"><![CDATA[ \$(#name)->write((#arg)) ]]></template>
  <template key="write.nest.n"><![CDATA[ (#body); ]]></template>
  <template key="write.nest.k"><![CDATA[ (#body); ]]></template>
  <template key="write.nest.v"><![CDATA[ (#body); ]]></template>
  <template key="write.vec.head"><![CDATA[]]></template>
  <template key="write.vec.for"><![CDATA[ BinaryWriter::writeInt32(count(\$(#name)), (#arg));
    foreach (\$(#name) as &\$(#value)) {(#body)
    } ]]></template>
  <template key="write.map.head.k"><![CDATA[]]></template>
  <template key="write.map.head.v"><![CDATA[]]></template>
  <template key="write.map.for"><![CDATA[ BinaryWriter::writeInt32(count(\$(#name)), (#arg));
    foreach (\$(#name) as \$(#key) => &\$(#value)) {(#body)
    } ]]></template>
  <template key="write.ref.any"><![CDATA[(#body);]]></template>
  <template key="write.ref.vec | write.ref.map"><![CDATA[ (#body) ]]></template>
  <template key="write.ptr.string | write.ptr.struct"><![CDATA[
    if (\$(#name) != (#null)) {
    (#tab)BinaryWriter::writeInt08((#byteyes), (#arg));
    (#tab)(#body);
    } else {
    (#tab)BinaryWriter::writeInt08((#bytenon), (#arg));
    }
  ]]></template>
  <template key="write.ptr.vec | write.ptr.map"><![CDATA[
    if (\$(#name) != (#null)) {
    (#tab)BinaryWriter::writeInt08((#byteyes), (#arg));(#bodyindent)
    } else {
    (#tab)BinaryWriter::writeInt08((#bytenon), (#arg));
    }
  ]]></template>


  <!-- To XML String -->
  <template key="toxml.method.arg"><![CDATA[$name_]]></template>
  <template key="toxml.method"><![CDATA[ (#tab)public function toStringXml (\$name_)
    (#tab){
    (#tab)(#tab)\$result = '';
    (#tab)(#tab)\$attrs  = '';
    (#tab)(#tab)\$nodes  = '';(#body)
    (#tab)(#tab)\$result .= '<';
    (#tab)(#tab)\$result .= \$name_;
    (#tab)(#tab)\$result .= \$attrs;
    (#tab)(#tab)if (count(\$nodes) == 0) {
    (#tab)(#tab)(#tab)\$result .= '/>';
    (#tab)(#tab)} else {
    (#tab)(#tab)(#tab)\$result .= '>';
    (#tab)(#tab)(#tab)\$result .= \$nodes;
    (#tab)(#tab)(#tab)\$result .= '</';
    (#tab)(#tab)(#tab)\$result .= \$name_;
    (#tab)(#tab)(#tab)\$result .= '>';
    (#tab)(#tab)}
    (#tab)(#tab)return \$result;
    (#tab)} //(#type)::toStringXml(\$name_) ]]></template>
  <template key="toxml.any">   <![CDATA[ (#name) ]]></template>
  <template key="toxml.struct"><![CDATA[ \$(#name)->toStringXml('(#namer)') ]]></template>
  <template key="toxml.nest.n.struct"><![CDATA[ \$nodes .= (#body); ]]></template>
  <template key="toxml.nest.k.struct"><![CDATA[
    \$nodes .= (#body); ]]></template>
  <template key="toxml.nest.v.struct"><![CDATA[
    \$nodes .= (#body); ]]></template>
  <template key="toxml.nest.n"><![CDATA[
    \$nodes .= '<(#namer) value="';
    \$nodes .= \$(#body);
    \$nodes .= '">'; ]]></template>
  <template key="toxml.nest.k"><![CDATA[
    \$nodes .= '<(#namer) value="';
    \$nodes .= \$(#body);
    \$nodes .= '">'; ]]></template>
  <template key="toxml.nest.v"><![CDATA[
    \$nodes .= '<(#namer) value="';
    \$nodes .= \$(#body);
    \$nodes .= '">'; ]]></template>
  <template key="toxml.vec.head"><![CDATA[]]></template>
  <template key="toxml.vec.for"><![CDATA[
    \$nodes .= '<(#namer)>';
    foreach (\$(#name) as &\$(#value)) {(#body)
    }
    \$nodes .= '</(#namer)>';
  ]]></template>
  <template key="toxml.map.head.k"><![CDATA[]]></template>
  <template key="toxml.map.head.v"><![CDATA[]]></template>
  <template key="toxml.map.for"><![CDATA[
    \$nodes .= ('<(#namer)>');
    foreach (\$(#name) as \$(#key) => &\$(#value)) {(#body)
    }
    \$nodes .= '</(#namer)>';
  ]]></template>
  <template key="toxml.ref.any"><![CDATA[ \$attrs .= ' (#namer)="';
    \$attrs .= \$(#body);
    \$attrs .= '"'; ]]></template>
  <template key="toxml.ref.struct"><![CDATA[ \$nodes .= (#body); ]]></template>
  <template key="toxml.ref.vec | toxml.ref.map"><![CDATA[ if (count(\$(#name)) > 0) {(#bodyindent)
    }]]></template>
  <template key="toxml.ptr.any"><![CDATA[ if (\$(#name) != (#null)) {
    (#tab)\$attrs .= ' (#namer)="';
    (#tab)\$attrs .= \$(#body);
    (#tab)\$attrs .= '"';
    }]]></template>
  <template key="toxml.ptr.struct"><![CDATA[ if (\$(#name) != (#null)) {
    (#tab)\$nodes .= (#body);
    }]]></template>
  <template key="toxml.ptr.vec | toxml.ptr.map"><![CDATA[
    (#concat)if (\$(#name) != (#null) && count(\$(#name)) > 0) {(#bodyindent)
    }]]></template>


  <!-- To String -->
  <template key="tostr.method"><![CDATA[ (#tab)public function toString ()
    (#tab){
    (#tab)(#tab)\$result  = '{ ';
    (#tab)(#tab)\$result .= get_class(\$this);(#body)
    (#tab)(#tab)\$result .= ' }';
    (#tab)(#tab)return \$result;
    (#tab)} //(#type)::toString() ]]></template>
  <template key="tostr.any">   <![CDATA[ \$(#name) ]]></template>
  <template key="tostr.bool">  <![CDATA[ \$(#name) == TRUE ? 'True' : 'False' ]]></template>
  <template key="tostr.struct"><![CDATA[ '<(#type)>' ]]></template>
  <template key="tostr.vec">   <![CDATA[ '(' . count(\$(#name)) . ')' ]]></template>
  <template key="tostr.map">   <![CDATA[ '[' . count(\$(#name)) . ']' ]]></template>
  <template key="tostr.string"><![CDATA[ '"' . \$(#name) . '"' ]]></template>
  <template key="tostr.ref.any"><![CDATA[ \$result .= ', (#namer):';
    \$result .= (#body); ]]></template>
  <template key="tostr.ptr.any"><![CDATA[ \$result .= ', (#namer):';
    if (\$(#name) != (#null)) {
      (#tab)\$result .= (#body);
    } else {
      (#tab)\$result .= 'null';
    } ]]></template>


  <!-- -->
</tns:root>