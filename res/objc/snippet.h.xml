<?xml version="1.0" encoding="UTF-8"?>
<tns:root
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="invar.template ../snippet.xsd" xmlns:tns="invar.template" language="objc">

  <export resPath="objc/Invar.h" destDir="" destName="Invar.h"/>
  <export resPath="objc/InvarProtoc.h" destDir="" destName="InvarProtoc.h"/>
  <export resPath="objc/DataReader.h" destDir="" destName="DataReader.h"/>
  <export resPath="objc/DataWriter.h" destDir="" destName="DataWriter.h"/>

  <!-- Redefine 14 Invar buildin types to adapt Objective-C language -->
  <redefine>
    <int8 pack="" type="int8_t" include="" initValue="-1"/>
    <int16 pack="" type="int16_t" include="" initValue="-1"/>
    <int32 pack="" type="int32_t" include="" initValue="-1"/>
    <int64 pack="" type="int64_t" include="" initValue="-1"/>
    <uint8 pack="" type="uint8_t" include="" initValue="0"/>
    <uint16 pack="" type="uint16_t" include="" initValue="0"/>
    <uint32 pack="" type="uint32_t" include="" initValue="0"/>
    <uint64 pack="" type="uint64_t" include="" initValue="0"/>
    <float pack="" type="float_t" include="&lt;Foundation/NSValue.h&gt;" initValue="0.0"/>
    <double pack="" type="double_t" include="&lt;Foundation/NSValue.h&gt;" initValue="0.00"/>
    <bool pack="" type="boolean_t" initValue="false"/>
    <string pack="" type="NSString" include="&lt;Foundation/NSString.h&gt;"/>
    <vec pack="" type="NSMutableArray" generic="&lt;?&gt;" include="&lt;Foundation/NSArray.h&gt;"/>
    <map pack="" type="NSMutableDictionary" generic="&lt;?,?&gt;" include="&lt;Foundation/NSDictionary.h&gt;"/>
    <dialect pack="" type="NSObject" include="&lt;Foundation/NSObject.h&gt;"/>
    <dialect pack="" type="NSCopying" include="&lt;Foundation/NSObject.h&gt;"/>
    <dialect pack="" type="InvarEncode" include="InvarProtoc.h"/>
    <dialect pack="" type="InvarDecode" include="InvarProtoc.h"/>
    <dialect pack="" type="DataWriter" include="DataWriter.h"/>
    <dialect pack="" type="DataReader" include="DataReader.h"/>
  </redefine>

  <!-- Settings -->
  <template key="trace.all.types">     <![CDATA[ false ]]></template>
  <template key="unique.type.name">    <![CDATA[ true  ]]></template>
  <template key="capitalize.pack.head"><![CDATA[ true  ]]></template>
  <template key="code.dir.prefix">     <![CDATA[ ]]></template>
  <template key="one.pack.one.file">   <![CDATA[ false ]]></template>
  <template key="include.self">        <![CDATA[ false ]]></template>
  <template key="pack.name.nested">    <![CDATA[ false ]]></template>
  <template key="file.name.lowercase"> <![CDATA[ false ]]></template>
  <template key="code.dir.flatten">    <![CDATA[ true ]]></template>
  <template key="no.generic.type">     <![CDATA[ true  ]]></template>
  <template key="method.indent.num">   <![CDATA[ 0     ]]></template>

  <!-- Common snippet -->
  <template key="doc">           <![CDATA[ /* (#doc) */ ]]></template>
  <template key="doc.line">      <![CDATA[ (#space)//(#doc) ]]></template>
  <template key="type.enum">     <![CDATA[ int32 ]]></template>
  <template key="pointer.null">  <![CDATA[  ]]></template>
  <template key="import.split">  <![CDATA[ _ ]]></template>
  <template key="import.body">   <![CDATA[  ]]></template>
  <template key="init.any">      <![CDATA[  ]]></template>
  <template key="ptr.mark.string | ptr.mark.vec |
                 ptr.mark.struct | ptr.mark.map"><![CDATA[ * ]]></template>

  <template key="file"><![CDATA[
	//*==---------------------------*  Obj-C  *--------------------------------===//
	//
	//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
	//
	//===----------------------------------------------------------------------==*//
	(#blank)
	#ifndef (#define)_
	#define (#define)_
	(#blank)
	(#includes)
	(#pack)
	(#blank)
	#endif /* (#define)_ */
  ]]></template>
  <template key="file.include">     <![CDATA[ #import (#name)(#brk) ]]></template>
  <template key="file.include.wrap"><![CDATA[ "(#value)" ]]></template>
  <template key="file.pack"><![CDATA[ (#body) ]]></template>
  <template key="file.body"><![CDATA[ (#enums)(#structs) ]]></template>
  <template key="enum"><![CDATA[
    (#doc)
    typedef NS_ENUM(NSInteger, (#name))
    {
    (#body)}; /* enum: (#name) */
  ]]></template>
  <template key="enum.field"><![CDATA[
	(#tab)(#type)(#name) = (#value),(#doc)
  ]]></template>
  <template key="struct"><![CDATA[
    (#doc)
    @interface (#name) : NSObject <NSCopying, InvarEncode, InvarDecode, InvarEncodeJSON>
    (#blank)
    [#codeGetters(struct; fields)]
    (#blank)
    [#codeSetters(struct; fields)]
    (#blank)
    @end /* @interface (#name) */
    [#addImport(struct; imports; ::NSCopying)]
    [#addImport(struct; imports; ::InvarEncode)]
    [#addImport(struct; imports; ::InvarDecode)]
  ]]></template>
  <template key="struct.meta"><![CDATA[ /* (#name) (#type) */ ]]></template>
  <template key="struct.field"><![CDATA[ ]]></template>
  <template key="struct.getter"><![CDATA[
    - ([#clampLen(lenFieldType; 64; (#type) )] (#mark))
    (#concat) [#clampLen(lenFieldName; 24; (#name) )];
    (#concat) [#codeDoc(fields; (#index))]
  ]]></template>
  <template key="struct.setter"><![CDATA[
    - ((#typeupper) *) set[#clampLen(lenFieldName; 24; [#upperHeadChar( (#name) )] )]:
    (#concat) ([#clampLen(lenFieldType; 64; (#type) )] (#mark)) value;
    (#concat) [#codeMetaData(fields; (#index))]
  ]]></template>

  <template key="runtime.file"><![CDATA[ InvarRuntime ]]></template>
  <template key="runtime.pack"><![CDATA[ ]]></template>
  <template key="runtime.name"><![CDATA[ InvarRuntime ]]></template>
  <template key="runtime.body"><![CDATA[
    typedef void (^RecvRequest)(id req, id resp);
    typedef void (^RecvResponse)(id resp);
    typedef void (^RecvNotify)(id ntf);
    typedef void (^HandleError)(NSInteger err, uint16_t protoc);
    (#blank)
    @interface InvarRuntime : NSObject
    (#blank)
    @property (nonatomic, strong) RecvRequest  blockRecvRequest;
    @property (nonatomic, strong) RecvResponse blockRecvResponse;
    @property (nonatomic, strong) RecvNotify   blockRecvNotify;
    @property (nonatomic, strong) HandleError  blockHandleError;
    (#blank)
    + (instancetype) shared;
    + (id<InvarEncode>)HandleProtocAsServer:(DataReader * const)input Protoc:(uint16_t *)req Error:(uint16_t *)code;
    + (id<InvarEncode>)HandleProtocAsClient:(DataReader * const)input Protoc:(uint16_t *)req Error:(uint16_t *)code;
    (#blank)
    @end
    (#blank)
    #ifdef __cplusplus
    extern "C" {
    #endif
    (#body)(#concat-all)
    (#blank)
    #ifdef __cplusplus
    } /* extern "C" */
    #endif
    (#blank)
    #import "ProtocHandlers.h"
  ]]></template>
  <template key="runtime.protoc.handle.client"><![CDATA[ HandleProtocAsServer ]]></template>
  <template key="runtime.protoc.handle.server"><![CDATA[ HandleProtocAsClient ]]></template>
  <template key="runtime.protoc.handle.notify">  <![CDATA[
    (#brk)(#brk)/* (#doc) */
    extern void Handle(#type)((#type) *ntf);
    #define Handle(#type) [[self shared] blockRecvNotify] ]]></template>
  <template key="runtime.protoc.handle.response"><![CDATA[
    (#brk)(#brk)/* (#doc) */
    extern void Handle(#type)((#type) *resp);
    #define Handle(#type) [[self shared] blockRecvResponse]  ]]></template>
  <template key="runtime.protoc.handle.request"> <![CDATA[
    (#brk)(#brk)/* (#doc) */
    extern void Handle(#req)((#req) *req, (#resp) *resp);
    #define Handle(#type) [[self shared] blockRecvRequest] ]]></template>
  <template key="runtime.protoc.handle.method"><![CDATA[
    (#blank)
    /****************************************************************************** (#name) */(#body)
    (#blank)
    /******************************************************************************/
  ]]></template>

</tns:root>