<?xml version="1.0" encoding="UTF-8"?>
<tns:root
  language="typescript"
  xmlns:tns="http://invar.struqt.com/snippet/1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://invar.struqt.com/snippet/1.0 http://struqt.com/xsd/invar-snippet-1.0.xsd">

  <export resPath="typescript/invar.codec.ts" destDir="." destName="invar.codec.ts"/>
  <export resPath="typescript/invar.types.ts" destDir="." destName="invar.types.ts"/>
  <export resPath="typescript/invar.utils.ts" destDir="." destName="invar.utils.ts"/>

  <!-- Redefine 14 Invar buildin types to adapt TypeScript language -->
  <redefine>
    <int8 pack="  Invar.Types" type="Int08   " include="Invar.Types" initValue="-1"/>
    <int16 pack=" Invar.Types" type="Int16   " include="Invar.Types" initValue="-1"/>
    <int32 pack=" Invar.Types" type="Int32   " include="Invar.Types" initValue="-1"/>
    <int64 pack=" Invar.Types" type="Int64   " include="Invar.Types" initValue="00"/>
    <uint8 pack=" Invar.Types" type="Uint08  " include="Invar.Types" initValue="0"/>
    <uint16 pack="Invar.Types" type="Uint16  " include="Invar.Types" initValue="0"/>
    <uint32 pack="Invar.Types" type="Uint32  " include="Invar.Types" initValue="0"/>
    <uint64 pack="Invar.Types" type="Uint64  " include="Invar.Types" initValue="00"/>
    <float pack=" Invar.Types" type="Float32 " include="Invar.Types" initValue="0.0"/>
    <double pack="Invar.Types" type="Float64 " include="Invar.Types" initValue="0.00"/>
    <string pack="           " type="string  " initValue=""/>
    <bool pack="             " type="boolean " initValue="false"/>
    <vec pack="              " type="Array   " initValue="" generic="&lt;?&gt;"/>
    <map pack="   Invar.Utils" type="Dict    " include="Invar.Utils" initValue="" generic="&lt;?,?&gt;"/>
    <dialect pack="Invar.Codec" type="BinaryWriter" include="Invar.Codec" />
    <dialect pack="Invar.Codec" type="BinaryReader" include="Invar.Codec" />
  </redefine>

  <!-- Settings -->
  <template key="trace.all.types">     <![CDATA[ false ]]></template>
  <template key="capitalize.pack.head"><![CDATA[ true  ]]></template>
  <template key="one.pack.one.file">   <![CDATA[ true  ]]></template>
  <template key="pack.name.nested">    <![CDATA[ false ]]></template>
  <template key="file.name.lowercase"> <![CDATA[ true  ]]></template>
  <template key="file.name.no.suffix"> <![CDATA[ true  ]]></template>
  <template key="include.self">        <![CDATA[ false ]]></template>
  <template key="code.dir.flatten">    <![CDATA[ true  ]]></template>
  <template key="no.generic.type">     <![CDATA[ false ]]></template>
  <template key="use.full.type.name">  <![CDATA[ true  ]]></template>
  <template key="method.indent.num">   <![CDATA[ 1     ]]></template>
  <template key="code.dir.prefix">     <![CDATA[  ]]></template>
  <template key="import.exclude.same.pack"><![CDATA[ true   ]]></template>
  <template key="import.exclude.conflict"> <![CDATA[ false  ]]></template>

  <!-- Common snippet -->
  <template key="file.include">     <![CDATA[ import { (#module) } from (#name)(#brk) ]]></template>
  <template key="file.include.wrap"><![CDATA[ "./(#value)" ]]></template>
  <template key="file.pack.split">  <![CDATA[   ]]></template>
  <template key="file.type.split">  <![CDATA[ . ]]></template>
  <!--
  <template key="import">      <![CDATA[ (#body)(#brk) ]]></template>
  <template key="import.body"> <![CDATA[ let (#name) = (#module).(#name) ]]></template>
  <template key="import.split"><![CDATA[ ]]></template>
  -->
  <template key="init.any">    <![CDATA[ (#deft)         ]]></template>
  <template key="init.string"> <![CDATA[ '(#deft)'       ]]></template>
  <template key="init.int64">  <![CDATA[ new InvarTypes.Int64('(#deft)')  ]]></template>
  <template key="init.uint64"> <![CDATA[ new InvarTypes.Uint64('(#deft)') ]]></template>
  <template key="init.enum">   <![CDATA[ (#module).(#type).(#name) ]]></template>
  <template key="init.struct"> <![CDATA[ new (#type)()   ]]></template>
  <template key="init.vec">    <![CDATA[ new (#type)()   ]]></template>
  <template key="init.map">    <![CDATA[ new (#type)()   ]]></template>

  <template key="pointer.null">  <![CDATA[ null ]]></template>
  <template key="pointer.spec">  <![CDATA[ ?*  ]]></template>
  <template key="pointer.invoke"><![CDATA[ ?-> ]]></template>
  <template key="pointer.copy">  <![CDATA[ (#name) = (#arg) ]]></template>

  <template key="refer.spec">    <![CDATA[ & ]]></template>
  <template key="refer.invoke">  <![CDATA[ . ]]></template>
  <template key="refer.copy">    <![CDATA[ (#name) = (#arg) ]]></template>
  <template key="refer.const">   <![CDATA[ const ]]></template>

  <template key="byte.yes">      <![CDATA[ 0x01 ]]></template>
  <template key="byte.non">      <![CDATA[ 0x00 ]]></template>

  <template key="doc">     <![CDATA[ /* (#doc) */ ]]></template>
  <template key="doc.line"><![CDATA[ // (#doc). ]]></template>

  <template key="file.head"><![CDATA[
	/*===--------------------------*  TypeScript  *----------------------------===//
    //
    //             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
    //
    //===----------------------------------------------------------------------===*/
  ]]></template>
  <template key="file"><![CDATA[
    (#head)
    (#pack)
  ]]></template>
  <template key="file.pack"><![CDATA[
    (#includes)
    export module (#name) {
    (#import)
    (#body)}
  ]]></template>
  <template key="file.body"><![CDATA[
    (#enums)(#structs)
  ]]></template>
  <template key="enum"><![CDATA[
    (#doc)
    export enum (#name) {
    (#blank)
    (#body)
    } /* end enum (#name) */
  ]]></template>
  <template key="enum.field"><![CDATA[
    (#tab)(#block-doc)
    (#tab)(#name) = (#value),
  ]]></template>
  <template key="struct.protoc.ntf"> <![CDATA[ (#brk), Invar.ProtocNotify   ]]></template>
  <template key="struct.protoc.req"> <![CDATA[ (#brk), Invar.ProtocRequest  ]]></template>
  <template key="struct.protoc.resp"><![CDATA[ (#brk), Invar.ProtocResponse ]]></template>
  <template key="struct.const.name.crc"><![CDATA[ (#type).CRC32 ]]></template>
  <template key="struct"><![CDATA[
    [#addImport(struct; imports; Invar.Codec::BinaryReader)]
    [#addImport(struct; imports; Invar.Codec::BinaryWriter)]
    (#doc)
    export class (#name) {
    (#blank)
    (#tab)static get CRC32(): string { return '[#codeCRC32(struct)]' }
    (#tab)static get SIZE() : number { return [#codeBasicSize(struct)] }
    (#blank)
    [#codeFields (struct; fields)]
    (#blank)
    [#codeNested (ctor.;  useFullName; struct; fields; imports)]
    (#blank)
    [#codeNested (size.;  useFullName; struct; fields; imports)]
    (#blank)
    [#codeNested (read.;  useFullName; struct; fields; imports)]
    (#blank)
    [#codeNested (write.; useFullName; struct; fields; imports)]
    (#blank)
    [#codeNested (tojson.; useFullName; struct; fields; imports)]
    (#blank)
    } /* class (#name) */
    (#blank)
  ]]></template>
  <template key="struct.meta"><![CDATA[ [Invar.InvarRule("(#type)", "(#name)")] ]]></template>
  <template key="struct.field.prefix"><![CDATA[ this._ ]]></template>
  <template key="struct.field"><![CDATA[
    (#tab)private _[#clampLen(lenFieldNameR; 16; (#namer) )]:
    (#concat) [#clampLen(lenFieldType; 64; (#type))]
    (#concat) [#codeDoc(fields; (#index))]
  ]]></template>
  <template key="struct.setter"><![CDATA[
    (#tab)@(#namer).setter [#codeDoc(fields; (#index))]
    (#tab)def (#namer)(self, value):
    (#tab)(#tab)(#name) = value
    (#tab)(#tab)return self
  ]]></template>
  <template key="struct.getter"><![CDATA[
    (#tab)@property [#codeDoc(fields; (#index))]
    (#tab)def (#namer)(self):
    (#tab)(#tab)return (#name)
  ]]></template>

  <!-- Method Construct -->
  <template key="ctor.method"><![CDATA[
    (#tab)constructor() {(#body)
    (#tab)}
  ]]></template>
  <template key="ctor.any | ctor.vec | ctor.map"><![CDATA[
    [#clampLen(lenFieldName; 32; (#name))] = (#deft) ]]></template>
  <template key="ctor.ptr.any"><![CDATA[
    [#clampLen(lenFieldName; 32; (#name))] = (#null) ]]></template>
  <template key="ctor.ref.any"><![CDATA[ (#body) ]]></template>


  <!-- Read bytes from a Stream -->
  <template key="read.import"><![CDATA[ ]]></template>
  <template key="read.method.arg"><![CDATA[ r ]]></template>
  <template key="read.method"><![CDATA[
    (#tab)public read(r :InvarCodec.BinaryReader): number {(#body)
    (#tab)(#tab)return InvarCodec.ERR_NONE
    (#tab)} /* (#type)::read(...) */ ]]></template>
  <template key="read.int8">  <![CDATA[ (#arg).readInt08()   ]]></template>
  <template key="read.int16"> <![CDATA[ (#arg).readInt16()   ]]></template>
  <template key="read.int32"> <![CDATA[ (#arg).readInt32()   ]]></template>
  <template key="read.int64"> <![CDATA[ new InvarTypes.Int64((#arg).readInt64()) ]]></template>
  <template key="read.uint8"> <![CDATA[ (#arg).readUint08()  ]]></template>
  <template key="read.uint16"><![CDATA[ (#arg).readUint16()  ]]></template>
  <template key="read.uint32"><![CDATA[ (#arg).readUint32()  ]]></template>
  <template key="read.uint64"><![CDATA[ new InvarTypes.Uint64((#arg).readUint64()) ]]></template>
  <template key="read.float"> <![CDATA[ (#arg).readFloat32() ]]></template>
  <template key="read.double"><![CDATA[ (#arg).readFloat64() ]]></template>
  <template key="read.bool">  <![CDATA[ (#arg).readBoolean() ]]></template>
  <template key="read.string"><![CDATA[ (#arg).readUTF8()    ]]></template>
  <template key="read.enum">  <![CDATA[ (#arg).readInt32()   ]]></template>
  <template key="read.struct"><![CDATA[ (#name).read((#arg)) ]]></template>
  <template key="read.nest.n|read.nest.k|read.nest.v"><![CDATA[
    let (#name): (#type) = (#body) ]]></template>
  <template key="read.nest.n.struct|read.nest.k.struct|read.nest.v.struct"><![CDATA[
    let (#name): (#type) = new (#type)()
    (#body)
  ]]></template>
  <template key="read.vec.head"><![CDATA[
    let (#name): (#type) = new (#type)()(#brk)]]></template>
  <template key="read.vec.for"><![CDATA[
    let (#len): number = (#arg).readInt32()
    for (let (#index): number = 0; (#index) < (#len); (#index)++) {(#body)
    (#tab)(#name).push((#value))
    }
  ]]></template>
  <template key="read.map.head"><![CDATA[
    let (#name): (#type) = new (#type)() /*read.map.head*/(#brk)]]></template>
  <template key="read.map.for"><![CDATA[
    let (#len): number = (#arg).readUint32();
    for (let (#index): number = 0; (#index) < (#len); (#index)++) {(#body)
    (#tab)(#name).put((#key), (#value))
    }
  ]]></template>
  <template key="read.ref.any">   <![CDATA[ (#name) = (#body) ]]></template>
  <template key="read.ref.struct"><![CDATA[ (#body) ]]></template>
  <template key="read.ref.vec | read.ref.map"><![CDATA[ (#body) ]]></template>
  <template key="read.ptr.string"><![CDATA[
    let (#namer)Exists: number = (#arg).readInt08()
    if ((#byteyes) == (#namer)Exists) {
    (#tab)(#name) = (#body)
    }
    else if ((#bytenon) == (#namer)Exists) { (#name) = (#null) }
    else { return InvarCodec.ERR_DECODE_STRING_P }
  ]]></template>
  <template key="read.ptr.struct"><![CDATA[
    let (#namer)Exists: number = (#arg).readInt08()
    if ((#byteyes) == (#namer)Exists) {
    (#tab)if ((#name) == (#null)) { (#name) = new (#type)() }
    (#tab)(#body)
    }
    else if ((#bytenon) == (#namer)Exists) { (#name) = (#null) }
    else { return InvarCodec.ERR_DECODE_STRUCT_P }
  ]]></template>
  <template key="read.ptr.vec | read.ptr.map"><![CDATA[
    let (#namer)Exists: number = (#arg).readInt08()
    if ((#byteyes) == (#namer)Exists) {
    (#tab)if ((#name) == (#null)) { (#name) = new (#type)() }(#bodyindent)
    }
    else if ((#bytenon) == (#namer)Exists) { (#name) = (#null) }
    else { return InvarCodec.ERR_DECODE_VEC_MAP_P }
  ]]></template>
  <template key="read.special.protocCRC"><![CDATA[
    (#brk)if (CRC32 != (#name)) { return InvarCodec.ERR_PROTOC_CRC_MISMATCH }
  ]]></template>
  <template key="read.special.protocError"><![CDATA[
    (#brk)if ((#name) !== 0) {
    (#tab)return (#name)
    }
  ]]></template>

  <!-- Write bytes to a Stream -->
  <template key="write.import"><![CDATA[ ]]></template>
  <template key="write.method.arg"><![CDATA[ w ]]></template>
  <template key="write.method"><![CDATA[
    (#tab)public write(w: InvarCodec.BinaryWriter): void {(#body)
    (#tab)} /* (#type)::Write(...) */ ]]></template>
  <template key="write.any">   <![CDATA[ /* !!!!! */ ]]></template>
  <template key="write.int8">  <![CDATA[ (#arg).writeInt08((#name).valueOf())   ]]></template>
  <template key="write.int16"> <![CDATA[ (#arg).writeInt16((#name).valueOf())   ]]></template>
  <template key="write.int32"> <![CDATA[ (#arg).writeInt32((#name).valueOf())   ]]></template>
  <template key="write.int64"> <![CDATA[ (#arg).writeInt64((#name).data)        ]]></template>
  <template key="write.uint8"> <![CDATA[ (#arg).writeUint08((#name).valueOf())  ]]></template>
  <template key="write.uint16"><![CDATA[ (#arg).writeUint16((#name).valueOf())  ]]></template>
  <template key="write.uint32"><![CDATA[ (#arg).writeUint32((#name).valueOf())  ]]></template>
  <template key="write.uint64"><![CDATA[ (#arg).writeUint64((#name).data)       ]]></template>
  <template key="write.float"> <![CDATA[ (#arg).writeFloat32((#name).valueOf()) ]]></template>
  <template key="write.double"><![CDATA[ (#arg).writeFloat64((#name).valueOf()) ]]></template>
  <template key="write.bool">  <![CDATA[ (#arg).writeBoolean((#name)) ]]></template>
  <template key="write.string"><![CDATA[ (#arg).writeUTF8((#name))    ]]></template>
  <template key="write.enum">  <![CDATA[ (#arg).writeInt32((#name))   ]]></template>
  <template key="write.struct"><![CDATA[ (#name).write((#arg))        ]]></template>
  <template key="write.vec.for"><![CDATA[
    let (#namer)Size: number = (#name).length
    (#arg).writeInt32((#namer)Size) /* vec.for: (#name) */
    for (let (#namer)Idx: number = 0; (#namer)Idx < (#namer)Size; (#namer)Idx++) {
    (#tab)let (#value): (#typer) = (#name)[(#namer)Idx](#body)
    }
  ]]></template>
  <template key="write.map.for"><![CDATA[
    let (#namer)Size: number = (#name).length
    (#arg).writeInt32((#namer)Size) /* map.for: (#name) */
    for (let (#namer)Idx: number = 0; (#namer)Idx < (#namer)Size; (#namer)Idx++) {
    (#tab)let (#namer)Iter: [(#typer)] = (#name).getPair((#namer)Idx)(#body)
    }
  ]]></template>
  <template key="write.nest.n"><![CDATA[ (#body);]]></template>
  <template key="write.nest.k"><![CDATA[
    let (#name): (#type) = (#nameupper)Iter[0](#brk)(#body) ]]></template>
  <template key="write.nest.v"><![CDATA[
    let (#name): (#type) = (#nameupper)Iter[1](#brk)(#body) ]]></template>
  <template key="write.vec.head"><![CDATA[ ]]></template>
  <template key="write.map.head.k"><![CDATA[
    let (#name): (#type) = (#nameupper)Iter[0](#brk) ]]></template>
  <template key="write.map.head.v"><![CDATA[
    let (#name): (#type) = (#nameupper)Iter[1](#brk) ]]></template>
  <template key="write.ref.any"><![CDATA[(#body);]]></template>
  <template key="write.ref.vec | write.ref.map"><![CDATA[ (#body) ]]></template>
  <template key="write.ptr.string | write.ptr.struct"><![CDATA[
    if ((#name) !== (#null)) {
    (#tab)(#arg).writeInt08((#byteyes));
    (#tab)(#body);
    } else {
    (#tab)(#arg).writeInt08((#bytenon));
    }
  ]]></template>
  <template key="write.ptr.vec | write.ptr.map"><![CDATA[
    if ((#name) !== (#null)) {
    (#tab)(#arg).writeInt08((#byteyes));(#bodyindent)
    } else {
    (#tab)(#arg).writeInt08((#bytenon));
    }
  ]]></template>
  <template key="write.special.protocError"><![CDATA[
    (#brk)if ((#name) !== 0) { return; }
  ]]></template>

  <!-- Write data to JSON data format -->
  <template key="tojson.import">    <![CDATA[ ]]></template>
  <template key="tojson.method.arg"><![CDATA[ s ]]></template>
  <template key="tojson.method"><![CDATA[
    (#tab)public toStringJSON(): string {
    (#tab)(#tab)let code: Array<string> = new Array<string>()
    (#tab)(#tab)this.writeJSON(code)
    (#tab)(#tab)return code.join('')
    (#tab)}(#brk)
    (#tab)public writeJSON(s: Array<string>): void {
    (#tab)(#tab)(#arg).push('\\n'), (#arg).push('{')
    (#tab)(#tab)let comma: string = null(#body)
    (#tab)(#tab)(#arg).push('}'), (#arg).push('\\n')
    (#tab)} /* (#type)::writeJSON(...) */ ]]></template>
  <template key="tojson.any"> <![CDATA[ (#arg).push((#name).toString()) ]]></template>
  <template key="tojson.enum"><![CDATA[ (#arg).push((#name).toString()) ]]></template>
  <template key="tojson.bool"><![CDATA[ (#arg).push((#name).toString()) ]]></template>
  <template key="tojson.string"><![CDATA[ (#arg).push('"'), (#arg).push((#name)), s.push('"') ]]></template>
  <template key="tojson.struct"><![CDATA[ (#name).writeJSON((#arg)) ]]></template>
  <template key="tojson.vec.for"><![CDATA[
    let (#namer)Size: number = (null == (#name) ? 0 : (#name).length)
    if ((#namer)Size > 0) {
    (#tab)(#arg).push('\\n'), (#arg).push('[')
    (#tab)let (#namer)Idx: number = 0
    (#tab)for (let (#namer)Idx: number = 0; (#namer)Idx < (#namer)Size; (#namer)Idx++) { /* vec.for: (#name) */
    (#tab)(#tab)let (#value): (#typer) = (#name)[(#namer)Idx](#concat)(#bodyindent)
    (#tab)(#tab)if ((#namer)Idx < (#namer)Size) { (#arg).push(',') }
    (#tab)} (#arg).push(']')
    }
  ]]></template>
  <template key="tojson.map.for"><![CDATA[
    let (#namer)Size: number = (null == (#name) ? 0 : (#name).length)
    if ((#namer)Size > 0) {
    (#tab)(#arg).push('\\n'), (#arg).push('{')
    (#tab)
    (#tab)for (let (#namer)Idx: number = 0; (#namer)Idx < (#namer)Size; (#namer)Idx++) { /* map.for: (#name) */
    (#tab)(#tab)let (#namer)Iter: [(#typer)] = (#name).getPair((#namer)Idx)(#concat)(#bodyindent)
    (#tab)(#tab)if ((#namer)Idx !== (#namer)Size) { (#arg).push(',') }
    (#tab)}
    (#tab)(#arg).push('}')
    }
  ]]></template>
  <template key="tojson.map.head.k"><![CDATA[
    let (#name): (#type) = (#nameupper)Iter[0](#brk) ]]></template>
  <template key="tojson.map.head.v"><![CDATA[
    let (#name): (#type) = (#nameupper)Iter[1](#brk) ]]></template>
  <template key="tojson.nest.n"><![CDATA[ (#body) ]]></template>
  <template key="tojson.nest.k"><![CDATA[
    let (#name): (#type) = (#nameupper)Iter[0] /* nest.k */
    (#arg).push('"'), (#body), (#arg).push('"'), (#arg).push(':') ]]></template>
  <template key="tojson.nest.v"><![CDATA[
    let (#name): (#type) = (#nameupper)Iter[1] /* nest.v */(#brk)(#body) ]]></template>
  <template key="tojson.ref.any"><![CDATA[
    (#arg).push('"'), (#arg).push('(#namer)'), (#arg).push('"'), (#arg).push(':'), comma = ','
    (#body) ]]></template>
  <template key="tojson.ref.vec | tojson.ref.map"><![CDATA[
    if ((#namer)Exists) { (#arg).push('"'), (#arg).push('(#namer)'), (#arg).push('"'), (#arg).push(':'), comma = ',' }
    (#body) ]]></template>
  <template key="tojson.ref.string | tojson.ref.struct |
                 tojson.ptr.string | tojson.ptr.struct"><![CDATA[
    if ((#namer)Exists) {
    (#tab)(#arg).push('"'), (#arg).push('(#namer)'), (#arg).push('"'), (#arg).push(':'), comma = ','
    (#tab)(#body)
    }
  ]]></template>
  <template key="tojson.ptr.vec | tojson.ptr.map"><![CDATA[
    if ((#namer)Exists) {(#bodyindent) comma = ','
    }
  ]]></template>
  <template key="tojson.field.head.string"><![CDATA[
    let (#namer)Exists: boolean = (!(#name) || 0 === (#name).length)
  ]]></template>
  <template key="tojson.field.head.struct"><![CDATA[
    let (#namer)Exists: boolean = (!(#name) || false)
  ]]></template>
  <template key="tojson.field.head.vec | tojson.field.head.map"><![CDATA[
    let (#namer)Exists: boolean = ((#name) && (#name).length > 0)
  ]]></template>
  <template key="tojson.field.space.any"><![CDATA[
    if (comma && comma.length > 0) { (#arg).push(comma), comma = null }
  ]]></template>
  <template key="tojson.field.space.string | tojson.field.space.vec |
                 tojson.field.space.struct | tojson.field.space.map"><![CDATA[
    if (comma && comma.length > 0 && (#namer)Exists) { (#arg).push(comma), comma = null }
  ]]></template>

</tns:root>
