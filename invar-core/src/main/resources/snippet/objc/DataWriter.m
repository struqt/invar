//===---------------------------*  Obj-C  *--------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===//
///*
#if ! __has_feature(objc_arc)
#error This file must be compiled with ARC. Either turn on ARC for the project or use -fobjc-arc flag
#endif //*/

#import "Invar.h"
#import "DataWriter.h"

@interface DataWriter ()
{
    CFByteOrder    _byteOrder;
    NSMutableData *_data;
}
@end


@implementation DataWriter

static const CFByteOrder ByteOrderDeftW = CFByteOrderBigEndian;

+ (instancetype) Create
{
    return [[DataWriter alloc] init];
}

+ (instancetype) CreateWithData:(NSMutableData * const)data
{
    return [[DataWriter alloc] initWithData:data];
}

- (instancetype) init
{
    return [self initWithData:[[NSMutableData alloc] initWithCapacity:128]];
}

- (instancetype) initWithData:(NSMutableData*)data
{
    self = [super init];
    if (!self || !data) {
        return nil;
    }
    _data = data;
    _byteOrder = ByteOrderDeftW;
    return self;
}

- (void)dealloc
{
    if (_data) { _data = nil; }
}

- (instancetype) bigEndian
{
    _byteOrder = CFByteOrderBigEndian;
    return self;
}

- (instancetype) littleEndian
{
    _byteOrder = CFByteOrderLittleEndian;
    return self;
}

- (NSData*) data
{
    return _data;
}

- (void) writeInt8:(int8_t)v
{
    [_data appendBytes:&v length:sizeof(int8_t)];
}

- (void) writeInt16:(int16_t)v
{
    if (CFByteOrderBigEndian == _byteOrder) {
        v = CFSwapInt16HostToBig(v);
    }
    [_data appendBytes:&v length:sizeof(int16_t)];
}

- (void) writeInt32:(int32_t)v
{
    if (CFByteOrderBigEndian == _byteOrder) {
        v = CFSwapInt32HostToBig(v);
    }
    [_data appendBytes:&v length:sizeof(int32_t)];
}

- (void) writeInt64:(int64_t)v
{
    if (CFByteOrderBigEndian == _byteOrder) {
        v = CFSwapInt64HostToBig(v);
    }
    [_data appendBytes:&v length:sizeof(int64_t)];
}

- (void) writeUInt8:(uint8_t)v
{
    [_data appendBytes:&v length:sizeof(uint8_t)];
}

- (void) writeUInt16:(uint16_t)v
{
    if (CFByteOrderBigEndian == _byteOrder) {
        v = CFSwapInt16HostToBig(v);
    }
    [_data appendBytes:&v length:sizeof(uint16_t)];
}

- (void) writeUInt32:(uint32_t)v
{
    if (CFByteOrderBigEndian == _byteOrder) {
        v = CFSwapInt32HostToBig(v);
    }
    [_data appendBytes:&v length:sizeof(uint32_t)];
}

- (void) writeUInt64:(uint64_t)v
{
    if (CFByteOrderBigEndian == _byteOrder) {
        v = CFSwapInt64HostToBig(v);
    }
    [_data appendBytes:&v length:sizeof(uint64_t)];
}

- (void) writeFloat:(float_t)v
{
    [self writeUInt32:invar_encode_float32(v)];
}

- (void) writeDouble:(double_t)v
{
    [self writeUInt64:invar_encode_float64(v)];
}

- (void) writeBool:(boolean_t)v
{
    [self writeUInt8:(v ? 0x01 : 0x00)];
}

- (void) writeString:(NSString*)v
{
    NSData *data = [v dataUsingEncoding:NSUTF8StringEncoding];
    [self writeUInt16:(uint16_t)data.length];
    [_data appendData:data];
}

@end
