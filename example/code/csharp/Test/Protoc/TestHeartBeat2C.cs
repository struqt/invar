/*===-----------------------------*  C#  *---------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace Test.Protoc {

using System.Collections.Generic;
using System.IO;
using System.Text;
using System;

/// 服务端请求,客户端响应.
public sealed class TestHeartBeat2C
: Invar.BinaryDecode
, Invar.BinaryEncode
, Invar.JSONEncode
, Invar.XMLEncode
{
    public const uint CRC32 = 0xAF1824FF;

    private UInt16                    protocId  = 65534; // [AutoAdd] ProtocolID.
    private UInt32                    protocCRC = CRC32; // [AutoAdd] Protocol CRC32.
    private Protoc2C                  protoc2C  = null; // [AutoAdd] 服务端响应的公共数据.
    private Dictionary<String,String> hotfix    = null; // [AutoAdd] Hotfix.

    /// [AutoAdd] ProtocolID.
    [Invar.InvarRule("uint16", "")]
    public UInt16 GetProtocId() { return this.protocId; }

    /// [AutoAdd] Protocol CRC32.
    [Invar.InvarRule("uint32", "")]
    public UInt32 GetProtocCRC() { return this.protocCRC; }

    /// [AutoAdd] 服务端响应的公共数据.
    [Invar.InvarRule("Test.Protoc.Protoc2C", "")]
    public Protoc2C GetProtoc2C() { return this.protoc2C; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "")]
    public Dictionary<String,String> GetHotfix() { return this.hotfix; }

    /// [AutoAdd] 服务端响应的公共数据.
    [Invar.InvarRule("Test.Protoc.Protoc2C", "")]
    public TestHeartBeat2C SetProtoc2C(Protoc2C value) { this.protoc2C = value; return this; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "")]
    public TestHeartBeat2C SetHotfix(Dictionary<String,String> value) { this.hotfix = value; return this; }

    public TestHeartBeat2C Reuse()
    {
        this.protocId  = 65534;
        this.protocCRC = CRC32;
        if (this.protoc2C != null) { this.protoc2C.Reuse(); }
        if (this.hotfix != null) { this.hotfix.Clear(); }
        return this;
    } //TestHeartBeat2C::Reuse()

    public TestHeartBeat2C Copy(TestHeartBeat2C from_)
    {
        if (null == from_ || this == from_) {
            return this;
        }
        this.protocId = from_.protocId;
        this.protocCRC = from_.protocCRC;
        if (null == from_.protoc2C) {
            this.protoc2C = null;
        } else {
            if (null == this.protoc2C) { this.protoc2C = new Protoc2C(); }
            this.protoc2C.Copy(from_.protoc2C);
        }
        if (null == from_.hotfix) {
            this.hotfix = null;
        } else {
            if (null == this.hotfix) { this.hotfix = new Dictionary<String,String>(); }
            else { this.hotfix.Clear(); }
            foreach (var hotfixIter in from_.hotfix) {
                this.hotfix.Add(hotfixIter.Key, hotfixIter.Value);
            }
        }
        return this;
    } //TestHeartBeat2C::Copy(...)

    public void Read(BinaryReader r)
    {
        this.protocId = r.ReadUInt16();
        this.protocCRC = r.ReadUInt32();
        if (CRC32 != this.protocCRC) { throw new IOException("Protoc read error: CRC32 is mismatched.", 499); }
        sbyte protoc2CExists = r.ReadSByte();
        if ((sbyte)0x01 == protoc2CExists) {
            if (this.protoc2C == null) { this.protoc2C = new Protoc2C(); }
            this.protoc2C.Read(r);
        }
        else if ((sbyte)0x00 == protoc2CExists) { this.protoc2C = null; }
        else { throw new IOException("Protoc read error: The value of 'protoc2CExists' is invalid.", 497); }
        sbyte hotfixExists = r.ReadSByte();
        if ((sbyte)0x01 == hotfixExists) {
            if (this.hotfix == null) { this.hotfix = new Dictionary<String,String>(); }
            UInt32 lenHotfix = r.ReadUInt32();
            for (UInt32 iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
                String k1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                String v1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                if (!this.hotfix.ContainsKey(k1)) {
                    this.hotfix.Add(k1, v1);
                } else {
                    this.hotfix[k1] = v1;
                }
            }
        }
        else if ((sbyte)0x00 == hotfixExists) { this.hotfix = null; }
        else { throw new IOException("Protoc read error: The value of 'hotfixExists' is invalid.", 498); }
    } //TestHeartBeat2C::Read(...)

    public void Write(BinaryWriter w)
    {
        w.Write(this.protocId);
        w.Write(this.protocCRC);
        if (this.protoc2C != null) {
            w.Write((sbyte)0x01);
            this.protoc2C.Write(w);
        } else {
            w.Write((sbyte)0x00);
        }
        if (this.hotfix != null) {
            w.Write((sbyte)0x01);
            w.Write(this.hotfix.Count);
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                String k1 = hotfixIter.Key;
                byte[] k1Bytes = Encoding.UTF8.GetBytes(k1);
                w.Write(k1Bytes.Length);
                w.Write(k1Bytes);
                String v1 = hotfixIter.Value;
                byte[] v1Bytes = Encoding.UTF8.GetBytes(v1);
                w.Write(v1Bytes.Length);
                w.Write(v1Bytes);
            }
        } else {
            w.Write((sbyte)0x00);
        }
    } //TestHeartBeat2C::Write(...)

    public override String ToString()
    {
        StringBuilder result = new StringBuilder();
        result.Append('{').Append(' ');
        result.Append(GetType().ToString());
        result.Append(',').Append(' ').Append("protocId").Append(':');
        result.Append(this.protocId.ToString());
        result.Append(',').Append(' ').Append("protocCRC").Append(':');
        result.Append(this.protocCRC.ToString());
        result.Append(',').Append(' ').Append("protoc2C").Append(':');
        if (this.protoc2C != null) { result.Append("<Protoc2C>"); }
        else { result.Append("null"); }
        result.Append(',').Append(' ').Append("hotfix").Append(':');
        if (this.hotfix != null) { result.Append("[" + this.hotfix.Count + "]"); }
        else { result.Append("null"); }
        result.Append(' ').Append('}');
        return result.ToString();
    } //TestHeartBeat2C::ToString()

    public StringBuilder ToStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.WriteJSON(code);
        return code;
    }

    public void WriteJSON(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        s.Append('"').Append("protocId").Append('"').Append(':'); comma = ","; s.Append(this.protocId.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("protocCRC").Append('"').Append(':'); comma = ","; s.Append(this.protocCRC.ToString());
        bool protoc2CExists = (null != this.protoc2C);
        if (!String.IsNullOrEmpty(comma) && protoc2CExists) { s.Append(comma); comma = null; }
        if (protoc2CExists) {
            s.Append('"').Append("protoc2C").Append('"').Append(':'); comma = ","; this.protoc2C.WriteJSON(s);
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"'); s.Append('"').Append(k1.ToString()).Append('"'); s.Append('"').Append(':');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                }
                s.Append('}');
            } comma = ",";
        }
        s.Append('}').Append('\n');
    } //TestHeartBeat2C::WriteJSON(...)

    public StringBuilder ToStringLua()
    {
        StringBuilder code = new StringBuilder();
        code.Append("-- TestHeartBeat2C.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" --").Append('\n');
        code.Append("local table=");
        this.WriteLua(code); code.Append(';');
        return code;
    }

    public void WriteLua(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        s.Append("protocId").Append('='); comma = ","; s.Append(this.protocId.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("protocCRC").Append('='); comma = ","; s.Append(this.protocCRC.ToString());
        bool protoc2CExists = (null != this.protoc2C);
        if (!String.IsNullOrEmpty(comma) && protoc2CExists) { s.Append(comma); comma = null; }
        if (protoc2CExists) {
            s.Append("protoc2C").Append('='); comma = ","; this.protoc2C.WriteLua(s);
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"').Append(k1.ToString()).Append('"'); s.Append('=');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        s.Append('}').Append('\n');
    }

    public StringBuilder ToStringPHP()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?php ").Append("/* TestHeartBeat2C.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" */").Append('\n');
        code.Append('\n').Append("return ");
        this.WritePHP(code); code.Append(';').Append('\n');
        return code;
    }

    public void WritePHP(StringBuilder s)
    {
        s.Append("array").Append('(').Append('\n');
        string comma = null;
        s.Append('\'').Append("protocId").Append('\'').Append("=>"); comma = ","; s.Append(this.protocId.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("protocCRC").Append('\'').Append("=>"); comma = ","; s.Append(this.protocCRC.ToString());
        bool protoc2CExists = (null != this.protoc2C);
        if (!String.IsNullOrEmpty(comma) && protoc2CExists) { s.Append(comma).Append('\n'); comma = null; }
        if (protoc2CExists) {
            s.Append('\'').Append("protoc2C").Append('\'').Append("=>"); comma = ","; this.protoc2C.WritePHP(s);
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma).Append('\n'); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append("array").Append('(').Append('\n');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('\'').Append(k1.ToString()).Append('\''); s.Append("=>");
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('\'').Append(v1.ToString()).Append('\'');
                    if (hotfixIdx != hotfixSize) { s.Append(','); s.Append('\n'); }
                }
                s.Append("/* map size: ").Append(this.hotfix.Count).Append(" */").Append(')');
            } comma = ",";
        }
        s.Append("/* ").Append(GetType().ToString()).Append(" */");
        s.Append(')');
    }

    public StringBuilder ToStringXML()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        code.Append('\n').Append("<!-- ").Append("TestHeartBeat2C").Append(".CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" -->");
        this.WriteXML(code, "TestHeartBeat2C");
        return code;
    }

    public void WriteXML(StringBuilder s, String name)
    {
        StringBuilder attrs = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        attrs.Append(' ').Append("protocId").Append('=').Append('"').Append(this.protocId.ToString()).Append('"');
        attrs.Append(' ').Append("protocCRC").Append('=').Append('"').Append(this.protocCRC.ToString()).Append('"');
        if (this.protoc2C != null) {
            this.protoc2C.WriteXML(nodes, "protoc2C");
        }
        if (this.hotfix != null && this.hotfix.Count > 0) {
            nodes.Append('\n').Append('<').Append("hotfix").Append('>');
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                nodes.Append('\n');
                String k1 = hotfixIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1);
                nodes.Append('"').Append('/').Append('>');
                String v1 = hotfixIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("hotfix").Append('>');
        }
        s.Append('\n').Append('<').Append(name).Append(attrs);
        if (nodes.Length == 0) {
            s.Append('/').Append('>');
        } else {
            s.Append('>').Append(nodes);
            s.Append('<').Append('/').Append(name).Append('>');
        }
    } //TestHeartBeat2C::WriteXML(...)

} //class: TestHeartBeat2C
/*
1@test.protoc.TestHeartBeat2C/uint16/uint32/Test.Protoc.Protoc2C/map-string-string
+@test.protoc.Protoc2C/map-string-string
*/
} //namespace: Test.Protoc