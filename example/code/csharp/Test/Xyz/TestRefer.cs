/*===-----------------------------*  C#  *---------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace Test.Xyz {

using System.Collections.Generic;
using System.IO;
using System.Text;
using System;
using Test.Abc;

/// 引用类型测试.
public sealed class TestRefer
: Invar.BinaryDecode
, Invar.BinaryEncode
, Invar.JSONEncode
, Invar.XMLEncode
{
    public const uint CRC32 = 0xC9B6DDD6;

    private SByte                     numberi08    = -1;
    private Int16                     numberi16    = -1;
    private Int32                     numberi32    = -1;
    private Int64                     numberi64    = -1L;
    private Byte                      numberu08    = 0;
    private UInt16                    numberu16    = 0;
    private UInt32                    numberu32    = 0;
    private UInt64                    numberu64    = 0L;
    private Single                    numberSingle = 0.0F;
    private Double                    numberDouble = 0.00;
    private Boolean                   boolValue    = false;
    private String                    stringValue  = "";
    private Gender                    enumValue    = Gender.NONE;
    private Custom                    other        = new Custom();
    private TestRefer                 self         = null;
    private List<SByte>               listI08      = new List<SByte>();
    private Dictionary<SByte,SByte>   dictI08      = new Dictionary<SByte,SByte>();
    private Dictionary<String,String> hotfix       = null; // [AutoAdd] Hotfix.

    /// .
    [Invar.InvarRule("int8", "0")]
    public SByte GetNumberi08() { return this.numberi08; }

    /// .
    [Invar.InvarRule("int16", "1")]
    public Int16 GetNumberi16() { return this.numberi16; }

    /// .
    [Invar.InvarRule("int32", "2")]
    public Int32 GetNumberi32() { return this.numberi32; }

    /// .
    [Invar.InvarRule("int64", "3")]
    public Int64 GetNumberi64() { return this.numberi64; }

    /// .
    [Invar.InvarRule("uint8", "4")]
    public Byte GetNumberu08() { return this.numberu08; }

    /// .
    [Invar.InvarRule("uint16", "5")]
    public UInt16 GetNumberu16() { return this.numberu16; }

    /// .
    [Invar.InvarRule("uint32", "6")]
    public UInt32 GetNumberu32() { return this.numberu32; }

    /// .
    [Invar.InvarRule("uint64", "7")]
    public UInt64 GetNumberu64() { return this.numberu64; }

    /// .
    [Invar.InvarRule("float", "8")]
    public Single GetNumberSingle() { return this.numberSingle; }

    /// .
    [Invar.InvarRule("double", "9")]
    public Double GetNumberDouble() { return this.numberDouble; }

    /// .
    [Invar.InvarRule("bool", "10")]
    public Boolean GetBoolValue() { return this.boolValue; }

    /// .
    [Invar.InvarRule("string", "11")]
    public String GetStringValue() { return this.stringValue; }

    /// .
    [Invar.InvarRule("Test.Abc.Gender", "12")]
    public Gender GetEnumValue() { return this.enumValue; }

    /// .
    [Invar.InvarRule("Test.Abc.Custom", "13")]
    public Custom GetOther() { return this.other; }

    /// .
    [Invar.InvarRule("Test.Xyz.TestRefer", "14")]
    public TestRefer GetSelf() { return this.self; }

    /// .
    [Invar.InvarRule("vec<int8>", "15")]
    public List<SByte> GetListI08() { return this.listI08; }

    /// .
    [Invar.InvarRule("map<int8,int8>", "16")]
    public Dictionary<SByte,SByte> GetDictI08() { return this.dictI08; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "17")]
    public Dictionary<String,String> GetHotfix() { return this.hotfix; }

    /// .
    [Invar.InvarRule("int8", "0")]
    public TestRefer SetNumberi08(SByte value) { this.numberi08 = value; return this; }

    /// .
    [Invar.InvarRule("int16", "1")]
    public TestRefer SetNumberi16(Int16 value) { this.numberi16 = value; return this; }

    /// .
    [Invar.InvarRule("int32", "2")]
    public TestRefer SetNumberi32(Int32 value) { this.numberi32 = value; return this; }

    /// .
    [Invar.InvarRule("int64", "3")]
    public TestRefer SetNumberi64(Int64 value) { this.numberi64 = value; return this; }

    /// .
    [Invar.InvarRule("uint8", "4")]
    public TestRefer SetNumberu08(Byte value) { this.numberu08 = value; return this; }

    /// .
    [Invar.InvarRule("uint16", "5")]
    public TestRefer SetNumberu16(UInt16 value) { this.numberu16 = value; return this; }

    /// .
    [Invar.InvarRule("uint32", "6")]
    public TestRefer SetNumberu32(UInt32 value) { this.numberu32 = value; return this; }

    /// .
    [Invar.InvarRule("uint64", "7")]
    public TestRefer SetNumberu64(UInt64 value) { this.numberu64 = value; return this; }

    /// .
    [Invar.InvarRule("float", "8")]
    public TestRefer SetNumberSingle(Single value) { this.numberSingle = value; return this; }

    /// .
    [Invar.InvarRule("double", "9")]
    public TestRefer SetNumberDouble(Double value) { this.numberDouble = value; return this; }

    /// .
    [Invar.InvarRule("bool", "10")]
    public TestRefer SetBoolValue(Boolean value) { this.boolValue = value; return this; }

    /// .
    [Invar.InvarRule("string", "11")]
    public TestRefer SetStringValue(String value) { this.stringValue = value; return this; }

    /// .
    [Invar.InvarRule("Test.Abc.Gender", "12")]
    public TestRefer SetEnumValue(Gender value) { this.enumValue = value; return this; }

    /// .
    [Invar.InvarRule("Test.Abc.Custom", "13")]
    public TestRefer SetOther(Custom value) { this.other = value; return this; }

    /// .
    [Invar.InvarRule("Test.Xyz.TestRefer", "14")]
    public TestRefer SetSelf(TestRefer value) { this.self = value; return this; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "17")]
    public TestRefer SetHotfix(Dictionary<String,String> value) { this.hotfix = value; return this; }

    public TestRefer Reuse()
    {
        this.numberi08   = -1;
        this.numberi16   = -1;
        this.numberi32   = -1;
        this.numberi64   = -1L;
        this.numberu08   = 0;
        this.numberu16   = 0;
        this.numberu32   = 0;
        this.numberu64   = 0L;
        this.numberSingle = 0.0F;
        this.numberDouble = 0.00;
        this.boolValue   = false;
        this.stringValue = "";
        this.enumValue   = Gender.NONE;
        this.other.Reuse();
        if (this.self != null) { this.self.Reuse(); }
        this.listI08.Clear();
        this.dictI08.Clear();
        if (this.hotfix != null) { this.hotfix.Clear(); }
        return this;
    } //TestRefer::Reuse()

    public TestRefer Copy(TestRefer from_)
    {
        if (null == from_ || this == from_) {
            return this;
        }
        this.numberi08 = from_.numberi08;
        this.numberi16 = from_.numberi16;
        this.numberi32 = from_.numberi32;
        this.numberi64 = from_.numberi64;
        this.numberu08 = from_.numberu08;
        this.numberu16 = from_.numberu16;
        this.numberu32 = from_.numberu32;
        this.numberu64 = from_.numberu64;
        this.numberSingle = from_.numberSingle;
        this.numberDouble = from_.numberDouble;
        this.boolValue = from_.boolValue;
        this.stringValue = from_.stringValue;
        this.enumValue = from_.enumValue;
        this.other.Copy(from_.other);
        if (null == from_.self) {
            this.self = null;
        } else {
            if (null == this.self) { this.self = new TestRefer(); }
            this.self.Copy(from_.self);
        }
        this.listI08.Clear();
        this.listI08.AddRange(from_.listI08);
        this.dictI08.Clear();
        foreach (var dictI08Iter in from_.dictI08) {
            this.dictI08.Add(dictI08Iter.Key, dictI08Iter.Value);
        }
        if (null == from_.hotfix) {
            this.hotfix = null;
        } else {
            if (null == this.hotfix) { this.hotfix = new Dictionary<String,String>(); }
            else { this.hotfix.Clear(); }
            foreach (var hotfixIter in from_.hotfix) {
                this.hotfix.Add(hotfixIter.Key, hotfixIter.Value);
            }
        }
        return this;
    } //TestRefer::Copy(...)

    public void Read(BinaryReader r)
    {
        this.numberi08 = r.ReadSByte();
        this.numberi16 = r.ReadInt16();
        this.numberi32 = r.ReadInt32();
        this.numberi64 = r.ReadInt64();
        this.numberu08 = r.ReadByte();
        this.numberu16 = r.ReadUInt16();
        this.numberu32 = r.ReadUInt32();
        this.numberu64 = r.ReadUInt64();
        this.numberSingle = r.ReadSingle();
        this.numberDouble = r.ReadDouble();
        this.boolValue = r.ReadBoolean();
        this.stringValue = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
        this.enumValue = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
        this.other.Read(r);
        sbyte selfExists = r.ReadSByte();
        if ((sbyte)0x01 == selfExists) {
            if (this.self == null) { this.self = new TestRefer(); }
            this.self.Read(r);
        }
        else if ((sbyte)0x00 == selfExists) { this.self = null; }
        else { throw new IOException("Protoc read error: The value of 'selfExists' is invalid.", 497); }
        UInt32 lenListI08 = r.ReadUInt32();
        for (UInt32 iListI08 = 0; iListI08 < lenListI08; iListI08++) {
            SByte n1 = r.ReadSByte();
            this.listI08.Add(n1);
        }
        UInt32 lenDictI08 = r.ReadUInt32();
        for (UInt32 iDictI08 = 0; iDictI08 < lenDictI08; iDictI08++) {
            SByte k1 = r.ReadSByte();
            SByte v1 = r.ReadSByte();
            if (!this.dictI08.ContainsKey(k1)) {
                this.dictI08.Add(k1, v1);
            } else {
                this.dictI08[k1] = v1;
            }
        }
        sbyte hotfixExists = r.ReadSByte();
        if ((sbyte)0x01 == hotfixExists) {
            if (this.hotfix == null) { this.hotfix = new Dictionary<String,String>(); }
            UInt32 lenHotfix = r.ReadUInt32();
            for (UInt32 iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
                String k1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                String v1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                if (!this.hotfix.ContainsKey(k1)) {
                    this.hotfix.Add(k1, v1);
                } else {
                    this.hotfix[k1] = v1;
                }
            }
        }
        else if ((sbyte)0x00 == hotfixExists) { this.hotfix = null; }
        else { throw new IOException("Protoc read error: The value of 'hotfixExists' is invalid.", 498); }
    } //TestRefer::Read(...)

    public void Write(BinaryWriter w)
    {
        w.Write(this.numberi08);
        w.Write(this.numberi16);
        w.Write(this.numberi32);
        w.Write(this.numberi64);
        w.Write(this.numberu08);
        w.Write(this.numberu16);
        w.Write(this.numberu32);
        w.Write(this.numberu64);
        w.Write(this.numberSingle);
        w.Write(this.numberDouble);
        w.Write(this.boolValue);
        byte[] stringValueBytes = Encoding.UTF8.GetBytes(this.stringValue);
        w.Write(stringValueBytes.Length);
        w.Write(stringValueBytes);
        w.Write((Int32)this.enumValue);
        this.other.Write(w);
        if (this.self != null) {
            w.Write((sbyte)0x01);
            this.self.Write(w);
        } else {
            w.Write((sbyte)0x00);
        }
        w.Write(this.listI08.Count);
        foreach (SByte n1 in this.listI08) {
            w.Write(n1);
        }
        w.Write(this.dictI08.Count);
        foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) {
            SByte k1 = dictI08Iter.Key;
            w.Write(k1);
            SByte v1 = dictI08Iter.Value;
            w.Write(v1);
        }
        if (this.hotfix != null) {
            w.Write((sbyte)0x01);
            w.Write(this.hotfix.Count);
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                String k1 = hotfixIter.Key;
                byte[] k1Bytes = Encoding.UTF8.GetBytes(k1);
                w.Write(k1Bytes.Length);
                w.Write(k1Bytes);
                String v1 = hotfixIter.Value;
                byte[] v1Bytes = Encoding.UTF8.GetBytes(v1);
                w.Write(v1Bytes.Length);
                w.Write(v1Bytes);
            }
        } else {
            w.Write((sbyte)0x00);
        }
    } //TestRefer::Write(...)

    public override String ToString()
    {
        StringBuilder result = new StringBuilder();
        result.Append('{').Append(' ');
        result.Append(GetType().ToString());
        result.Append(',').Append(' ').Append("numberi08").Append(':');
        result.Append(this.numberi08.ToString());
        result.Append(',').Append(' ').Append("numberi16").Append(':');
        result.Append(this.numberi16.ToString());
        result.Append(',').Append(' ').Append("numberi32").Append(':');
        result.Append(this.numberi32.ToString());
        result.Append(',').Append(' ').Append("numberi64").Append(':');
        result.Append(this.numberi64.ToString());
        result.Append(',').Append(' ').Append("numberu08").Append(':');
        result.Append(this.numberu08.ToString());
        result.Append(',').Append(' ').Append("numberu16").Append(':');
        result.Append(this.numberu16.ToString());
        result.Append(',').Append(' ').Append("numberu32").Append(':');
        result.Append(this.numberu32.ToString());
        result.Append(',').Append(' ').Append("numberu64").Append(':');
        result.Append(this.numberu64.ToString());
        result.Append(',').Append(' ').Append("numberSingle").Append(':');
        result.Append(this.numberSingle.ToString());
        result.Append(',').Append(' ').Append("numberDouble").Append(':');
        result.Append(this.numberDouble.ToString());
        result.Append(',').Append(' ').Append("boolValue").Append(':');
        result.Append(this.boolValue.ToString());
        result.Append(',').Append(' ').Append("stringValue").Append(':');
        result.Append("\"" + this.stringValue + "\"");
        result.Append(',').Append(' ').Append("enumValue").Append(':');
        result.Append(this.enumValue.ToString());
        result.Append(',').Append(' ').Append("other").Append(':');
        result.Append("<Custom>");
        result.Append(',').Append(' ').Append("self").Append(':');
        if (this.self != null) { result.Append("<TestRefer>"); }
        else { result.Append("null"); }
        result.Append(',').Append(' ').Append("listI08").Append(':');
        result.Append("(" + this.listI08.Count + ")");
        result.Append(',').Append(' ').Append("dictI08").Append(':');
        result.Append("[" + this.dictI08.Count + "]");
        result.Append(',').Append(' ').Append("hotfix").Append(':');
        if (this.hotfix != null) { result.Append("[" + this.hotfix.Count + "]"); }
        else { result.Append("null"); }
        result.Append(' ').Append('}');
        return result.ToString();
    } //TestRefer::ToString()

    public StringBuilder ToStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.WriteJSON(code);
        return code;
    }

    public void WriteJSON(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        s.Append('"').Append("numberi08").Append('"').Append(':'); comma = ","; s.Append(this.numberi08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberi16").Append('"').Append(':'); comma = ","; s.Append(this.numberi16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberi32").Append('"').Append(':'); comma = ","; s.Append(this.numberi32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberi64").Append('"').Append(':'); comma = ","; s.Append(this.numberi64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberu08").Append('"').Append(':'); comma = ","; s.Append(this.numberu08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberu16").Append('"').Append(':'); comma = ","; s.Append(this.numberu16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberu32").Append('"').Append(':'); comma = ","; s.Append(this.numberu32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberu64").Append('"').Append(':'); comma = ","; s.Append(this.numberu64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberSingle").Append('"').Append(':'); comma = ","; s.Append(this.numberSingle.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberDouble").Append('"').Append(':'); comma = ","; s.Append(this.numberDouble.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("boolValue").Append('"').Append(':'); comma = ","; s.Append(this.boolValue.ToString().ToLower());
        bool stringValueExists = !String.IsNullOrEmpty(this.stringValue);
        if (!String.IsNullOrEmpty(comma) && stringValueExists) { s.Append(comma); comma = null; }
        if (stringValueExists) {
            s.Append('"').Append("stringValue").Append('"').Append(':'); comma = ","; s.Append('"').Append(this.stringValue.ToString()).Append('"');
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("enumValue").Append('"').Append(':'); comma = ","; s.Append((int)this.enumValue);;
        bool otherExists = (null != this.other);
        if (!String.IsNullOrEmpty(comma) && otherExists) { s.Append(comma); comma = null; }
        if (otherExists) {
            s.Append('"').Append("other").Append('"').Append(':'); comma = ","; this.other.WriteJSON(s);
        }
        bool selfExists = (null != this.self);
        if (!String.IsNullOrEmpty(comma) && selfExists) { s.Append(comma); comma = null; }
        if (selfExists) {
            s.Append('"').Append("self").Append('"').Append(':'); comma = ","; this.self.WriteJSON(s);
        }
        bool listI08Exists = (null != this.listI08 && this.listI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI08Exists) { s.Append(comma); comma = null; }
        if (listI08Exists) { s.Append('"').Append("listI08").Append('"').Append(':'); comma = ","; }
        int listI08Size = (null == this.listI08 ? 0 : this.listI08.Count);
        if (listI08Size > 0) {
            s.Append('\n').Append('[');
            int listI08Idx = 0;
            foreach (SByte n1 in this.listI08) { /* vec.for: this.listI08 */
                ++listI08Idx;
                s.Append(n1.ToString());
                if (listI08Idx != listI08Size) { s.Append(','); }
            }
            s.Append(']');
        }
        bool dictI08Exists = (null != this.dictI08 && this.dictI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI08Exists) { s.Append(comma); comma = null; }
        if (dictI08Exists) { s.Append('"').Append("dictI08").Append('"').Append(':'); comma = ","; }
        int dictI08Size = (null == this.dictI08 ? 0 : this.dictI08.Count);
        if (dictI08Size > 0) {
            s.Append('\n').Append('{');
            int dictI08Idx = 0;
            foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) { /* map.for: this.dictI08 */
                ++dictI08Idx;
                SByte k1 = dictI08Iter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                SByte v1 = dictI08Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI08Idx != dictI08Size) { s.Append(','); }
            }
            s.Append('}');
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"'); s.Append('"').Append(k1.ToString()).Append('"'); s.Append('"').Append(':');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                }
                s.Append('}');
            } comma = ",";
        }
        s.Append('}').Append('\n');
    } //TestRefer::WriteJSON(...)

    public StringBuilder ToStringLua()
    {
        StringBuilder code = new StringBuilder();
        code.Append("-- TestRefer.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" --").Append('\n');
        code.Append("local table=");
        this.WriteLua(code); code.Append(';');
        return code;
    }

    public void WriteLua(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        s.Append("numberi08").Append('='); comma = ","; s.Append(this.numberi08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberi16").Append('='); comma = ","; s.Append(this.numberi16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberi32").Append('='); comma = ","; s.Append(this.numberi32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberi64").Append('='); comma = ","; s.Append(this.numberi64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberu08").Append('='); comma = ","; s.Append(this.numberu08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberu16").Append('='); comma = ","; s.Append(this.numberu16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberu32").Append('='); comma = ","; s.Append(this.numberu32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberu64").Append('='); comma = ","; s.Append(this.numberu64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberSingle").Append('='); comma = ","; s.Append(this.numberSingle.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberDouble").Append('='); comma = ","; s.Append(this.numberDouble.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("boolValue").Append('='); comma = ","; s.Append(this.boolValue.ToString().ToLower());
        bool stringValueExists = !String.IsNullOrEmpty(this.stringValue);
        if (!String.IsNullOrEmpty(comma) && stringValueExists) { s.Append(comma); comma = null; }
        if (stringValueExists) {
            s.Append("stringValue").Append('='); comma = ","; s.Append('"').Append(this.stringValue.ToString()).Append('"');
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("enumValue").Append('='); comma = ","; s.Append((int)this.enumValue);;
        bool otherExists = (null != this.other);
        if (!String.IsNullOrEmpty(comma) && otherExists) { s.Append(comma); comma = null; }
        if (otherExists) {
            s.Append("other").Append('='); comma = ","; this.other.WriteLua(s);
        }
        bool selfExists = (null != this.self);
        if (!String.IsNullOrEmpty(comma) && selfExists) { s.Append(comma); comma = null; }
        if (selfExists) {
            s.Append("self").Append('='); comma = ","; this.self.WriteLua(s);
        }
        bool listI08Exists = (null != this.listI08 && this.listI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI08Exists) { s.Append(comma); comma = null; }
        if (listI08Exists) { s.Append("listI08").Append('='); comma = ","; }
        int listI08Size = (null == this.listI08 ? 0 : this.listI08.Count);
        if (listI08Size > 0) {
            s.Append('\n').Append('{');
            int listI08Idx = 0;
            foreach (SByte n1 in this.listI08) { /* vec.for: this.listI08 */
                ++listI08Idx;
                s.Append(n1.ToString());
                if (listI08Idx != listI08Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictI08Exists = (null != this.dictI08 && this.dictI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI08Exists) { s.Append(comma); comma = null; }
        if (dictI08Exists) { s.Append("dictI08").Append('='); comma = ","; }
        int dictI08Size = (null == this.dictI08 ? 0 : this.dictI08.Count);
        if (dictI08Size > 0) {
            s.Append('\n').Append('{');
            int dictI08Idx = 0;
            foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) { /* map.for: this.dictI08 */
                ++dictI08Idx;
                SByte k1 = dictI08Iter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                SByte v1 = dictI08Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI08Idx != dictI08Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"').Append(k1.ToString()).Append('"'); s.Append('=');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        s.Append('}').Append('\n');
    }

    public StringBuilder ToStringPHP()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?php ").Append("/* TestRefer.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" */").Append('\n');
        code.Append('\n').Append("return ");
        this.WritePHP(code); code.Append(';').Append('\n');
        return code;
    }

    public void WritePHP(StringBuilder s)
    {
        s.Append("array").Append('(').Append('\n');
        string comma = null;
        s.Append('\'').Append("numberi08").Append('\'').Append("=>"); comma = ","; s.Append(this.numberi08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberi16").Append('\'').Append("=>"); comma = ","; s.Append(this.numberi16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberi32").Append('\'').Append("=>"); comma = ","; s.Append(this.numberi32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberi64").Append('\'').Append("=>"); comma = ","; s.Append(this.numberi64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberu08").Append('\'').Append("=>"); comma = ","; s.Append(this.numberu08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberu16").Append('\'').Append("=>"); comma = ","; s.Append(this.numberu16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberu32").Append('\'').Append("=>"); comma = ","; s.Append(this.numberu32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberu64").Append('\'').Append("=>"); comma = ","; s.Append(this.numberu64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberSingle").Append('\'').Append("=>"); comma = ","; s.Append(this.numberSingle.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberDouble").Append('\'').Append("=>"); comma = ","; s.Append(this.numberDouble.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("boolValue").Append('\'').Append("=>"); comma = ","; s.Append(this.boolValue.ToString().ToLower());
        bool stringValueExists = !String.IsNullOrEmpty(this.stringValue);
        if (!String.IsNullOrEmpty(comma) && stringValueExists) { s.Append(comma).Append('\n'); comma = null; }
        if (stringValueExists) {
            s.Append('\'').Append("stringValue").Append('\'').Append("=>"); comma = ","; s.Append('\'').Append(this.stringValue.ToString()).Append('\'');
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("enumValue").Append('\'').Append("=>"); comma = ","; s.Append((int)this.enumValue);
        s.Append("/*Gender::").Append(this.enumValue.ToString()).Append("*/");
        bool otherExists = (null != this.other);
        if (!String.IsNullOrEmpty(comma) && otherExists) { s.Append(comma).Append('\n'); comma = null; }
        if (otherExists) {
            s.Append('\'').Append("other").Append('\'').Append("=>"); comma = ","; this.other.WritePHP(s);
        }
        bool selfExists = (null != this.self);
        if (!String.IsNullOrEmpty(comma) && selfExists) { s.Append(comma).Append('\n'); comma = null; }
        if (selfExists) {
            s.Append('\'').Append("self").Append('\'').Append("=>"); comma = ","; this.self.WritePHP(s);
        }
        bool listI08Exists = (null != this.listI08 && this.listI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI08Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (listI08Exists) { s.Append('\'').Append("listI08").Append('\'').Append("=>"); comma = ","; }
        int listI08Size = (null == this.listI08 ? 0 : this.listI08.Count);
        if (listI08Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int listI08Idx = 0;
            foreach (SByte n1 in this.listI08) { /* vec.for: this.listI08 */
                ++listI08Idx;
                s.Append(n1.ToString());
                if (listI08Idx != listI08Size) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.listI08.Count).Append(" */").Append(')');
        }
        bool dictI08Exists = (null != this.dictI08 && this.dictI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI08Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictI08Exists) { s.Append('\'').Append("dictI08").Append('\'').Append("=>"); comma = ","; }
        int dictI08Size = (null == this.dictI08 ? 0 : this.dictI08.Count);
        if (dictI08Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictI08Idx = 0;
            foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) { /* map.for: this.dictI08 */
                ++dictI08Idx;
                SByte k1 = dictI08Iter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                SByte v1 = dictI08Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI08Idx != dictI08Size) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictI08.Count).Append(" */").Append(')');
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma).Append('\n'); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append("array").Append('(').Append('\n');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('\'').Append(k1.ToString()).Append('\''); s.Append("=>");
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('\'').Append(v1.ToString()).Append('\'');
                    if (hotfixIdx != hotfixSize) { s.Append(','); s.Append('\n'); }
                }
                s.Append("/* map size: ").Append(this.hotfix.Count).Append(" */").Append(')');
            } comma = ",";
        }
        s.Append("/* ").Append(GetType().ToString()).Append(" */");
        s.Append(')');
    }

    public StringBuilder ToStringXML()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        code.Append('\n').Append("<!-- ").Append("TestRefer").Append(".CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" -->");
        this.WriteXML(code, "TestRefer");
        return code;
    }

    public void WriteXML(StringBuilder s, String name)
    {
        StringBuilder attrs = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        attrs.Append(' ').Append("numberi08").Append('=').Append('"').Append(this.numberi08.ToString()).Append('"');
        attrs.Append(' ').Append("numberi16").Append('=').Append('"').Append(this.numberi16.ToString()).Append('"');
        attrs.Append(' ').Append("numberi32").Append('=').Append('"').Append(this.numberi32.ToString()).Append('"');
        attrs.Append(' ').Append("numberi64").Append('=').Append('"').Append(this.numberi64.ToString()).Append('"');
        attrs.Append(' ').Append("numberu08").Append('=').Append('"').Append(this.numberu08.ToString()).Append('"');
        attrs.Append(' ').Append("numberu16").Append('=').Append('"').Append(this.numberu16.ToString()).Append('"');
        attrs.Append(' ').Append("numberu32").Append('=').Append('"').Append(this.numberu32.ToString()).Append('"');
        attrs.Append(' ').Append("numberu64").Append('=').Append('"').Append(this.numberu64.ToString()).Append('"');
        attrs.Append(' ').Append("numberSingle").Append('=').Append('"').Append(this.numberSingle.ToString()).Append('"');
        attrs.Append(' ').Append("numberDouble").Append('=').Append('"').Append(this.numberDouble.ToString()).Append('"');
        attrs.Append(' ').Append("boolValue").Append('=').Append('"').Append(this.boolValue.ToString()).Append('"');
        attrs.Append(' ').Append("stringValue").Append('=').Append('"').Append(this.stringValue).Append('"');
        attrs.Append(' ').Append("enumValue").Append('=').Append('"').Append(this.enumValue.ToString()).Append('"');
        this.other.WriteXML(nodes, "other");
        if (this.self != null) {
            this.self.WriteXML(nodes, "self");
        }
        if (this.listI08.Count > 0) {
            nodes.Append('\n').Append('<').Append("listI08").Append('>');
            foreach (SByte n1 in this.listI08) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listI08").Append('>');
        }
        if (this.dictI08.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictI08").Append('>');
            foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) {
                nodes.Append('\n');
                SByte k1 = dictI08Iter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                SByte v1 = dictI08Iter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictI08").Append('>');
        }
        if (this.hotfix != null && this.hotfix.Count > 0) {
            nodes.Append('\n').Append('<').Append("hotfix").Append('>');
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                nodes.Append('\n');
                String k1 = hotfixIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1);
                nodes.Append('"').Append('/').Append('>');
                String v1 = hotfixIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("hotfix").Append('>');
        }
        s.Append('\n').Append('<').Append(name).Append(attrs);
        if (nodes.Length == 0) {
            s.Append('/').Append('>');
        } else {
            s.Append('>').Append(nodes);
            s.Append('<').Append('/').Append(name).Append('>');
        }
    } //TestRefer::WriteXML(...)

} /* class: TestRefer */
/*
1@test.xyz.TestRefer/int8/int16/int32/int64/uint8/uint16/uint32/uint64/float/double/bool/string/int3
  2/test.abc.Custom/test.xyz.TestRefer/vec-int8/map-int8-int8/map-string-string
+@test.abc.Custom/int32/test.abc.TestBasic/test.xyz.Conflict/test.abc.Conflict/vec-test.abc.Custom/i
  nt32/string/string/test.abc.Custom/test.abc.Custom/string
*/
} //namespace: Test.Xyz