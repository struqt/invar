/*===-----------------------------*  C#  *---------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace Test.Xyz {

using System.Collections.Generic;
using System.IO;
using System.Text;
using System;
using Test.Abc;

/// 测试基本的映射类型.
public sealed class TestDict
: Invar.BinaryDecode
, Invar.BinaryEncode
, Invar.JSONEncode
, Invar.XMLEncode
{
    public const uint CRC32 = 0x55C2A624;

    private Dictionary<SByte,SByte>     dictI08     = new Dictionary<SByte,SByte>(); // 有符号的8位整数.
    private Dictionary<Int16,Int16>     dictI16     = new Dictionary<Int16,Int16>(); // 有符号的16位整数.
    private Dictionary<Int32,Int32>     dictI32     = new Dictionary<Int32,Int32>(); // 有符号的32位整数.
    private Dictionary<Int64,Int64>     dictI64     = new Dictionary<Int64,Int64>(); // 有符号的64位整数.
    private Dictionary<Byte,Byte>       dictU08     = new Dictionary<Byte,Byte>(); // 无符号的8位整数.
    private Dictionary<UInt16,UInt16>   dictU16     = new Dictionary<UInt16,UInt16>(); // 无符号的16位整数.
    private Dictionary<UInt32,UInt32>   dictU32     = new Dictionary<UInt32,UInt32>(); // 无符号的32位整数.
    private Dictionary<UInt64,UInt64>   dictU64     = new Dictionary<UInt64,UInt64>(); // 无符号的64位整数.
    private Dictionary<Single,Single>   dictSingle  = new Dictionary<Single,Single>(); // 单精度浮点小数.
    private Dictionary<Double,Double>   dictDouble  = new Dictionary<Double,Double>(); // 双精度浮点小数.
    private Dictionary<Boolean,Boolean> dictBoolean = new Dictionary<Boolean,Boolean>(); // 布尔值.
    private Dictionary<String,String>   dictString  = new Dictionary<String,String>(); // 字符串.
    private Dictionary<Gender,Gender>   dictEnum    = new Dictionary<Gender,Gender>(); // 枚举值.
    private Dictionary<Custom,Custom>   dictStruct  = new Dictionary<Custom,Custom>(); // 自定义结构.
    private Dictionary<String,String>   hotfix      = null; // [AutoAdd] Hotfix.

    /// 有符号的8位整数.
    [Invar.InvarRule("map<int8,int8>", "0")]
    public Dictionary<SByte,SByte> GetDictI08() { return this.dictI08; }

    /// 有符号的16位整数.
    [Invar.InvarRule("map<int16,int16>", "1")]
    public Dictionary<Int16,Int16> GetDictI16() { return this.dictI16; }

    /// 有符号的32位整数.
    [Invar.InvarRule("map<int32,int32>", "2")]
    public Dictionary<Int32,Int32> GetDictI32() { return this.dictI32; }

    /// 有符号的64位整数.
    [Invar.InvarRule("map<int64,int64>", "3")]
    public Dictionary<Int64,Int64> GetDictI64() { return this.dictI64; }

    /// 无符号的8位整数.
    [Invar.InvarRule("map<uint8,uint8>", "4")]
    public Dictionary<Byte,Byte> GetDictU08() { return this.dictU08; }

    /// 无符号的16位整数.
    [Invar.InvarRule("map<uint16,uint16>", "5")]
    public Dictionary<UInt16,UInt16> GetDictU16() { return this.dictU16; }

    /// 无符号的32位整数.
    [Invar.InvarRule("map<uint32,uint32>", "6")]
    public Dictionary<UInt32,UInt32> GetDictU32() { return this.dictU32; }

    /// 无符号的64位整数.
    [Invar.InvarRule("map<uint64,uint64>", "7")]
    public Dictionary<UInt64,UInt64> GetDictU64() { return this.dictU64; }

    /// 单精度浮点小数.
    [Invar.InvarRule("map<float,float>", "8")]
    public Dictionary<Single,Single> GetDictSingle() { return this.dictSingle; }

    /// 双精度浮点小数.
    [Invar.InvarRule("map<double,double>", "9")]
    public Dictionary<Double,Double> GetDictDouble() { return this.dictDouble; }

    /// 布尔值.
    [Invar.InvarRule("map<bool,bool>", "10")]
    public Dictionary<Boolean,Boolean> GetDictBoolean() { return this.dictBoolean; }

    /// 字符串.
    [Invar.InvarRule("map<string,string>", "11")]
    public Dictionary<String,String> GetDictString() { return this.dictString; }

    /// 枚举值.
    [Invar.InvarRule("map<Test.Abc.Gender,Test.Abc.Gender>", "12")]
    public Dictionary<Gender,Gender> GetDictEnum() { return this.dictEnum; }

    /// 自定义结构.
    [Invar.InvarRule("map<Test.Abc.Custom,Test.Abc.Custom>", "13")]
    public Dictionary<Custom,Custom> GetDictStruct() { return this.dictStruct; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "14")]
    public Dictionary<String,String> GetHotfix() { return this.hotfix; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "14")]
    public TestDict SetHotfix(Dictionary<String,String> value) { this.hotfix = value; return this; }

    public TestDict Reuse()
    {
        this.dictI08.Clear();
        this.dictI16.Clear();
        this.dictI32.Clear();
        this.dictI64.Clear();
        this.dictU08.Clear();
        this.dictU16.Clear();
        this.dictU32.Clear();
        this.dictU64.Clear();
        this.dictSingle.Clear();
        this.dictDouble.Clear();
        this.dictBoolean.Clear();
        this.dictString.Clear();
        this.dictEnum.Clear();
        this.dictStruct.Clear();
        if (this.hotfix != null) { this.hotfix.Clear(); }
        return this;
    } //TestDict::Reuse()

    public TestDict Copy(TestDict from_)
    {
        if (null == from_ || this == from_) {
            return this;
        }
        this.dictI08.Clear();
        foreach (var dictI08Iter in from_.dictI08) {
            this.dictI08.Add(dictI08Iter.Key, dictI08Iter.Value);
        }
        this.dictI16.Clear();
        foreach (var dictI16Iter in from_.dictI16) {
            this.dictI16.Add(dictI16Iter.Key, dictI16Iter.Value);
        }
        this.dictI32.Clear();
        foreach (var dictI32Iter in from_.dictI32) {
            this.dictI32.Add(dictI32Iter.Key, dictI32Iter.Value);
        }
        this.dictI64.Clear();
        foreach (var dictI64Iter in from_.dictI64) {
            this.dictI64.Add(dictI64Iter.Key, dictI64Iter.Value);
        }
        this.dictU08.Clear();
        foreach (var dictU08Iter in from_.dictU08) {
            this.dictU08.Add(dictU08Iter.Key, dictU08Iter.Value);
        }
        this.dictU16.Clear();
        foreach (var dictU16Iter in from_.dictU16) {
            this.dictU16.Add(dictU16Iter.Key, dictU16Iter.Value);
        }
        this.dictU32.Clear();
        foreach (var dictU32Iter in from_.dictU32) {
            this.dictU32.Add(dictU32Iter.Key, dictU32Iter.Value);
        }
        this.dictU64.Clear();
        foreach (var dictU64Iter in from_.dictU64) {
            this.dictU64.Add(dictU64Iter.Key, dictU64Iter.Value);
        }
        this.dictSingle.Clear();
        foreach (var dictSingleIter in from_.dictSingle) {
            this.dictSingle.Add(dictSingleIter.Key, dictSingleIter.Value);
        }
        this.dictDouble.Clear();
        foreach (var dictDoubleIter in from_.dictDouble) {
            this.dictDouble.Add(dictDoubleIter.Key, dictDoubleIter.Value);
        }
        this.dictBoolean.Clear();
        foreach (var dictBooleanIter in from_.dictBoolean) {
            this.dictBoolean.Add(dictBooleanIter.Key, dictBooleanIter.Value);
        }
        this.dictString.Clear();
        foreach (var dictStringIter in from_.dictString) {
            this.dictString.Add(dictStringIter.Key, dictStringIter.Value);
        }
        this.dictEnum.Clear();
        foreach (var dictEnumIter in from_.dictEnum) {
            this.dictEnum.Add(dictEnumIter.Key, dictEnumIter.Value);
        }
        this.dictStruct.Clear();
        foreach (var dictStructIter in from_.dictStruct) {
            this.dictStruct.Add(dictStructIter.Key, dictStructIter.Value);
        }
        if (null == from_.hotfix) {
            this.hotfix = null;
        } else {
            if (null == this.hotfix) { this.hotfix = new Dictionary<String,String>(); }
            else { this.hotfix.Clear(); }
            foreach (var hotfixIter in from_.hotfix) {
                this.hotfix.Add(hotfixIter.Key, hotfixIter.Value);
            }
        }
        return this;
    } //TestDict::Copy(...)

    public void Read(BinaryReader r)
    {
        UInt32 lenDictI08 = r.ReadUInt32();
        for (UInt32 iDictI08 = 0; iDictI08 < lenDictI08; iDictI08++) {
            SByte k1 = r.ReadSByte();
            SByte v1 = r.ReadSByte();
            if (!this.dictI08.ContainsKey(k1)) {
                this.dictI08.Add(k1, v1);
            } else {
                this.dictI08[k1] = v1;
            }
        }
        UInt32 lenDictI16 = r.ReadUInt32();
        for (UInt32 iDictI16 = 0; iDictI16 < lenDictI16; iDictI16++) {
            Int16 k1 = r.ReadInt16();
            Int16 v1 = r.ReadInt16();
            if (!this.dictI16.ContainsKey(k1)) {
                this.dictI16.Add(k1, v1);
            } else {
                this.dictI16[k1] = v1;
            }
        }
        UInt32 lenDictI32 = r.ReadUInt32();
        for (UInt32 iDictI32 = 0; iDictI32 < lenDictI32; iDictI32++) {
            Int32 k1 = r.ReadInt32();
            Int32 v1 = r.ReadInt32();
            if (!this.dictI32.ContainsKey(k1)) {
                this.dictI32.Add(k1, v1);
            } else {
                this.dictI32[k1] = v1;
            }
        }
        UInt32 lenDictI64 = r.ReadUInt32();
        for (UInt32 iDictI64 = 0; iDictI64 < lenDictI64; iDictI64++) {
            Int64 k1 = r.ReadInt64();
            Int64 v1 = r.ReadInt64();
            if (!this.dictI64.ContainsKey(k1)) {
                this.dictI64.Add(k1, v1);
            } else {
                this.dictI64[k1] = v1;
            }
        }
        UInt32 lenDictU08 = r.ReadUInt32();
        for (UInt32 iDictU08 = 0; iDictU08 < lenDictU08; iDictU08++) {
            Byte k1 = r.ReadByte();
            Byte v1 = r.ReadByte();
            if (!this.dictU08.ContainsKey(k1)) {
                this.dictU08.Add(k1, v1);
            } else {
                this.dictU08[k1] = v1;
            }
        }
        UInt32 lenDictU16 = r.ReadUInt32();
        for (UInt32 iDictU16 = 0; iDictU16 < lenDictU16; iDictU16++) {
            UInt16 k1 = r.ReadUInt16();
            UInt16 v1 = r.ReadUInt16();
            if (!this.dictU16.ContainsKey(k1)) {
                this.dictU16.Add(k1, v1);
            } else {
                this.dictU16[k1] = v1;
            }
        }
        UInt32 lenDictU32 = r.ReadUInt32();
        for (UInt32 iDictU32 = 0; iDictU32 < lenDictU32; iDictU32++) {
            UInt32 k1 = r.ReadUInt32();
            UInt32 v1 = r.ReadUInt32();
            if (!this.dictU32.ContainsKey(k1)) {
                this.dictU32.Add(k1, v1);
            } else {
                this.dictU32[k1] = v1;
            }
        }
        UInt32 lenDictU64 = r.ReadUInt32();
        for (UInt32 iDictU64 = 0; iDictU64 < lenDictU64; iDictU64++) {
            UInt64 k1 = r.ReadUInt64();
            UInt64 v1 = r.ReadUInt64();
            if (!this.dictU64.ContainsKey(k1)) {
                this.dictU64.Add(k1, v1);
            } else {
                this.dictU64[k1] = v1;
            }
        }
        UInt32 lenDictSingle = r.ReadUInt32();
        for (UInt32 iDictSingle = 0; iDictSingle < lenDictSingle; iDictSingle++) {
            Single k1 = r.ReadSingle();
            Single v1 = r.ReadSingle();
            if (!this.dictSingle.ContainsKey(k1)) {
                this.dictSingle.Add(k1, v1);
            } else {
                this.dictSingle[k1] = v1;
            }
        }
        UInt32 lenDictDouble = r.ReadUInt32();
        for (UInt32 iDictDouble = 0; iDictDouble < lenDictDouble; iDictDouble++) {
            Double k1 = r.ReadDouble();
            Double v1 = r.ReadDouble();
            if (!this.dictDouble.ContainsKey(k1)) {
                this.dictDouble.Add(k1, v1);
            } else {
                this.dictDouble[k1] = v1;
            }
        }
        UInt32 lenDictBoolean = r.ReadUInt32();
        for (UInt32 iDictBoolean = 0; iDictBoolean < lenDictBoolean; iDictBoolean++) {
            Boolean k1 = r.ReadBoolean();
            Boolean v1 = r.ReadBoolean();
            if (!this.dictBoolean.ContainsKey(k1)) {
                this.dictBoolean.Add(k1, v1);
            } else {
                this.dictBoolean[k1] = v1;
            }
        }
        UInt32 lenDictString = r.ReadUInt32();
        for (UInt32 iDictString = 0; iDictString < lenDictString; iDictString++) {
            String k1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
            String v1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
            if (!this.dictString.ContainsKey(k1)) {
                this.dictString.Add(k1, v1);
            } else {
                this.dictString[k1] = v1;
            }
        }
        UInt32 lenDictEnum = r.ReadUInt32();
        for (UInt32 iDictEnum = 0; iDictEnum < lenDictEnum; iDictEnum++) {
            Gender k1 = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
            Gender v1 = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
            if (!this.dictEnum.ContainsKey(k1)) {
                this.dictEnum.Add(k1, v1);
            } else {
                this.dictEnum[k1] = v1;
            }
        }
        UInt32 lenDictStruct = r.ReadUInt32();
        for (UInt32 iDictStruct = 0; iDictStruct < lenDictStruct; iDictStruct++) {
            Custom k1 = new Custom();
            k1.Read(r);
            Custom v1 = new Custom();
            v1.Read(r);
            if (!this.dictStruct.ContainsKey(k1)) {
                this.dictStruct.Add(k1, v1);
            } else {
                this.dictStruct[k1] = v1;
            }
        }
        sbyte hotfixExists = r.ReadSByte();
        if ((sbyte)0x01 == hotfixExists) {
            if (this.hotfix == null) { this.hotfix = new Dictionary<String,String>(); }
            UInt32 lenHotfix = r.ReadUInt32();
            for (UInt32 iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
                String k1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                String v1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                if (!this.hotfix.ContainsKey(k1)) {
                    this.hotfix.Add(k1, v1);
                } else {
                    this.hotfix[k1] = v1;
                }
            }
        }
        else if ((sbyte)0x00 == hotfixExists) { this.hotfix = null; }
        else { throw new IOException("Protoc read error: The value of 'hotfixExists' is invalid.", 498); }
    } //TestDict::Read(...)

    public void Write(BinaryWriter w)
    {
        w.Write(this.dictI08.Count);
        foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) {
            SByte k1 = dictI08Iter.Key;
            w.Write(k1);
            SByte v1 = dictI08Iter.Value;
            w.Write(v1);
        }
        w.Write(this.dictI16.Count);
        foreach (KeyValuePair<Int16,Int16> dictI16Iter in this.dictI16) {
            Int16 k1 = dictI16Iter.Key;
            w.Write(k1);
            Int16 v1 = dictI16Iter.Value;
            w.Write(v1);
        }
        w.Write(this.dictI32.Count);
        foreach (KeyValuePair<Int32,Int32> dictI32Iter in this.dictI32) {
            Int32 k1 = dictI32Iter.Key;
            w.Write(k1);
            Int32 v1 = dictI32Iter.Value;
            w.Write(v1);
        }
        w.Write(this.dictI64.Count);
        foreach (KeyValuePair<Int64,Int64> dictI64Iter in this.dictI64) {
            Int64 k1 = dictI64Iter.Key;
            w.Write(k1);
            Int64 v1 = dictI64Iter.Value;
            w.Write(v1);
        }
        w.Write(this.dictU08.Count);
        foreach (KeyValuePair<Byte,Byte> dictU08Iter in this.dictU08) {
            Byte k1 = dictU08Iter.Key;
            w.Write(k1);
            Byte v1 = dictU08Iter.Value;
            w.Write(v1);
        }
        w.Write(this.dictU16.Count);
        foreach (KeyValuePair<UInt16,UInt16> dictU16Iter in this.dictU16) {
            UInt16 k1 = dictU16Iter.Key;
            w.Write(k1);
            UInt16 v1 = dictU16Iter.Value;
            w.Write(v1);
        }
        w.Write(this.dictU32.Count);
        foreach (KeyValuePair<UInt32,UInt32> dictU32Iter in this.dictU32) {
            UInt32 k1 = dictU32Iter.Key;
            w.Write(k1);
            UInt32 v1 = dictU32Iter.Value;
            w.Write(v1);
        }
        w.Write(this.dictU64.Count);
        foreach (KeyValuePair<UInt64,UInt64> dictU64Iter in this.dictU64) {
            UInt64 k1 = dictU64Iter.Key;
            w.Write(k1);
            UInt64 v1 = dictU64Iter.Value;
            w.Write(v1);
        }
        w.Write(this.dictSingle.Count);
        foreach (KeyValuePair<Single,Single> dictSingleIter in this.dictSingle) {
            Single k1 = dictSingleIter.Key;
            w.Write(k1);
            Single v1 = dictSingleIter.Value;
            w.Write(v1);
        }
        w.Write(this.dictDouble.Count);
        foreach (KeyValuePair<Double,Double> dictDoubleIter in this.dictDouble) {
            Double k1 = dictDoubleIter.Key;
            w.Write(k1);
            Double v1 = dictDoubleIter.Value;
            w.Write(v1);
        }
        w.Write(this.dictBoolean.Count);
        foreach (KeyValuePair<Boolean,Boolean> dictBooleanIter in this.dictBoolean) {
            Boolean k1 = dictBooleanIter.Key;
            w.Write(k1);
            Boolean v1 = dictBooleanIter.Value;
            w.Write(v1);
        }
        w.Write(this.dictString.Count);
        foreach (KeyValuePair<String,String> dictStringIter in this.dictString) {
            String k1 = dictStringIter.Key;
            byte[] k1Bytes = Encoding.UTF8.GetBytes(k1);
            w.Write(k1Bytes.Length);
            w.Write(k1Bytes);
            String v1 = dictStringIter.Value;
            byte[] v1Bytes = Encoding.UTF8.GetBytes(v1);
            w.Write(v1Bytes.Length);
            w.Write(v1Bytes);
        }
        w.Write(this.dictEnum.Count);
        foreach (KeyValuePair<Gender,Gender> dictEnumIter in this.dictEnum) {
            Gender k1 = dictEnumIter.Key;
            w.Write((Int32)k1);
            Gender v1 = dictEnumIter.Value;
            w.Write((Int32)v1);
        }
        w.Write(this.dictStruct.Count);
        foreach (KeyValuePair<Custom,Custom> dictStructIter in this.dictStruct) {
            Custom k1 = dictStructIter.Key;
            k1.Write(w);
            Custom v1 = dictStructIter.Value;
            v1.Write(w);
        }
        if (this.hotfix != null) {
            w.Write((sbyte)0x01);
            w.Write(this.hotfix.Count);
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                String k1 = hotfixIter.Key;
                byte[] k1Bytes = Encoding.UTF8.GetBytes(k1);
                w.Write(k1Bytes.Length);
                w.Write(k1Bytes);
                String v1 = hotfixIter.Value;
                byte[] v1Bytes = Encoding.UTF8.GetBytes(v1);
                w.Write(v1Bytes.Length);
                w.Write(v1Bytes);
            }
        } else {
            w.Write((sbyte)0x00);
        }
    } //TestDict::Write(...)

    public override String ToString()
    {
        StringBuilder result = new StringBuilder();
        result.Append('{').Append(' ');
        result.Append(GetType().ToString());
        result.Append(',').Append(' ').Append("dictI08").Append(':');
        result.Append("[" + this.dictI08.Count + "]");
        result.Append(',').Append(' ').Append("dictI16").Append(':');
        result.Append("[" + this.dictI16.Count + "]");
        result.Append(',').Append(' ').Append("dictI32").Append(':');
        result.Append("[" + this.dictI32.Count + "]");
        result.Append(',').Append(' ').Append("dictI64").Append(':');
        result.Append("[" + this.dictI64.Count + "]");
        result.Append(',').Append(' ').Append("dictU08").Append(':');
        result.Append("[" + this.dictU08.Count + "]");
        result.Append(',').Append(' ').Append("dictU16").Append(':');
        result.Append("[" + this.dictU16.Count + "]");
        result.Append(',').Append(' ').Append("dictU32").Append(':');
        result.Append("[" + this.dictU32.Count + "]");
        result.Append(',').Append(' ').Append("dictU64").Append(':');
        result.Append("[" + this.dictU64.Count + "]");
        result.Append(',').Append(' ').Append("dictSingle").Append(':');
        result.Append("[" + this.dictSingle.Count + "]");
        result.Append(',').Append(' ').Append("dictDouble").Append(':');
        result.Append("[" + this.dictDouble.Count + "]");
        result.Append(',').Append(' ').Append("dictBoolean").Append(':');
        result.Append("[" + this.dictBoolean.Count + "]");
        result.Append(',').Append(' ').Append("dictString").Append(':');
        result.Append("[" + this.dictString.Count + "]");
        result.Append(',').Append(' ').Append("dictEnum").Append(':');
        result.Append("[" + this.dictEnum.Count + "]");
        result.Append(',').Append(' ').Append("dictStruct").Append(':');
        result.Append("[" + this.dictStruct.Count + "]");
        result.Append(',').Append(' ').Append("hotfix").Append(':');
        if (this.hotfix != null) { result.Append("[" + this.hotfix.Count + "]"); }
        else { result.Append("null"); }
        result.Append(' ').Append('}');
        return result.ToString();
    } //TestDict::ToString()

    public StringBuilder ToStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.WriteJSON(code);
        return code;
    }

    public void WriteJSON(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        bool dictI08Exists = (null != this.dictI08 && this.dictI08.Count > 0);
        if (dictI08Exists) { s.Append('"').Append("dictI08").Append('"').Append(':'); comma = ","; }
        int dictI08Size = (null == this.dictI08 ? 0 : this.dictI08.Count);
        if (dictI08Size > 0) {
            s.Append('\n').Append('{');
            int dictI08Idx = 0;
            foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) { /* map.for: this.dictI08 */
                ++dictI08Idx;
                SByte k1 = dictI08Iter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                SByte v1 = dictI08Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI08Idx != dictI08Size) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictI16Exists = (null != this.dictI16 && this.dictI16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI16Exists) { s.Append(comma); comma = null; }
        if (dictI16Exists) { s.Append('"').Append("dictI16").Append('"').Append(':'); comma = ","; }
        int dictI16Size = (null == this.dictI16 ? 0 : this.dictI16.Count);
        if (dictI16Size > 0) {
            s.Append('\n').Append('{');
            int dictI16Idx = 0;
            foreach (KeyValuePair<Int16,Int16> dictI16Iter in this.dictI16) { /* map.for: this.dictI16 */
                ++dictI16Idx;
                Int16 k1 = dictI16Iter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                Int16 v1 = dictI16Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI16Idx != dictI16Size) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictI32Exists = (null != this.dictI32 && this.dictI32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI32Exists) { s.Append(comma); comma = null; }
        if (dictI32Exists) { s.Append('"').Append("dictI32").Append('"').Append(':'); comma = ","; }
        int dictI32Size = (null == this.dictI32 ? 0 : this.dictI32.Count);
        if (dictI32Size > 0) {
            s.Append('\n').Append('{');
            int dictI32Idx = 0;
            foreach (KeyValuePair<Int32,Int32> dictI32Iter in this.dictI32) { /* map.for: this.dictI32 */
                ++dictI32Idx;
                Int32 k1 = dictI32Iter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                Int32 v1 = dictI32Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI32Idx != dictI32Size) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictI64Exists = (null != this.dictI64 && this.dictI64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI64Exists) { s.Append(comma); comma = null; }
        if (dictI64Exists) { s.Append('"').Append("dictI64").Append('"').Append(':'); comma = ","; }
        int dictI64Size = (null == this.dictI64 ? 0 : this.dictI64.Count);
        if (dictI64Size > 0) {
            s.Append('\n').Append('{');
            int dictI64Idx = 0;
            foreach (KeyValuePair<Int64,Int64> dictI64Iter in this.dictI64) { /* map.for: this.dictI64 */
                ++dictI64Idx;
                Int64 k1 = dictI64Iter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                Int64 v1 = dictI64Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI64Idx != dictI64Size) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictU08Exists = (null != this.dictU08 && this.dictU08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU08Exists) { s.Append(comma); comma = null; }
        if (dictU08Exists) { s.Append('"').Append("dictU08").Append('"').Append(':'); comma = ","; }
        int dictU08Size = (null == this.dictU08 ? 0 : this.dictU08.Count);
        if (dictU08Size > 0) {
            s.Append('\n').Append('{');
            int dictU08Idx = 0;
            foreach (KeyValuePair<Byte,Byte> dictU08Iter in this.dictU08) { /* map.for: this.dictU08 */
                ++dictU08Idx;
                Byte k1 = dictU08Iter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                Byte v1 = dictU08Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU08Idx != dictU08Size) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictU16Exists = (null != this.dictU16 && this.dictU16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU16Exists) { s.Append(comma); comma = null; }
        if (dictU16Exists) { s.Append('"').Append("dictU16").Append('"').Append(':'); comma = ","; }
        int dictU16Size = (null == this.dictU16 ? 0 : this.dictU16.Count);
        if (dictU16Size > 0) {
            s.Append('\n').Append('{');
            int dictU16Idx = 0;
            foreach (KeyValuePair<UInt16,UInt16> dictU16Iter in this.dictU16) { /* map.for: this.dictU16 */
                ++dictU16Idx;
                UInt16 k1 = dictU16Iter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                UInt16 v1 = dictU16Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU16Idx != dictU16Size) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictU32Exists = (null != this.dictU32 && this.dictU32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU32Exists) { s.Append(comma); comma = null; }
        if (dictU32Exists) { s.Append('"').Append("dictU32").Append('"').Append(':'); comma = ","; }
        int dictU32Size = (null == this.dictU32 ? 0 : this.dictU32.Count);
        if (dictU32Size > 0) {
            s.Append('\n').Append('{');
            int dictU32Idx = 0;
            foreach (KeyValuePair<UInt32,UInt32> dictU32Iter in this.dictU32) { /* map.for: this.dictU32 */
                ++dictU32Idx;
                UInt32 k1 = dictU32Iter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                UInt32 v1 = dictU32Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU32Idx != dictU32Size) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictU64Exists = (null != this.dictU64 && this.dictU64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU64Exists) { s.Append(comma); comma = null; }
        if (dictU64Exists) { s.Append('"').Append("dictU64").Append('"').Append(':'); comma = ","; }
        int dictU64Size = (null == this.dictU64 ? 0 : this.dictU64.Count);
        if (dictU64Size > 0) {
            s.Append('\n').Append('{');
            int dictU64Idx = 0;
            foreach (KeyValuePair<UInt64,UInt64> dictU64Iter in this.dictU64) { /* map.for: this.dictU64 */
                ++dictU64Idx;
                UInt64 k1 = dictU64Iter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                UInt64 v1 = dictU64Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU64Idx != dictU64Size) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictSingleExists = (null != this.dictSingle && this.dictSingle.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictSingleExists) { s.Append(comma); comma = null; }
        if (dictSingleExists) { s.Append('"').Append("dictSingle").Append('"').Append(':'); comma = ","; }
        int dictSingleSize = (null == this.dictSingle ? 0 : this.dictSingle.Count);
        if (dictSingleSize > 0) {
            s.Append('\n').Append('{');
            int dictSingleIdx = 0;
            foreach (KeyValuePair<Single,Single> dictSingleIter in this.dictSingle) { /* map.for: this.dictSingle */
                ++dictSingleIdx;
                Single k1 = dictSingleIter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                Single v1 = dictSingleIter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictSingleIdx != dictSingleSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictDoubleExists = (null != this.dictDouble && this.dictDouble.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictDoubleExists) { s.Append(comma); comma = null; }
        if (dictDoubleExists) { s.Append('"').Append("dictDouble").Append('"').Append(':'); comma = ","; }
        int dictDoubleSize = (null == this.dictDouble ? 0 : this.dictDouble.Count);
        if (dictDoubleSize > 0) {
            s.Append('\n').Append('{');
            int dictDoubleIdx = 0;
            foreach (KeyValuePair<Double,Double> dictDoubleIter in this.dictDouble) { /* map.for: this.dictDouble */
                ++dictDoubleIdx;
                Double k1 = dictDoubleIter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                Double v1 = dictDoubleIter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictDoubleIdx != dictDoubleSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictBooleanExists = (null != this.dictBoolean && this.dictBoolean.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictBooleanExists) { s.Append(comma); comma = null; }
        if (dictBooleanExists) { s.Append('"').Append("dictBoolean").Append('"').Append(':'); comma = ","; }
        int dictBooleanSize = (null == this.dictBoolean ? 0 : this.dictBoolean.Count);
        if (dictBooleanSize > 0) {
            s.Append('\n').Append('{');
            int dictBooleanIdx = 0;
            foreach (KeyValuePair<Boolean,Boolean> dictBooleanIter in this.dictBoolean) { /* map.for: this.dictBoolean */
                ++dictBooleanIdx;
                Boolean k1 = dictBooleanIter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString().ToLower()); s.Append('"').Append(':');
                Boolean v1 = dictBooleanIter.Value; /* nest.v */
                s.Append(v1.ToString().ToLower());
                if (dictBooleanIdx != dictBooleanSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictStringExists = (null != this.dictString && this.dictString.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictStringExists) { s.Append(comma); comma = null; }
        if (dictStringExists) { s.Append('"').Append("dictString").Append('"').Append(':'); comma = ","; }
        int dictStringSize = (null == this.dictString ? 0 : this.dictString.Count);
        if (dictStringSize > 0) {
            s.Append('\n').Append('{');
            int dictStringIdx = 0;
            foreach (KeyValuePair<String,String> dictStringIter in this.dictString) { /* map.for: this.dictString */
                ++dictStringIdx;
                String k1 = dictStringIter.Key; /* nest.k */
                s.Append('"'); s.Append('"').Append(k1.ToString()).Append('"'); s.Append('"').Append(':');
                String v1 = dictStringIter.Value; /* nest.v */
                s.Append('"').Append(v1.ToString()).Append('"');
                if (dictStringIdx != dictStringSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictEnumExists = (null != this.dictEnum && this.dictEnum.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictEnumExists) { s.Append(comma); comma = null; }
        if (dictEnumExists) { s.Append('"').Append("dictEnum").Append('"').Append(':'); comma = ","; }
        int dictEnumSize = (null == this.dictEnum ? 0 : this.dictEnum.Count);
        if (dictEnumSize > 0) {
            s.Append('\n').Append('{');
            int dictEnumIdx = 0;
            foreach (KeyValuePair<Gender,Gender> dictEnumIter in this.dictEnum) { /* map.for: this.dictEnum */
                ++dictEnumIdx;
                Gender k1 = dictEnumIter.Key; /* nest.k */
                s.Append('"'); s.Append((int)k1);; s.Append('"').Append(':');
                Gender v1 = dictEnumIter.Value; /* nest.v */
                s.Append((int)v1);;
                if (dictEnumIdx != dictEnumSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool dictStructExists = (null != this.dictStruct && this.dictStruct.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictStructExists) { s.Append(comma); comma = null; }
        if (dictStructExists) { s.Append('"').Append("dictStruct").Append('"').Append(':'); comma = ","; }
        int dictStructSize = (null == this.dictStruct ? 0 : this.dictStruct.Count);
        if (dictStructSize > 0) {
            s.Append('\n').Append('{');
            int dictStructIdx = 0;
            foreach (KeyValuePair<Custom,Custom> dictStructIter in this.dictStruct) { /* map.for: this.dictStruct */
                ++dictStructIdx;
                Custom k1 = dictStructIter.Key; /* nest.k */
                s.Append('"'); k1.WriteJSON(s); s.Append('"').Append(':');
                Custom v1 = dictStructIter.Value; /* nest.v */
                v1.WriteJSON(s);
                if (dictStructIdx != dictStructSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"'); s.Append('"').Append(k1.ToString()).Append('"'); s.Append('"').Append(':');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                }
                s.Append('}');
            } comma = ",";
        }
        s.Append('}').Append('\n');
    } //TestDict::WriteJSON(...)

    public StringBuilder ToStringLua()
    {
        StringBuilder code = new StringBuilder();
        code.Append("-- TestDict.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" --").Append('\n');
        code.Append("local table=");
        this.WriteLua(code); code.Append(';');
        return code;
    }

    public void WriteLua(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        bool dictI08Exists = (null != this.dictI08 && this.dictI08.Count > 0);
        if (dictI08Exists) { s.Append("dictI08").Append('='); comma = ","; }
        int dictI08Size = (null == this.dictI08 ? 0 : this.dictI08.Count);
        if (dictI08Size > 0) {
            s.Append('\n').Append('{');
            int dictI08Idx = 0;
            foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) { /* map.for: this.dictI08 */
                ++dictI08Idx;
                SByte k1 = dictI08Iter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                SByte v1 = dictI08Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI08Idx != dictI08Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictI16Exists = (null != this.dictI16 && this.dictI16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI16Exists) { s.Append(comma); comma = null; }
        if (dictI16Exists) { s.Append("dictI16").Append('='); comma = ","; }
        int dictI16Size = (null == this.dictI16 ? 0 : this.dictI16.Count);
        if (dictI16Size > 0) {
            s.Append('\n').Append('{');
            int dictI16Idx = 0;
            foreach (KeyValuePair<Int16,Int16> dictI16Iter in this.dictI16) { /* map.for: this.dictI16 */
                ++dictI16Idx;
                Int16 k1 = dictI16Iter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                Int16 v1 = dictI16Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI16Idx != dictI16Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictI32Exists = (null != this.dictI32 && this.dictI32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI32Exists) { s.Append(comma); comma = null; }
        if (dictI32Exists) { s.Append("dictI32").Append('='); comma = ","; }
        int dictI32Size = (null == this.dictI32 ? 0 : this.dictI32.Count);
        if (dictI32Size > 0) {
            s.Append('\n').Append('{');
            int dictI32Idx = 0;
            foreach (KeyValuePair<Int32,Int32> dictI32Iter in this.dictI32) { /* map.for: this.dictI32 */
                ++dictI32Idx;
                Int32 k1 = dictI32Iter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                Int32 v1 = dictI32Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI32Idx != dictI32Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictI64Exists = (null != this.dictI64 && this.dictI64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI64Exists) { s.Append(comma); comma = null; }
        if (dictI64Exists) { s.Append("dictI64").Append('='); comma = ","; }
        int dictI64Size = (null == this.dictI64 ? 0 : this.dictI64.Count);
        if (dictI64Size > 0) {
            s.Append('\n').Append('{');
            int dictI64Idx = 0;
            foreach (KeyValuePair<Int64,Int64> dictI64Iter in this.dictI64) { /* map.for: this.dictI64 */
                ++dictI64Idx;
                Int64 k1 = dictI64Iter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                Int64 v1 = dictI64Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI64Idx != dictI64Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictU08Exists = (null != this.dictU08 && this.dictU08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU08Exists) { s.Append(comma); comma = null; }
        if (dictU08Exists) { s.Append("dictU08").Append('='); comma = ","; }
        int dictU08Size = (null == this.dictU08 ? 0 : this.dictU08.Count);
        if (dictU08Size > 0) {
            s.Append('\n').Append('{');
            int dictU08Idx = 0;
            foreach (KeyValuePair<Byte,Byte> dictU08Iter in this.dictU08) { /* map.for: this.dictU08 */
                ++dictU08Idx;
                Byte k1 = dictU08Iter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                Byte v1 = dictU08Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU08Idx != dictU08Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictU16Exists = (null != this.dictU16 && this.dictU16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU16Exists) { s.Append(comma); comma = null; }
        if (dictU16Exists) { s.Append("dictU16").Append('='); comma = ","; }
        int dictU16Size = (null == this.dictU16 ? 0 : this.dictU16.Count);
        if (dictU16Size > 0) {
            s.Append('\n').Append('{');
            int dictU16Idx = 0;
            foreach (KeyValuePair<UInt16,UInt16> dictU16Iter in this.dictU16) { /* map.for: this.dictU16 */
                ++dictU16Idx;
                UInt16 k1 = dictU16Iter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                UInt16 v1 = dictU16Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU16Idx != dictU16Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictU32Exists = (null != this.dictU32 && this.dictU32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU32Exists) { s.Append(comma); comma = null; }
        if (dictU32Exists) { s.Append("dictU32").Append('='); comma = ","; }
        int dictU32Size = (null == this.dictU32 ? 0 : this.dictU32.Count);
        if (dictU32Size > 0) {
            s.Append('\n').Append('{');
            int dictU32Idx = 0;
            foreach (KeyValuePair<UInt32,UInt32> dictU32Iter in this.dictU32) { /* map.for: this.dictU32 */
                ++dictU32Idx;
                UInt32 k1 = dictU32Iter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                UInt32 v1 = dictU32Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU32Idx != dictU32Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictU64Exists = (null != this.dictU64 && this.dictU64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU64Exists) { s.Append(comma); comma = null; }
        if (dictU64Exists) { s.Append("dictU64").Append('='); comma = ","; }
        int dictU64Size = (null == this.dictU64 ? 0 : this.dictU64.Count);
        if (dictU64Size > 0) {
            s.Append('\n').Append('{');
            int dictU64Idx = 0;
            foreach (KeyValuePair<UInt64,UInt64> dictU64Iter in this.dictU64) { /* map.for: this.dictU64 */
                ++dictU64Idx;
                UInt64 k1 = dictU64Iter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                UInt64 v1 = dictU64Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU64Idx != dictU64Size) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictSingleExists = (null != this.dictSingle && this.dictSingle.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictSingleExists) { s.Append(comma); comma = null; }
        if (dictSingleExists) { s.Append("dictSingle").Append('='); comma = ","; }
        int dictSingleSize = (null == this.dictSingle ? 0 : this.dictSingle.Count);
        if (dictSingleSize > 0) {
            s.Append('\n').Append('{');
            int dictSingleIdx = 0;
            foreach (KeyValuePair<Single,Single> dictSingleIter in this.dictSingle) { /* map.for: this.dictSingle */
                ++dictSingleIdx;
                Single k1 = dictSingleIter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                Single v1 = dictSingleIter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictSingleIdx != dictSingleSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictDoubleExists = (null != this.dictDouble && this.dictDouble.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictDoubleExists) { s.Append(comma); comma = null; }
        if (dictDoubleExists) { s.Append("dictDouble").Append('='); comma = ","; }
        int dictDoubleSize = (null == this.dictDouble ? 0 : this.dictDouble.Count);
        if (dictDoubleSize > 0) {
            s.Append('\n').Append('{');
            int dictDoubleIdx = 0;
            foreach (KeyValuePair<Double,Double> dictDoubleIter in this.dictDouble) { /* map.for: this.dictDouble */
                ++dictDoubleIdx;
                Double k1 = dictDoubleIter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                Double v1 = dictDoubleIter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictDoubleIdx != dictDoubleSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictBooleanExists = (null != this.dictBoolean && this.dictBoolean.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictBooleanExists) { s.Append(comma); comma = null; }
        if (dictBooleanExists) { s.Append("dictBoolean").Append('='); comma = ","; }
        int dictBooleanSize = (null == this.dictBoolean ? 0 : this.dictBoolean.Count);
        if (dictBooleanSize > 0) {
            s.Append('\n').Append('{');
            int dictBooleanIdx = 0;
            foreach (KeyValuePair<Boolean,Boolean> dictBooleanIter in this.dictBoolean) { /* map.for: this.dictBoolean */
                ++dictBooleanIdx;
                Boolean k1 = dictBooleanIter.Key; /* nest.k */
                s.Append(k1.ToString().ToLower()); s.Append('=');
                Boolean v1 = dictBooleanIter.Value; /* nest.v */
                s.Append(v1.ToString().ToLower());
                if (dictBooleanIdx != dictBooleanSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictStringExists = (null != this.dictString && this.dictString.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictStringExists) { s.Append(comma); comma = null; }
        if (dictStringExists) { s.Append("dictString").Append('='); comma = ","; }
        int dictStringSize = (null == this.dictString ? 0 : this.dictString.Count);
        if (dictStringSize > 0) {
            s.Append('\n').Append('{');
            int dictStringIdx = 0;
            foreach (KeyValuePair<String,String> dictStringIter in this.dictString) { /* map.for: this.dictString */
                ++dictStringIdx;
                String k1 = dictStringIter.Key; /* nest.k */
                s.Append('"').Append(k1.ToString()).Append('"'); s.Append('=');
                String v1 = dictStringIter.Value; /* nest.v */
                s.Append('"').Append(v1.ToString()).Append('"');
                if (dictStringIdx != dictStringSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictEnumExists = (null != this.dictEnum && this.dictEnum.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictEnumExists) { s.Append(comma); comma = null; }
        if (dictEnumExists) { s.Append("dictEnum").Append('='); comma = ","; }
        int dictEnumSize = (null == this.dictEnum ? 0 : this.dictEnum.Count);
        if (dictEnumSize > 0) {
            s.Append('\n').Append('{');
            int dictEnumIdx = 0;
            foreach (KeyValuePair<Gender,Gender> dictEnumIter in this.dictEnum) { /* map.for: this.dictEnum */
                ++dictEnumIdx;
                Gender k1 = dictEnumIter.Key; /* nest.k */
                s.Append('['); s.Append((int)k1);; s.Append(']').Append('=');
                Gender v1 = dictEnumIter.Value; /* nest.v */
                s.Append((int)v1);;
                if (dictEnumIdx != dictEnumSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool dictStructExists = (null != this.dictStruct && this.dictStruct.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictStructExists) { s.Append(comma); comma = null; }
        if (dictStructExists) { s.Append("dictStruct").Append('='); comma = ","; }
        int dictStructSize = (null == this.dictStruct ? 0 : this.dictStruct.Count);
        if (dictStructSize > 0) {
            s.Append('\n').Append('{');
            int dictStructIdx = 0;
            foreach (KeyValuePair<Custom,Custom> dictStructIter in this.dictStruct) { /* map.for: this.dictStruct */
                ++dictStructIdx;
                Custom k1 = dictStructIter.Key; /* nest.k */
                k1.WriteLua(s); s.Append('=');
                Custom v1 = dictStructIter.Value; /* nest.v */
                v1.WriteLua(s);
                if (dictStructIdx != dictStructSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"').Append(k1.ToString()).Append('"'); s.Append('=');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        s.Append('}').Append('\n');
    }

    public StringBuilder ToStringPHP()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?php ").Append("/* TestDict.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" */").Append('\n');
        code.Append('\n').Append("return ");
        this.WritePHP(code); code.Append(';').Append('\n');
        return code;
    }

    public void WritePHP(StringBuilder s)
    {
        s.Append("array").Append('(').Append('\n');
        string comma = null;
        bool dictI08Exists = (null != this.dictI08 && this.dictI08.Count > 0);
        if (dictI08Exists) { s.Append('\'').Append("dictI08").Append('\'').Append("=>"); comma = ","; }
        int dictI08Size = (null == this.dictI08 ? 0 : this.dictI08.Count);
        if (dictI08Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictI08Idx = 0;
            foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) { /* map.for: this.dictI08 */
                ++dictI08Idx;
                SByte k1 = dictI08Iter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                SByte v1 = dictI08Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI08Idx != dictI08Size) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictI08.Count).Append(" */").Append(')');
        }
        bool dictI16Exists = (null != this.dictI16 && this.dictI16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI16Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictI16Exists) { s.Append('\'').Append("dictI16").Append('\'').Append("=>"); comma = ","; }
        int dictI16Size = (null == this.dictI16 ? 0 : this.dictI16.Count);
        if (dictI16Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictI16Idx = 0;
            foreach (KeyValuePair<Int16,Int16> dictI16Iter in this.dictI16) { /* map.for: this.dictI16 */
                ++dictI16Idx;
                Int16 k1 = dictI16Iter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                Int16 v1 = dictI16Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI16Idx != dictI16Size) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictI16.Count).Append(" */").Append(')');
        }
        bool dictI32Exists = (null != this.dictI32 && this.dictI32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI32Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictI32Exists) { s.Append('\'').Append("dictI32").Append('\'').Append("=>"); comma = ","; }
        int dictI32Size = (null == this.dictI32 ? 0 : this.dictI32.Count);
        if (dictI32Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictI32Idx = 0;
            foreach (KeyValuePair<Int32,Int32> dictI32Iter in this.dictI32) { /* map.for: this.dictI32 */
                ++dictI32Idx;
                Int32 k1 = dictI32Iter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                Int32 v1 = dictI32Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI32Idx != dictI32Size) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictI32.Count).Append(" */").Append(')');
        }
        bool dictI64Exists = (null != this.dictI64 && this.dictI64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI64Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictI64Exists) { s.Append('\'').Append("dictI64").Append('\'').Append("=>"); comma = ","; }
        int dictI64Size = (null == this.dictI64 ? 0 : this.dictI64.Count);
        if (dictI64Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictI64Idx = 0;
            foreach (KeyValuePair<Int64,Int64> dictI64Iter in this.dictI64) { /* map.for: this.dictI64 */
                ++dictI64Idx;
                Int64 k1 = dictI64Iter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                Int64 v1 = dictI64Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictI64Idx != dictI64Size) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictI64.Count).Append(" */").Append(')');
        }
        bool dictU08Exists = (null != this.dictU08 && this.dictU08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU08Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictU08Exists) { s.Append('\'').Append("dictU08").Append('\'').Append("=>"); comma = ","; }
        int dictU08Size = (null == this.dictU08 ? 0 : this.dictU08.Count);
        if (dictU08Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictU08Idx = 0;
            foreach (KeyValuePair<Byte,Byte> dictU08Iter in this.dictU08) { /* map.for: this.dictU08 */
                ++dictU08Idx;
                Byte k1 = dictU08Iter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                Byte v1 = dictU08Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU08Idx != dictU08Size) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictU08.Count).Append(" */").Append(')');
        }
        bool dictU16Exists = (null != this.dictU16 && this.dictU16.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU16Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictU16Exists) { s.Append('\'').Append("dictU16").Append('\'').Append("=>"); comma = ","; }
        int dictU16Size = (null == this.dictU16 ? 0 : this.dictU16.Count);
        if (dictU16Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictU16Idx = 0;
            foreach (KeyValuePair<UInt16,UInt16> dictU16Iter in this.dictU16) { /* map.for: this.dictU16 */
                ++dictU16Idx;
                UInt16 k1 = dictU16Iter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                UInt16 v1 = dictU16Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU16Idx != dictU16Size) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictU16.Count).Append(" */").Append(')');
        }
        bool dictU32Exists = (null != this.dictU32 && this.dictU32.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU32Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictU32Exists) { s.Append('\'').Append("dictU32").Append('\'').Append("=>"); comma = ","; }
        int dictU32Size = (null == this.dictU32 ? 0 : this.dictU32.Count);
        if (dictU32Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictU32Idx = 0;
            foreach (KeyValuePair<UInt32,UInt32> dictU32Iter in this.dictU32) { /* map.for: this.dictU32 */
                ++dictU32Idx;
                UInt32 k1 = dictU32Iter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                UInt32 v1 = dictU32Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU32Idx != dictU32Size) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictU32.Count).Append(" */").Append(')');
        }
        bool dictU64Exists = (null != this.dictU64 && this.dictU64.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictU64Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictU64Exists) { s.Append('\'').Append("dictU64").Append('\'').Append("=>"); comma = ","; }
        int dictU64Size = (null == this.dictU64 ? 0 : this.dictU64.Count);
        if (dictU64Size > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictU64Idx = 0;
            foreach (KeyValuePair<UInt64,UInt64> dictU64Iter in this.dictU64) { /* map.for: this.dictU64 */
                ++dictU64Idx;
                UInt64 k1 = dictU64Iter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                UInt64 v1 = dictU64Iter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictU64Idx != dictU64Size) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictU64.Count).Append(" */").Append(')');
        }
        bool dictSingleExists = (null != this.dictSingle && this.dictSingle.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictSingleExists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictSingleExists) { s.Append('\'').Append("dictSingle").Append('\'').Append("=>"); comma = ","; }
        int dictSingleSize = (null == this.dictSingle ? 0 : this.dictSingle.Count);
        if (dictSingleSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictSingleIdx = 0;
            foreach (KeyValuePair<Single,Single> dictSingleIter in this.dictSingle) { /* map.for: this.dictSingle */
                ++dictSingleIdx;
                Single k1 = dictSingleIter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                Single v1 = dictSingleIter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictSingleIdx != dictSingleSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictSingle.Count).Append(" */").Append(')');
        }
        bool dictDoubleExists = (null != this.dictDouble && this.dictDouble.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictDoubleExists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictDoubleExists) { s.Append('\'').Append("dictDouble").Append('\'').Append("=>"); comma = ","; }
        int dictDoubleSize = (null == this.dictDouble ? 0 : this.dictDouble.Count);
        if (dictDoubleSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictDoubleIdx = 0;
            foreach (KeyValuePair<Double,Double> dictDoubleIter in this.dictDouble) { /* map.for: this.dictDouble */
                ++dictDoubleIdx;
                Double k1 = dictDoubleIter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                Double v1 = dictDoubleIter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (dictDoubleIdx != dictDoubleSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictDouble.Count).Append(" */").Append(')');
        }
        bool dictBooleanExists = (null != this.dictBoolean && this.dictBoolean.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictBooleanExists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictBooleanExists) { s.Append('\'').Append("dictBoolean").Append('\'').Append("=>"); comma = ","; }
        int dictBooleanSize = (null == this.dictBoolean ? 0 : this.dictBoolean.Count);
        if (dictBooleanSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictBooleanIdx = 0;
            foreach (KeyValuePair<Boolean,Boolean> dictBooleanIter in this.dictBoolean) { /* map.for: this.dictBoolean */
                ++dictBooleanIdx;
                Boolean k1 = dictBooleanIter.Key; /* nest.k */
                s.Append(k1.ToString().ToLower()); s.Append("=>");
                Boolean v1 = dictBooleanIter.Value; /* nest.v */
                s.Append(v1.ToString().ToLower());
                if (dictBooleanIdx != dictBooleanSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictBoolean.Count).Append(" */").Append(')');
        }
        bool dictStringExists = (null != this.dictString && this.dictString.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictStringExists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictStringExists) { s.Append('\'').Append("dictString").Append('\'').Append("=>"); comma = ","; }
        int dictStringSize = (null == this.dictString ? 0 : this.dictString.Count);
        if (dictStringSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictStringIdx = 0;
            foreach (KeyValuePair<String,String> dictStringIter in this.dictString) { /* map.for: this.dictString */
                ++dictStringIdx;
                String k1 = dictStringIter.Key; /* nest.k */
                s.Append('\'').Append(k1.ToString()).Append('\''); s.Append("=>");
                String v1 = dictStringIter.Value; /* nest.v */
                s.Append('\'').Append(v1.ToString()).Append('\'');
                if (dictStringIdx != dictStringSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictString.Count).Append(" */").Append(')');
        }
        bool dictEnumExists = (null != this.dictEnum && this.dictEnum.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictEnumExists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictEnumExists) { s.Append('\'').Append("dictEnum").Append('\'').Append("=>"); comma = ","; }
        int dictEnumSize = (null == this.dictEnum ? 0 : this.dictEnum.Count);
        if (dictEnumSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictEnumIdx = 0;
            foreach (KeyValuePair<Gender,Gender> dictEnumIter in this.dictEnum) { /* map.for: this.dictEnum */
                ++dictEnumIdx;
                Gender k1 = dictEnumIter.Key; /* nest.k */
                s.Append((int)k1);
                s.Append("/*Gender::").Append(k1.ToString()).Append("*/"); s.Append("=>");
                Gender v1 = dictEnumIter.Value; /* nest.v */
                s.Append((int)v1);
                s.Append("/*Gender::").Append(v1.ToString()).Append("*/");
                if (dictEnumIdx != dictEnumSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictEnum.Count).Append(" */").Append(')');
        }
        bool dictStructExists = (null != this.dictStruct && this.dictStruct.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictStructExists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictStructExists) { s.Append('\'').Append("dictStruct").Append('\'').Append("=>"); comma = ","; }
        int dictStructSize = (null == this.dictStruct ? 0 : this.dictStruct.Count);
        if (dictStructSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int dictStructIdx = 0;
            foreach (KeyValuePair<Custom,Custom> dictStructIter in this.dictStruct) { /* map.for: this.dictStruct */
                ++dictStructIdx;
                Custom k1 = dictStructIter.Key; /* nest.k */
                k1.WritePHP(s); s.Append("=>");
                Custom v1 = dictStructIter.Value; /* nest.v */
                v1.WritePHP(s);
                if (dictStructIdx != dictStructSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.dictStruct.Count).Append(" */").Append(')');
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma).Append('\n'); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append("array").Append('(').Append('\n');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('\'').Append(k1.ToString()).Append('\''); s.Append("=>");
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('\'').Append(v1.ToString()).Append('\'');
                    if (hotfixIdx != hotfixSize) { s.Append(','); s.Append('\n'); }
                }
                s.Append("/* map size: ").Append(this.hotfix.Count).Append(" */").Append(')');
            } comma = ",";
        }
        s.Append("/* ").Append(GetType().ToString()).Append(" */");
        s.Append(')');
    }

    public StringBuilder ToStringXML()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        code.Append('\n').Append("<!-- ").Append("TestDict").Append(".CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" -->");
        this.WriteXML(code, "TestDict");
        return code;
    }

    public void WriteXML(StringBuilder s, String name)
    {
        StringBuilder attrs = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        if (this.dictI08.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictI08").Append('>');
            foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) {
                nodes.Append('\n');
                SByte k1 = dictI08Iter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                SByte v1 = dictI08Iter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictI08").Append('>');
        }
        if (this.dictI16.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictI16").Append('>');
            foreach (KeyValuePair<Int16,Int16> dictI16Iter in this.dictI16) {
                nodes.Append('\n');
                Int16 k1 = dictI16Iter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Int16 v1 = dictI16Iter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictI16").Append('>');
        }
        if (this.dictI32.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictI32").Append('>');
            foreach (KeyValuePair<Int32,Int32> dictI32Iter in this.dictI32) {
                nodes.Append('\n');
                Int32 k1 = dictI32Iter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Int32 v1 = dictI32Iter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictI32").Append('>');
        }
        if (this.dictI64.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictI64").Append('>');
            foreach (KeyValuePair<Int64,Int64> dictI64Iter in this.dictI64) {
                nodes.Append('\n');
                Int64 k1 = dictI64Iter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Int64 v1 = dictI64Iter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictI64").Append('>');
        }
        if (this.dictU08.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictU08").Append('>');
            foreach (KeyValuePair<Byte,Byte> dictU08Iter in this.dictU08) {
                nodes.Append('\n');
                Byte k1 = dictU08Iter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Byte v1 = dictU08Iter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictU08").Append('>');
        }
        if (this.dictU16.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictU16").Append('>');
            foreach (KeyValuePair<UInt16,UInt16> dictU16Iter in this.dictU16) {
                nodes.Append('\n');
                UInt16 k1 = dictU16Iter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                UInt16 v1 = dictU16Iter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictU16").Append('>');
        }
        if (this.dictU32.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictU32").Append('>');
            foreach (KeyValuePair<UInt32,UInt32> dictU32Iter in this.dictU32) {
                nodes.Append('\n');
                UInt32 k1 = dictU32Iter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                UInt32 v1 = dictU32Iter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictU32").Append('>');
        }
        if (this.dictU64.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictU64").Append('>');
            foreach (KeyValuePair<UInt64,UInt64> dictU64Iter in this.dictU64) {
                nodes.Append('\n');
                UInt64 k1 = dictU64Iter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                UInt64 v1 = dictU64Iter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictU64").Append('>');
        }
        if (this.dictSingle.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictSingle").Append('>');
            foreach (KeyValuePair<Single,Single> dictSingleIter in this.dictSingle) {
                nodes.Append('\n');
                Single k1 = dictSingleIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Single v1 = dictSingleIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictSingle").Append('>');
        }
        if (this.dictDouble.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictDouble").Append('>');
            foreach (KeyValuePair<Double,Double> dictDoubleIter in this.dictDouble) {
                nodes.Append('\n');
                Double k1 = dictDoubleIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Double v1 = dictDoubleIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictDouble").Append('>');
        }
        if (this.dictBoolean.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictBoolean").Append('>');
            foreach (KeyValuePair<Boolean,Boolean> dictBooleanIter in this.dictBoolean) {
                nodes.Append('\n');
                Boolean k1 = dictBooleanIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Boolean v1 = dictBooleanIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictBoolean").Append('>');
        }
        if (this.dictString.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictString").Append('>');
            foreach (KeyValuePair<String,String> dictStringIter in this.dictString) {
                nodes.Append('\n');
                String k1 = dictStringIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1);
                nodes.Append('"').Append('/').Append('>');
                String v1 = dictStringIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictString").Append('>');
        }
        if (this.dictEnum.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictEnum").Append('>');
            foreach (KeyValuePair<Gender,Gender> dictEnumIter in this.dictEnum) {
                nodes.Append('\n');
                Gender k1 = dictEnumIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Gender v1 = dictEnumIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictEnum").Append('>');
        }
        if (this.dictStruct.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictStruct").Append('>');
            foreach (KeyValuePair<Custom,Custom> dictStructIter in this.dictStruct) {
                nodes.Append('\n');
                Custom k1 = dictStructIter.Key;
                k1.WriteXML(nodes, "k1");
                Custom v1 = dictStructIter.Value;
                v1.WriteXML(nodes, "v1");
            }
            nodes.Append('<').Append('/').Append("dictStruct").Append('>');
        }
        if (this.hotfix != null && this.hotfix.Count > 0) {
            nodes.Append('\n').Append('<').Append("hotfix").Append('>');
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                nodes.Append('\n');
                String k1 = hotfixIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1);
                nodes.Append('"').Append('/').Append('>');
                String v1 = hotfixIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("hotfix").Append('>');
        }
        s.Append('\n').Append('<').Append(name).Append(attrs);
        if (nodes.Length == 0) {
            s.Append('/').Append('>');
        } else {
            s.Append('>').Append(nodes);
            s.Append('<').Append('/').Append(name).Append('>');
        }
    } //TestDict::WriteXML(...)

} //class: TestDict
/*
1@test.xyz.TestDict/map-int8-int8/map-int16-int16/map-int32-int32/map-int64-int64/map-uint8-uint8/ma
  p-uint16-uint16/map-uint32-uint32/map-uint64-uint64/map-float-float/map-double-double/map-bool-boo
  l/map-string-string/map-int32-int32/map-Test.Abc.Custom-Test.Abc.Custom/map-string-string
+@test.abc.Custom/int32/Test.Abc.TestBasic/Test.Xyz.Conflict/Test.Abc.Conflict/vec-Test.Abc.Custom/i
  nt32/string/string/Test.Abc.Custom/Test.Abc.Custom/string
*/
} //namespace: Test.Xyz