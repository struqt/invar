/*===-----------------------------*  C#  *---------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace Test.Xyz {

using System.Collections.Generic;
using System.IO;
using System.Text;
using System;
using Test.Abc;

/// 指针类型测试.
public sealed class TestPointer
: Invar.BinaryDecode
, Invar.BinaryEncode
, Invar.JSONEncode
, Invar.XMLEncode
{
    public const uint CRC32 = 0x34F9553;

    private TestPointer                         self         = null;
    private String                              stringValue  = null;
    private Custom                              other        = null;
    private List<SByte>                         listI08      = null;
    private Dictionary<SByte,SByte>             dictI08      = null;
    private List<List<List<List<TestPointer>>>> listNested   = null;
    private Single                              numberSingle = 0.0F;
    private Gender                              enumValue    = Gender.NONE;
    private Dictionary<String,String>           hotfix       = null; // [AutoAdd] Hotfix.

    /// .
    [Invar.InvarRule("Test.Xyz.TestPointer", "0")]
    public TestPointer GetSelf() { return this.self; }

    /// .
    [Invar.InvarRule("string", "1")]
    public String GetStringValue() { return this.stringValue; }

    /// .
    [Invar.InvarRule("Test.Abc.Custom", "2")]
    public Custom GetOther() { return this.other; }

    /// .
    [Invar.InvarRule("vec<int8>", "3")]
    public List<SByte> GetListI08() { return this.listI08; }

    /// .
    [Invar.InvarRule("map<int8,int8>", "4")]
    public Dictionary<SByte,SByte> GetDictI08() { return this.dictI08; }

    /// .
    [Invar.InvarRule("vec<vec<vec<vec<Test.Xyz.TestPointer>>>>", "5")]
    public List<List<List<List<TestPointer>>>> GetListNested() { return this.listNested; }

    /// .
    [Invar.InvarRule("float", "6")]
    public Single GetNumberSingle() { return this.numberSingle; }

    /// .
    [Invar.InvarRule("Test.Abc.Gender", "7")]
    public Gender GetEnumValue() { return this.enumValue; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "8")]
    public Dictionary<String,String> GetHotfix() { return this.hotfix; }

    /// .
    [Invar.InvarRule("Test.Xyz.TestPointer", "0")]
    public TestPointer SetSelf(TestPointer value) { this.self = value; return this; }

    /// .
    [Invar.InvarRule("string", "1")]
    public TestPointer SetStringValue(String value) { this.stringValue = value; return this; }

    /// .
    [Invar.InvarRule("Test.Abc.Custom", "2")]
    public TestPointer SetOther(Custom value) { this.other = value; return this; }

    /// .
    [Invar.InvarRule("vec<int8>", "3")]
    public TestPointer SetListI08(List<SByte> value) { this.listI08 = value; return this; }

    /// .
    [Invar.InvarRule("map<int8,int8>", "4")]
    public TestPointer SetDictI08(Dictionary<SByte,SByte> value) { this.dictI08 = value; return this; }

    /// .
    [Invar.InvarRule("vec<vec<vec<vec<Test.Xyz.TestPointer>>>>", "5")]
    public TestPointer SetListNested(List<List<List<List<TestPointer>>>> value) { this.listNested = value; return this; }

    /// .
    [Invar.InvarRule("float", "6")]
    public TestPointer SetNumberSingle(Single value) { this.numberSingle = value; return this; }

    /// .
    [Invar.InvarRule("Test.Abc.Gender", "7")]
    public TestPointer SetEnumValue(Gender value) { this.enumValue = value; return this; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "8")]
    public TestPointer SetHotfix(Dictionary<String,String> value) { this.hotfix = value; return this; }

    public TestPointer Reuse()
    {
        if (this.self != null) { this.self.Reuse(); }
        if (this.stringValue != null) { this.stringValue = ""; }
        if (this.other != null) { this.other.Reuse(); }
        if (this.listI08 != null) { this.listI08.Clear(); }
        if (this.dictI08 != null) { this.dictI08.Clear(); }
        if (this.listNested != null) { this.listNested.Clear(); }
        this.numberSingle = 0.0F;
        this.enumValue   = Gender.NONE;
        if (this.hotfix != null) { this.hotfix.Clear(); }
        return this;
    } //TestPointer::Reuse()

    public TestPointer Copy(TestPointer from_)
    {
        if (null == from_ || this == from_) {
            return this;
        }
        if (null == from_.self) {
            this.self = null;
        } else {
            if (null == this.self) { this.self = new TestPointer(); }
            this.self.Copy(from_.self);
        }
        this.stringValue = from_.stringValue;
        if (null == from_.other) {
            this.other = null;
        } else {
            if (null == this.other) { this.other = new Custom(); }
            this.other.Copy(from_.other);
        }
        if (null == from_.listI08) {
            this.listI08 = null;
        } else {
            if (null == this.listI08) { this.listI08 = new List<SByte>(); }
            else { this.listI08.Clear(); }
            this.listI08.AddRange(from_.listI08);
        }
        if (null == from_.dictI08) {
            this.dictI08 = null;
        } else {
            if (null == this.dictI08) { this.dictI08 = new Dictionary<SByte,SByte>(); }
            else { this.dictI08.Clear(); }
            foreach (var dictI08Iter in from_.dictI08) {
                this.dictI08.Add(dictI08Iter.Key, dictI08Iter.Value);
            }
        }
        if (null == from_.listNested) {
            this.listNested = null;
        } else {
            if (null == this.listNested) { this.listNested = new List<List<List<List<TestPointer>>>>(); }
            else { this.listNested.Clear(); }
            this.listNested.AddRange(from_.listNested);
        }
        this.numberSingle = from_.numberSingle;
        this.enumValue = from_.enumValue;
        if (null == from_.hotfix) {
            this.hotfix = null;
        } else {
            if (null == this.hotfix) { this.hotfix = new Dictionary<String,String>(); }
            else { this.hotfix.Clear(); }
            foreach (var hotfixIter in from_.hotfix) {
                this.hotfix.Add(hotfixIter.Key, hotfixIter.Value);
            }
        }
        return this;
    } //TestPointer::Copy(...)

    public void Read(BinaryReader r)
    {
        sbyte selfExists = r.ReadSByte();
        if ((sbyte)0x01 == selfExists) {
            if (this.self == null) { this.self = new TestPointer(); }
            this.self.Read(r);
        }
        else if ((sbyte)0x00 == selfExists) { this.self = null; }
        else { throw new IOException("Protoc read error: The value of 'selfExists' is invalid.", 497); }
        sbyte stringValueExists = r.ReadSByte();
        if ((sbyte)0x01 == stringValueExists) {
            this.stringValue = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
        }
        else if ((sbyte)0x00 == stringValueExists) { this.stringValue = null; }
        else { throw new IOException("Protoc read error: The value of 'stringValueExists' is invalid.", 496); }
        sbyte otherExists = r.ReadSByte();
        if ((sbyte)0x01 == otherExists) {
            if (this.other == null) { this.other = new Custom(); }
            this.other.Read(r);
        }
        else if ((sbyte)0x00 == otherExists) { this.other = null; }
        else { throw new IOException("Protoc read error: The value of 'otherExists' is invalid.", 497); }
        sbyte listI08Exists = r.ReadSByte();
        if ((sbyte)0x01 == listI08Exists) {
            if (this.listI08 == null) { this.listI08 = new List<SByte>(); }
            UInt32 lenListI08 = r.ReadUInt32();
            for (UInt32 iListI08 = 0; iListI08 < lenListI08; iListI08++) {
                SByte n1 = r.ReadSByte();
                this.listI08.Add(n1);
            }
        }
        else if ((sbyte)0x00 == listI08Exists) { this.listI08 = null; }
        else { throw new IOException("Protoc read error: The value of 'listI08Exists' is invalid.", 498); }
        sbyte dictI08Exists = r.ReadSByte();
        if ((sbyte)0x01 == dictI08Exists) {
            if (this.dictI08 == null) { this.dictI08 = new Dictionary<SByte,SByte>(); }
            UInt32 lenDictI08 = r.ReadUInt32();
            for (UInt32 iDictI08 = 0; iDictI08 < lenDictI08; iDictI08++) {
                SByte k1 = r.ReadSByte();
                SByte v1 = r.ReadSByte();
                if (!this.dictI08.ContainsKey(k1)) {
                    this.dictI08.Add(k1, v1);
                } else {
                    this.dictI08[k1] = v1;
                }
            }
        }
        else if ((sbyte)0x00 == dictI08Exists) { this.dictI08 = null; }
        else { throw new IOException("Protoc read error: The value of 'dictI08Exists' is invalid.", 498); }
        sbyte listNestedExists = r.ReadSByte();
        if ((sbyte)0x01 == listNestedExists) {
            if (this.listNested == null) { this.listNested = new List<List<List<List<TestPointer>>>>(); }
            UInt32 lenListNested = r.ReadUInt32();
            for (UInt32 iListNested = 0; iListNested < lenListNested; iListNested++) {
                List<List<List<TestPointer>>> n1 = new List<List<List<TestPointer>>>(); //read.vec.head
                UInt32 lenN1 = r.ReadUInt32();
                for (UInt32 iN1 = 0; iN1 < lenN1; iN1++) {
                    List<List<TestPointer>> n2 = new List<List<TestPointer>>(); //read.vec.head
                    UInt32 lenN2 = r.ReadUInt32();
                    for (UInt32 iN2 = 0; iN2 < lenN2; iN2++) {
                        List<TestPointer> n3 = new List<TestPointer>(); //read.vec.head
                        UInt32 lenN3 = r.ReadUInt32();
                        for (UInt32 iN3 = 0; iN3 < lenN3; iN3++) {
                            TestPointer n4 = new TestPointer();
                            n4.Read(r);
                            n3.Add(n4);
                        }
                        n2.Add(n3);
                    }
                    n1.Add(n2);
                }
                this.listNested.Add(n1);
            }
        }
        else if ((sbyte)0x00 == listNestedExists) { this.listNested = null; }
        else { throw new IOException("Protoc read error: The value of 'listNestedExists' is invalid.", 498); }
        this.numberSingle = r.ReadSingle();
        this.enumValue = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
        sbyte hotfixExists = r.ReadSByte();
        if ((sbyte)0x01 == hotfixExists) {
            if (this.hotfix == null) { this.hotfix = new Dictionary<String,String>(); }
            UInt32 lenHotfix = r.ReadUInt32();
            for (UInt32 iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
                String k1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                String v1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                if (!this.hotfix.ContainsKey(k1)) {
                    this.hotfix.Add(k1, v1);
                } else {
                    this.hotfix[k1] = v1;
                }
            }
        }
        else if ((sbyte)0x00 == hotfixExists) { this.hotfix = null; }
        else { throw new IOException("Protoc read error: The value of 'hotfixExists' is invalid.", 498); }
    } //TestPointer::Read(...)

    public void Write(BinaryWriter w)
    {
        if (this.self != null) {
            w.Write((sbyte)0x01);
            this.self.Write(w);
        } else {
            w.Write((sbyte)0x00);
        }
        if (this.stringValue != null) {
            w.Write((sbyte)0x01);
            byte[] stringValueBytes = Encoding.UTF8.GetBytes(this.stringValue);
        w.Write(stringValueBytes.Length);
        w.Write(stringValueBytes);
        } else {
            w.Write((sbyte)0x00);
        }
        if (this.other != null) {
            w.Write((sbyte)0x01);
            this.other.Write(w);
        } else {
            w.Write((sbyte)0x00);
        }
        if (this.listI08 != null) {
            w.Write((sbyte)0x01);
            w.Write(this.listI08.Count);
            foreach (SByte n1 in this.listI08) {
                w.Write(n1);
            }
        } else {
            w.Write((sbyte)0x00);
        }
        if (this.dictI08 != null) {
            w.Write((sbyte)0x01);
            w.Write(this.dictI08.Count);
            foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) {
                SByte k1 = dictI08Iter.Key;
                w.Write(k1);
                SByte v1 = dictI08Iter.Value;
                w.Write(v1);
            }
        } else {
            w.Write((sbyte)0x00);
        }
        if (this.listNested != null) {
            w.Write((sbyte)0x01);
            w.Write(this.listNested.Count);
            foreach (List<List<List<TestPointer>>> n1 in this.listNested) {
                w.Write(n1.Count);
                foreach (List<List<TestPointer>> n2 in n1) {
                    w.Write(n2.Count);
                    foreach (List<TestPointer> n3 in n2) {
                        w.Write(n3.Count);
                        foreach (TestPointer n4 in n3) {
                            n4.Write(w);
                        }
                    }
                }
            }
        } else {
            w.Write((sbyte)0x00);
        }
        w.Write(this.numberSingle);
        w.Write((Int32)this.enumValue);
        if (this.hotfix != null) {
            w.Write((sbyte)0x01);
            w.Write(this.hotfix.Count);
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                String k1 = hotfixIter.Key;
                byte[] k1Bytes = Encoding.UTF8.GetBytes(k1);
                w.Write(k1Bytes.Length);
                w.Write(k1Bytes);
                String v1 = hotfixIter.Value;
                byte[] v1Bytes = Encoding.UTF8.GetBytes(v1);
                w.Write(v1Bytes.Length);
                w.Write(v1Bytes);
            }
        } else {
            w.Write((sbyte)0x00);
        }
    } //TestPointer::Write(...)

    public override String ToString()
    {
        StringBuilder result = new StringBuilder();
        result.Append('{').Append(' ');
        result.Append(GetType().ToString());
        result.Append(',').Append(' ').Append("self").Append(':');
        if (this.self != null) { result.Append("<TestPointer>"); }
        else { result.Append("null"); }
        result.Append(',').Append(' ').Append("stringValue").Append(':');
        if (this.stringValue != null) { result.Append("\"" + this.stringValue + "\""); }
        else { result.Append("null"); }
        result.Append(',').Append(' ').Append("other").Append(':');
        if (this.other != null) { result.Append("<Custom>"); }
        else { result.Append("null"); }
        result.Append(',').Append(' ').Append("listI08").Append(':');
        if (this.listI08 != null) { result.Append("(" + this.listI08.Count + ")"); }
        else { result.Append("null"); }
        result.Append(',').Append(' ').Append("dictI08").Append(':');
        if (this.dictI08 != null) { result.Append("[" + this.dictI08.Count + "]"); }
        else { result.Append("null"); }
        result.Append(',').Append(' ').Append("listNested").Append(':');
        if (this.listNested != null) { result.Append("(" + this.listNested.Count + ")"); }
        else { result.Append("null"); }
        result.Append(',').Append(' ').Append("numberSingle").Append(':');
        result.Append(this.numberSingle.ToString());
        result.Append(',').Append(' ').Append("enumValue").Append(':');
        result.Append(this.enumValue.ToString());
        result.Append(',').Append(' ').Append("hotfix").Append(':');
        if (this.hotfix != null) { result.Append("[" + this.hotfix.Count + "]"); }
        else { result.Append("null"); }
        result.Append(' ').Append('}');
        return result.ToString();
    } //TestPointer::ToString()

    public StringBuilder ToStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.WriteJSON(code);
        return code;
    }

    public void WriteJSON(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        bool selfExists = (null != this.self);
        if (selfExists) {
            s.Append('"').Append("self").Append('"').Append(':'); comma = ","; this.self.WriteJSON(s);
        }
        bool stringValueExists = !String.IsNullOrEmpty(this.stringValue);
        if (!String.IsNullOrEmpty(comma) && stringValueExists) { s.Append(comma); comma = null; }
        if (stringValueExists) {
            s.Append('"').Append("stringValue").Append('"').Append(':'); comma = ","; s.Append('"').Append(this.stringValue.ToString()).Append('"');
        }
        bool otherExists = (null != this.other);
        if (!String.IsNullOrEmpty(comma) && otherExists) { s.Append(comma); comma = null; }
        if (otherExists) {
            s.Append('"').Append("other").Append('"').Append(':'); comma = ","; this.other.WriteJSON(s);
        }
        bool listI08Exists = (null != this.listI08 && this.listI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI08Exists) { s.Append(comma); comma = null; }
        if (listI08Exists) {
            int listI08Size = (null == this.listI08 ? 0 : this.listI08.Count);
            if (listI08Size > 0) {
                s.Append('\n').Append('[');
                int listI08Idx = 0;
                foreach (SByte n1 in this.listI08) { /* vec.for: this.listI08 */
                    ++listI08Idx;
                    s.Append(n1.ToString());
                    if (listI08Idx != listI08Size) { s.Append(','); }
                }
                s.Append(']');
            } comma = ",";
        }
        bool dictI08Exists = (null != this.dictI08 && this.dictI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI08Exists) { s.Append(comma); comma = null; }
        if (dictI08Exists) {
            int dictI08Size = (null == this.dictI08 ? 0 : this.dictI08.Count);
            if (dictI08Size > 0) {
                s.Append('\n').Append('{');
                int dictI08Idx = 0;
                foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) { /* map.for: this.dictI08 */
                    ++dictI08Idx;
                    SByte k1 = dictI08Iter.Key; /* nest.k */
                    s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                    SByte v1 = dictI08Iter.Value; /* nest.v */
                    s.Append(v1.ToString());
                    if (dictI08Idx != dictI08Size) { s.Append(','); }
                }
                s.Append('}');
            } comma = ",";
        }
        bool listNestedExists = (null != this.listNested && this.listNested.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listNestedExists) { s.Append(comma); comma = null; }
        if (listNestedExists) {
            int listNestedSize = (null == this.listNested ? 0 : this.listNested.Count);
            if (listNestedSize > 0) {
                s.Append('\n').Append('[');
                int listNestedIdx = 0;
                foreach (List<List<List<TestPointer>>> n1 in this.listNested) { /* vec.for: this.listNested */
                    ++listNestedIdx;
                    int n1Size = (null == n1 ? 0 : n1.Count);
                    if (n1Size > 0) {
                        s.Append('\n').Append('[');
                        int n1Idx = 0;
                        foreach (List<List<TestPointer>> n2 in n1) { /* vec.for: n1 */
                            ++n1Idx;
                            int n2Size = (null == n2 ? 0 : n2.Count);
                            if (n2Size > 0) {
                                s.Append('\n').Append('[');
                                int n2Idx = 0;
                                foreach (List<TestPointer> n3 in n2) { /* vec.for: n2 */
                                    ++n2Idx;
                                    int n3Size = (null == n3 ? 0 : n3.Count);
                                    if (n3Size > 0) {
                                        s.Append('\n').Append('[');
                                        int n3Idx = 0;
                                        foreach (TestPointer n4 in n3) { /* vec.for: n3 */
                                            ++n3Idx;
                                            n4.WriteJSON(s);
                                            if (n3Idx != n3Size) { s.Append(','); }
                                        }
                                        s.Append(']');
                                    }
                                    if (n2Idx != n2Size) { s.Append(','); }
                                }
                                s.Append(']');
                            }
                            if (n1Idx != n1Size) { s.Append(','); }
                        }
                        s.Append(']');
                    }
                    if (listNestedIdx != listNestedSize) { s.Append(','); }
                }
                s.Append(']');
            } comma = ",";
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberSingle").Append('"').Append(':'); comma = ","; s.Append(this.numberSingle.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("enumValue").Append('"').Append(':'); comma = ","; s.Append((int)this.enumValue);;
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"'); s.Append('"').Append(k1.ToString()).Append('"'); s.Append('"').Append(':');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                }
                s.Append('}');
            } comma = ",";
        }
        s.Append('}').Append('\n');
    } //TestPointer::WriteJSON(...)

    public StringBuilder ToStringLua()
    {
        StringBuilder code = new StringBuilder();
        code.Append("-- TestPointer.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" --").Append('\n');
        code.Append("local table=");
        this.WriteLua(code); code.Append(';');
        return code;
    }

    public void WriteLua(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        bool selfExists = (null != this.self);
        if (selfExists) {
            s.Append("self").Append('='); comma = ","; this.self.WriteLua(s);
        }
        bool stringValueExists = !String.IsNullOrEmpty(this.stringValue);
        if (!String.IsNullOrEmpty(comma) && stringValueExists) { s.Append(comma); comma = null; }
        if (stringValueExists) {
            s.Append("stringValue").Append('='); comma = ","; s.Append('"').Append(this.stringValue.ToString()).Append('"');
        }
        bool otherExists = (null != this.other);
        if (!String.IsNullOrEmpty(comma) && otherExists) { s.Append(comma); comma = null; }
        if (otherExists) {
            s.Append("other").Append('='); comma = ","; this.other.WriteLua(s);
        }
        bool listI08Exists = (null != this.listI08 && this.listI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI08Exists) { s.Append(comma); comma = null; }
        if (listI08Exists) {
            int listI08Size = (null == this.listI08 ? 0 : this.listI08.Count);
            if (listI08Size > 0) {
                s.Append('\n').Append('{');
                int listI08Idx = 0;
                foreach (SByte n1 in this.listI08) { /* vec.for: this.listI08 */
                    ++listI08Idx;
                    s.Append(n1.ToString());
                    if (listI08Idx != listI08Size) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        bool dictI08Exists = (null != this.dictI08 && this.dictI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI08Exists) { s.Append(comma); comma = null; }
        if (dictI08Exists) {
            int dictI08Size = (null == this.dictI08 ? 0 : this.dictI08.Count);
            if (dictI08Size > 0) {
                s.Append('\n').Append('{');
                int dictI08Idx = 0;
                foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) { /* map.for: this.dictI08 */
                    ++dictI08Idx;
                    SByte k1 = dictI08Iter.Key; /* nest.k */
                    s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                    SByte v1 = dictI08Iter.Value; /* nest.v */
                    s.Append(v1.ToString());
                    if (dictI08Idx != dictI08Size) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        bool listNestedExists = (null != this.listNested && this.listNested.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listNestedExists) { s.Append(comma); comma = null; }
        if (listNestedExists) {
            int listNestedSize = (null == this.listNested ? 0 : this.listNested.Count);
            if (listNestedSize > 0) {
                s.Append('\n').Append('{');
                int listNestedIdx = 0;
                foreach (List<List<List<TestPointer>>> n1 in this.listNested) { /* vec.for: this.listNested */
                    ++listNestedIdx;
                    int n1Size = (null == n1 ? 0 : n1.Count);
                    if (n1Size > 0) {
                        s.Append('\n').Append('{');
                        int n1Idx = 0;
                        foreach (List<List<TestPointer>> n2 in n1) { /* vec.for: n1 */
                            ++n1Idx;
                            int n2Size = (null == n2 ? 0 : n2.Count);
                            if (n2Size > 0) {
                                s.Append('\n').Append('{');
                                int n2Idx = 0;
                                foreach (List<TestPointer> n3 in n2) { /* vec.for: n2 */
                                    ++n2Idx;
                                    int n3Size = (null == n3 ? 0 : n3.Count);
                                    if (n3Size > 0) {
                                        s.Append('\n').Append('{');
                                        int n3Idx = 0;
                                        foreach (TestPointer n4 in n3) { /* vec.for: n3 */
                                            ++n3Idx;
                                            n4.WriteLua(s);
                                            if (n3Idx != n3Size) { s.Append(','); }
                                            s.Append('}');
                                        }
                                    }
                                    if (n2Idx != n2Size) { s.Append(','); }
                                    s.Append('}');
                                }
                            }
                            if (n1Idx != n1Size) { s.Append(','); }
                            s.Append('}');
                        }
                    }
                    if (listNestedIdx != listNestedSize) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberSingle").Append('='); comma = ","; s.Append(this.numberSingle.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("enumValue").Append('='); comma = ","; s.Append((int)this.enumValue);;
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"').Append(k1.ToString()).Append('"'); s.Append('=');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        s.Append('}').Append('\n');
    }

    public StringBuilder ToStringPHP()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?php ").Append("/* TestPointer.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" */").Append('\n');
        code.Append('\n').Append("return ");
        this.WritePHP(code); code.Append(';').Append('\n');
        return code;
    }

    public void WritePHP(StringBuilder s)
    {
        s.Append("array").Append('(').Append('\n');
        string comma = null;
        bool selfExists = (null != this.self);
        if (selfExists) {
            s.Append('\'').Append("self").Append('\'').Append("=>"); comma = ","; this.self.WritePHP(s);
        }
        bool stringValueExists = !String.IsNullOrEmpty(this.stringValue);
        if (!String.IsNullOrEmpty(comma) && stringValueExists) { s.Append(comma).Append('\n'); comma = null; }
        if (stringValueExists) {
            s.Append('\'').Append("stringValue").Append('\'').Append("=>"); comma = ","; s.Append('\'').Append(this.stringValue.ToString()).Append('\'');
        }
        bool otherExists = (null != this.other);
        if (!String.IsNullOrEmpty(comma) && otherExists) { s.Append(comma).Append('\n'); comma = null; }
        if (otherExists) {
            s.Append('\'').Append("other").Append('\'').Append("=>"); comma = ","; this.other.WritePHP(s);
        }
        bool listI08Exists = (null != this.listI08 && this.listI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listI08Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (listI08Exists) {
            int listI08Size = (null == this.listI08 ? 0 : this.listI08.Count);
            if (listI08Size > 0) {
                s.Append("array").Append('(').Append('\n');
                int listI08Idx = 0;
                foreach (SByte n1 in this.listI08) { /* vec.for: this.listI08 */
                    ++listI08Idx;
                    s.Append(n1.ToString());
                    if (listI08Idx != listI08Size) { s.Append(',').Append('\n'); }
                }
                s.Append("/* vec size: ").Append(this.listI08.Count).Append(" */").Append(')');
            } comma = ",";
        }
        bool dictI08Exists = (null != this.dictI08 && this.dictI08.Count > 0);
        if (!String.IsNullOrEmpty(comma) && dictI08Exists) { s.Append(comma).Append('\n'); comma = null; }
        if (dictI08Exists) {
            int dictI08Size = (null == this.dictI08 ? 0 : this.dictI08.Count);
            if (dictI08Size > 0) {
                s.Append("array").Append('(').Append('\n');
                int dictI08Idx = 0;
                foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) { /* map.for: this.dictI08 */
                    ++dictI08Idx;
                    SByte k1 = dictI08Iter.Key; /* nest.k */
                    s.Append(k1.ToString()); s.Append("=>");
                    SByte v1 = dictI08Iter.Value; /* nest.v */
                    s.Append(v1.ToString());
                    if (dictI08Idx != dictI08Size) { s.Append(','); s.Append('\n'); }
                }
                s.Append("/* map size: ").Append(this.dictI08.Count).Append(" */").Append(')');
            } comma = ",";
        }
        bool listNestedExists = (null != this.listNested && this.listNested.Count > 0);
        if (!String.IsNullOrEmpty(comma) && listNestedExists) { s.Append(comma).Append('\n'); comma = null; }
        if (listNestedExists) {
            int listNestedSize = (null == this.listNested ? 0 : this.listNested.Count);
            if (listNestedSize > 0) {
                s.Append("array").Append('(').Append('\n');
                int listNestedIdx = 0;
                foreach (List<List<List<TestPointer>>> n1 in this.listNested) { /* vec.for: this.listNested */
                    ++listNestedIdx;
                    int n1Size = (null == n1 ? 0 : n1.Count);
                    if (n1Size > 0) {
                        s.Append("array").Append('(').Append('\n');
                        int n1Idx = 0;
                        foreach (List<List<TestPointer>> n2 in n1) { /* vec.for: n1 */
                            ++n1Idx;
                            int n2Size = (null == n2 ? 0 : n2.Count);
                            if (n2Size > 0) {
                                s.Append("array").Append('(').Append('\n');
                                int n2Idx = 0;
                                foreach (List<TestPointer> n3 in n2) { /* vec.for: n2 */
                                    ++n2Idx;
                                    int n3Size = (null == n3 ? 0 : n3.Count);
                                    if (n3Size > 0) {
                                        s.Append("array").Append('(').Append('\n');
                                        int n3Idx = 0;
                                        foreach (TestPointer n4 in n3) { /* vec.for: n3 */
                                            ++n3Idx;
                                            n4.WritePHP(s);
                                            if (n3Idx != n3Size) { s.Append(',').Append('\n'); }
                                        }
                                        s.Append("/* vec size: ").Append(n3.Count).Append(" */").Append(')');
                                    }
                                    if (n2Idx != n2Size) { s.Append(',').Append('\n'); }
                                }
                                s.Append("/* vec size: ").Append(n2.Count).Append(" */").Append(')');
                            }
                            if (n1Idx != n1Size) { s.Append(',').Append('\n'); }
                        }
                        s.Append("/* vec size: ").Append(n1.Count).Append(" */").Append(')');
                    }
                    if (listNestedIdx != listNestedSize) { s.Append(',').Append('\n'); }
                }
                s.Append("/* vec size: ").Append(this.listNested.Count).Append(" */").Append(')');
            } comma = ",";
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberSingle").Append('\'').Append("=>"); comma = ","; s.Append(this.numberSingle.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("enumValue").Append('\'').Append("=>"); comma = ","; s.Append((int)this.enumValue);
        s.Append("/*Gender::").Append(this.enumValue.ToString()).Append("*/");
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma).Append('\n'); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append("array").Append('(').Append('\n');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('\'').Append(k1.ToString()).Append('\''); s.Append("=>");
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('\'').Append(v1.ToString()).Append('\'');
                    if (hotfixIdx != hotfixSize) { s.Append(','); s.Append('\n'); }
                }
                s.Append("/* map size: ").Append(this.hotfix.Count).Append(" */").Append(')');
            } comma = ",";
        }
        s.Append("/* ").Append(GetType().ToString()).Append(" */");
        s.Append(')');
    }

    public StringBuilder ToStringXML()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        code.Append('\n').Append("<!-- ").Append("TestPointer").Append(".CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" -->");
        this.WriteXML(code, "TestPointer");
        return code;
    }

    public void WriteXML(StringBuilder s, String name)
    {
        StringBuilder attrs = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        if (this.self != null) {
            this.self.WriteXML(nodes, "self");
        }
        if (this.stringValue != null) {
            attrs.Append(' ').Append("stringValue").Append('=').Append('"').Append(this.stringValue).Append('"');
        }
        if (this.other != null) {
            this.other.WriteXML(nodes, "other");
        }
        if (this.listI08 != null && this.listI08.Count > 0) {
            nodes.Append('\n').Append('<').Append("listI08").Append('>');
            foreach (SByte n1 in this.listI08) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("listI08").Append('>');
        }
        if (this.dictI08 != null && this.dictI08.Count > 0) {
            nodes.Append('\n').Append('<').Append("dictI08").Append('>');
            foreach (KeyValuePair<SByte,SByte> dictI08Iter in this.dictI08) {
                nodes.Append('\n');
                SByte k1 = dictI08Iter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                SByte v1 = dictI08Iter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("dictI08").Append('>');
        }
        if (this.listNested != null && this.listNested.Count > 0) {
            nodes.Append('\n').Append('<').Append("listNested").Append('>');
            foreach (List<List<List<TestPointer>>> n1 in this.listNested) {
                nodes.Append('\n').Append('<').Append("n1").Append('>');
                foreach (List<List<TestPointer>> n2 in n1) {
                    nodes.Append('\n').Append('<').Append("n2").Append('>');
                    foreach (List<TestPointer> n3 in n2) {
                        nodes.Append('\n').Append('<').Append("n3").Append('>');
                        foreach (TestPointer n4 in n3) {
                            n4.WriteXML(nodes, "n4");
                        }
                        nodes.Append('<').Append('/').Append("n3").Append('>');
                    }
                    nodes.Append('<').Append('/').Append("n2").Append('>');
                }
                nodes.Append('<').Append('/').Append("n1").Append('>');
            }
            nodes.Append('<').Append('/').Append("listNested").Append('>');
        }
        attrs.Append(' ').Append("numberSingle").Append('=').Append('"').Append(this.numberSingle.ToString()).Append('"');
        attrs.Append(' ').Append("enumValue").Append('=').Append('"').Append(this.enumValue.ToString()).Append('"');
        if (this.hotfix != null && this.hotfix.Count > 0) {
            nodes.Append('\n').Append('<').Append("hotfix").Append('>');
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                nodes.Append('\n');
                String k1 = hotfixIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1);
                nodes.Append('"').Append('/').Append('>');
                String v1 = hotfixIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("hotfix").Append('>');
        }
        s.Append('\n').Append('<').Append(name).Append(attrs);
        if (nodes.Length == 0) {
            s.Append('/').Append('>');
        } else {
            s.Append('>').Append(nodes);
            s.Append('<').Append('/').Append(name).Append('>');
        }
    } //TestPointer::WriteXML(...)

} //class: TestPointer
/*
1@test.xyz.TestPointer/Test.Xyz.TestPointer/string/Test.Abc.Custom/vec-int8/map-int8-int8/vec-vec-ve
  c-vec-Test.Xyz.TestPointer/float/int32/map-string-string
+@test.abc.Custom/int32/Test.Abc.TestBasic/Test.Xyz.Conflict/Test.Abc.Conflict/vec-Test.Abc.Custom/i
  nt32/string/string/Test.Abc.Custom/Test.Abc.Custom/string
*/
} //namespace: Test.Xyz