/*===-----------------------------*  C#  *---------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace Test.Abc {

using System.Collections.Generic;
using System.IO;
using System.Text;
using System;

/// Test comments.
public sealed class Info
: Invar.BinaryDecode
, Invar.BinaryEncode
, Invar.JSONEncode
, Invar.XMLEncode
{
    public const uint CRC32 = 0xD718E7CE;

    private Int32                     key           = 123;
    private SByte                     number01      = -1;
    private Int16                     number02      = -1;
    private Int32                     number03      = -1;
    private Int64                     number04      = -1L; // Test field comments.
    private Byte                      number05      = 0;
    private UInt16                    number06      = 0;
    private UInt32                    number07      = 0;
    private UInt64                    number08      = 0L;
    private Single                    number09      = 0.0F;
    private Double                    number10      = 0.00;
    private Boolean                   isReal        = false;
    private String                    s             = "hello"; // a string.
    private List<String>              world         = new List<String>();
    private Gender                    gender        = Gender.NONE;
    private Info                      next          = null;
    private Test.Abc.Conflict         conflict      = new Test.Abc.Conflict();
    private List<Test.Xyz.Conflict>   conflicts     = new List<Test.Xyz.Conflict>();
    private List<Double>              numbers       = new List<Double>();
    private Dictionary<Info,Gender>   mapInfoG      = new Dictionary<Info,Gender>();
    private Dictionary<Gender,Info>   mapGenderInfo = new Dictionary<Gender,Info>();
    private Dictionary<Int32,Double>  mapDouble     = new Dictionary<Int32,Double>();
    private Dictionary<String,String> hotfix        = null; // [AutoAdd] Hotfix.

    /// .
    [Invar.InvarRule("int32", "f0")]
    public Int32 GetKey() { return this.key; }

    /// .
    [Invar.InvarRule("int8", "f1")]
    public SByte GetNumber01() { return this.number01; }

    /// .
    [Invar.InvarRule("int16", "f2")]
    public Int16 GetNumber02() { return this.number02; }

    /// .
    [Invar.InvarRule("int32", "f3")]
    public Int32 GetNumber03() { return this.number03; }

    /// Test field comments.
    [Invar.InvarRule("int64", "f4")]
    public Int64 GetNumber04() { return this.number04; }

    /// .
    [Invar.InvarRule("uint8", "f5")]
    public Byte GetNumber05() { return this.number05; }

    /// .
    [Invar.InvarRule("uint16", "f6")]
    public UInt16 GetNumber06() { return this.number06; }

    /// .
    [Invar.InvarRule("uint32", "f7")]
    public UInt32 GetNumber07() { return this.number07; }

    /// .
    [Invar.InvarRule("uint64", "f8")]
    public UInt64 GetNumber08() { return this.number08; }

    /// .
    [Invar.InvarRule("float", "f9")]
    public Single GetNumber09() { return this.number09; }

    /// .
    [Invar.InvarRule("double", "f10")]
    public Double GetNumber10() { return this.number10; }

    /// .
    [Invar.InvarRule("bool", "f11")]
    public Boolean GetIsReal() { return this.isReal; }

    /// a string.
    [Invar.InvarRule("string", "f12")]
    public String GetS() { return this.s; }

    /// .
    [Invar.InvarRule("vec<string>", "f13")]
    public List<String> GetWorld() { return this.world; }

    /// .
    [Invar.InvarRule("Test.Abc.Gender", "f14")]
    public Gender GetGender() { return this.gender; }

    /// .
    [Invar.InvarRule("Test.Abc.Info", "f15")]
    public Info GetNext() { return this.next; }

    /// .
    [Invar.InvarRule("Test.Abc.Conflict", "f16")]
    public Test.Abc.Conflict GetConflict() { return this.conflict; }

    /// .
    [Invar.InvarRule("vec<Test.Xyz.Conflict>", "f17")]
    public List<Test.Xyz.Conflict> GetConflicts() { return this.conflicts; }

    /// .
    [Invar.InvarRule("vec<double>", "f18")]
    public List<Double> GetNumbers() { return this.numbers; }

    /// .
    [Invar.InvarRule("map<Test.Abc.Info,Test.Abc.Gender>", "f19")]
    public Dictionary<Info,Gender> GetMapInfoG() { return this.mapInfoG; }

    /// .
    [Invar.InvarRule("map<Test.Abc.Gender,Test.Abc.Info>", "f20")]
    public Dictionary<Gender,Info> GetMapGenderInfo() { return this.mapGenderInfo; }

    /// .
    [Invar.InvarRule("map<int32,double>", "f21")]
    public Dictionary<Int32,Double> GetMapDouble() { return this.mapDouble; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "f22")]
    public Dictionary<String,String> GetHotfix() { return this.hotfix; }

    /// .
    [Invar.InvarRule("int32", "f0")]
    public Info SetKey(Int32 value) { this.key = value; return this; }

    /// .
    [Invar.InvarRule("int8", "f1")]
    public Info SetNumber01(SByte value) { this.number01 = value; return this; }

    /// .
    [Invar.InvarRule("int16", "f2")]
    public Info SetNumber02(Int16 value) { this.number02 = value; return this; }

    /// .
    [Invar.InvarRule("int32", "f3")]
    public Info SetNumber03(Int32 value) { this.number03 = value; return this; }

    /// Test field comments.
    [Invar.InvarRule("int64", "f4")]
    public Info SetNumber04(Int64 value) { this.number04 = value; return this; }

    /// .
    [Invar.InvarRule("uint8", "f5")]
    public Info SetNumber05(Byte value) { this.number05 = value; return this; }

    /// .
    [Invar.InvarRule("uint16", "f6")]
    public Info SetNumber06(UInt16 value) { this.number06 = value; return this; }

    /// .
    [Invar.InvarRule("uint32", "f7")]
    public Info SetNumber07(UInt32 value) { this.number07 = value; return this; }

    /// .
    [Invar.InvarRule("uint64", "f8")]
    public Info SetNumber08(UInt64 value) { this.number08 = value; return this; }

    /// .
    [Invar.InvarRule("float", "f9")]
    public Info SetNumber09(Single value) { this.number09 = value; return this; }

    /// .
    [Invar.InvarRule("double", "f10")]
    public Info SetNumber10(Double value) { this.number10 = value; return this; }

    /// .
    [Invar.InvarRule("bool", "f11")]
    public Info SetIsReal(Boolean value) { this.isReal = value; return this; }

    /// a string.
    [Invar.InvarRule("string", "f12")]
    public Info SetS(String value) { this.s = value; return this; }

    /// .
    [Invar.InvarRule("Test.Abc.Gender", "f14")]
    public Info SetGender(Gender value) { this.gender = value; return this; }

    /// .
    [Invar.InvarRule("Test.Abc.Info", "f15")]
    public Info SetNext(Info value) { this.next = value; return this; }

    /// .
    [Invar.InvarRule("Test.Abc.Conflict", "f16")]
    public Info SetConflict(Test.Abc.Conflict value) { this.conflict = value; return this; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "f22")]
    public Info SetHotfix(Dictionary<String,String> value) { this.hotfix = value; return this; }

    public Info Reuse()
    {
        this.key         = 123;
        this.number01    = -1;
        this.number02    = -1;
        this.number03    = -1;
        this.number04    = -1L;
        this.number05    = 0;
        this.number06    = 0;
        this.number07    = 0;
        this.number08    = 0L;
        this.number09    = 0.0F;
        this.number10    = 0.00;
        this.isReal      = false;
        this.s           = "hello";
        this.world.Clear();
        this.gender      = Gender.NONE;
        if (this.next != null) { this.next.Reuse(); }
        this.conflict.Reuse();
        this.conflicts.Clear();
        this.numbers.Clear();
        this.mapInfoG.Clear();
        this.mapGenderInfo.Clear();
        this.mapDouble.Clear();
        if (this.hotfix != null) { this.hotfix.Clear(); }
        return this;
    } //Info::Reuse()

    public Info Copy(Info from_)
    {
        if (null == from_ || this == from_) {
            return this;
        }
        this.key = from_.key;
        this.number01 = from_.number01;
        this.number02 = from_.number02;
        this.number03 = from_.number03;
        this.number04 = from_.number04;
        this.number05 = from_.number05;
        this.number06 = from_.number06;
        this.number07 = from_.number07;
        this.number08 = from_.number08;
        this.number09 = from_.number09;
        this.number10 = from_.number10;
        this.isReal = from_.isReal;
        this.s = from_.s;
        this.world.Clear();
        this.world.AddRange(from_.world);
        this.gender = from_.gender;
        if (null == from_.next) {
            this.next = null;
        } else {
            if (null == this.next) { this.next = new Info(); }
            this.next.Copy(from_.next);
        }
        this.conflict.Copy(from_.conflict);
        this.conflicts.Clear();
        this.conflicts.AddRange(from_.conflicts);
        this.numbers.Clear();
        this.numbers.AddRange(from_.numbers);
        this.mapInfoG.Clear();
        foreach (var mapInfoGIter in from_.mapInfoG) {
            this.mapInfoG.Add(mapInfoGIter.Key, mapInfoGIter.Value);
        }
        this.mapGenderInfo.Clear();
        foreach (var mapGenderInfoIter in from_.mapGenderInfo) {
            this.mapGenderInfo.Add(mapGenderInfoIter.Key, mapGenderInfoIter.Value);
        }
        this.mapDouble.Clear();
        foreach (var mapDoubleIter in from_.mapDouble) {
            this.mapDouble.Add(mapDoubleIter.Key, mapDoubleIter.Value);
        }
        if (null == from_.hotfix) {
            this.hotfix = null;
        } else {
            if (null == this.hotfix) { this.hotfix = new Dictionary<String,String>(); }
            else { this.hotfix.Clear(); }
            foreach (var hotfixIter in from_.hotfix) {
                this.hotfix.Add(hotfixIter.Key, hotfixIter.Value);
            }
        }
        return this;
    } //Info::Copy(...)

    public void Read(BinaryReader r)
    {
        this.key = r.ReadInt32();
        this.number01 = r.ReadSByte();
        this.number02 = r.ReadInt16();
        this.number03 = r.ReadInt32();
        this.number04 = r.ReadInt64();
        this.number05 = r.ReadByte();
        this.number06 = r.ReadUInt16();
        this.number07 = r.ReadUInt32();
        this.number08 = r.ReadUInt64();
        this.number09 = r.ReadSingle();
        this.number10 = r.ReadDouble();
        this.isReal = r.ReadBoolean();
        this.s = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
        UInt32 lenWorld = r.ReadUInt32();
        for (UInt32 iWorld = 0; iWorld < lenWorld; iWorld++) {
            String n1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
            this.world.Add(n1);
        }
        this.gender = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
        sbyte nextExists = r.ReadSByte();
        if ((sbyte)0x01 == nextExists) {
            if (this.next == null) { this.next = new Info(); }
            this.next.Read(r);
        }
        else if ((sbyte)0x00 == nextExists) { this.next = null; }
        else { throw new IOException("Protoc read error: The value of 'nextExists' is invalid.", 497); }
        this.conflict.Read(r);
        UInt32 lenConflicts = r.ReadUInt32();
        for (UInt32 iConflicts = 0; iConflicts < lenConflicts; iConflicts++) {
            Test.Xyz.Conflict n1 = new Test.Xyz.Conflict();
            n1.Read(r);
            this.conflicts.Add(n1);
        }
        UInt32 lenNumbers = r.ReadUInt32();
        for (UInt32 iNumbers = 0; iNumbers < lenNumbers; iNumbers++) {
            Double n1 = r.ReadDouble();
            this.numbers.Add(n1);
        }
        UInt32 lenMapInfoG = r.ReadUInt32();
        for (UInt32 iMapInfoG = 0; iMapInfoG < lenMapInfoG; iMapInfoG++) {
            Info k1 = new Info();
            k1.Read(r);
            Gender v1 = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
            if (!this.mapInfoG.ContainsKey(k1)) {
                this.mapInfoG.Add(k1, v1);
            } else {
                this.mapInfoG[k1] = v1;
            }
        }
        UInt32 lenMapGenderInfo = r.ReadUInt32();
        for (UInt32 iMapGenderInfo = 0; iMapGenderInfo < lenMapGenderInfo; iMapGenderInfo++) {
            Gender k1 = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
            Info v1 = new Info();
            v1.Read(r);
            if (!this.mapGenderInfo.ContainsKey(k1)) {
                this.mapGenderInfo.Add(k1, v1);
            } else {
                this.mapGenderInfo[k1] = v1;
            }
        }
        UInt32 lenMapDouble = r.ReadUInt32();
        for (UInt32 iMapDouble = 0; iMapDouble < lenMapDouble; iMapDouble++) {
            Int32 k1 = r.ReadInt32();
            Double v1 = r.ReadDouble();
            if (!this.mapDouble.ContainsKey(k1)) {
                this.mapDouble.Add(k1, v1);
            } else {
                this.mapDouble[k1] = v1;
            }
        }
        sbyte hotfixExists = r.ReadSByte();
        if ((sbyte)0x01 == hotfixExists) {
            if (this.hotfix == null) { this.hotfix = new Dictionary<String,String>(); }
            UInt32 lenHotfix = r.ReadUInt32();
            for (UInt32 iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
                String k1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                String v1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                if (!this.hotfix.ContainsKey(k1)) {
                    this.hotfix.Add(k1, v1);
                } else {
                    this.hotfix[k1] = v1;
                }
            }
        }
        else if ((sbyte)0x00 == hotfixExists) { this.hotfix = null; }
        else { throw new IOException("Protoc read error: The value of 'hotfixExists' is invalid.", 498); }
    } //Info::Read(...)

    public void Write(BinaryWriter w)
    {
        w.Write(this.key);
        w.Write(this.number01);
        w.Write(this.number02);
        w.Write(this.number03);
        w.Write(this.number04);
        w.Write(this.number05);
        w.Write(this.number06);
        w.Write(this.number07);
        w.Write(this.number08);
        w.Write(this.number09);
        w.Write(this.number10);
        w.Write(this.isReal);
        byte[] sBytes = Encoding.UTF8.GetBytes(this.s);
        w.Write(sBytes.Length);
        w.Write(sBytes);
        w.Write(this.world.Count);
        foreach (String n1 in this.world) {
            byte[] n1Bytes = Encoding.UTF8.GetBytes(n1);
            w.Write(n1Bytes.Length);
            w.Write(n1Bytes);
        }
        w.Write((Int32)this.gender);
        if (this.next != null) {
            w.Write((sbyte)0x01);
            this.next.Write(w);
        } else {
            w.Write((sbyte)0x00);
        }
        this.conflict.Write(w);
        w.Write(this.conflicts.Count);
        foreach (Test.Xyz.Conflict n1 in this.conflicts) {
            n1.Write(w);
        }
        w.Write(this.numbers.Count);
        foreach (Double n1 in this.numbers) {
            w.Write(n1);
        }
        w.Write(this.mapInfoG.Count);
        foreach (KeyValuePair<Info,Gender> mapInfoGIter in this.mapInfoG) {
            Info k1 = mapInfoGIter.Key;
            k1.Write(w);
            Gender v1 = mapInfoGIter.Value;
            w.Write((Int32)v1);
        }
        w.Write(this.mapGenderInfo.Count);
        foreach (KeyValuePair<Gender,Info> mapGenderInfoIter in this.mapGenderInfo) {
            Gender k1 = mapGenderInfoIter.Key;
            w.Write((Int32)k1);
            Info v1 = mapGenderInfoIter.Value;
            v1.Write(w);
        }
        w.Write(this.mapDouble.Count);
        foreach (KeyValuePair<Int32,Double> mapDoubleIter in this.mapDouble) {
            Int32 k1 = mapDoubleIter.Key;
            w.Write(k1);
            Double v1 = mapDoubleIter.Value;
            w.Write(v1);
        }
        if (this.hotfix != null) {
            w.Write((sbyte)0x01);
            w.Write(this.hotfix.Count);
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                String k1 = hotfixIter.Key;
                byte[] k1Bytes = Encoding.UTF8.GetBytes(k1);
                w.Write(k1Bytes.Length);
                w.Write(k1Bytes);
                String v1 = hotfixIter.Value;
                byte[] v1Bytes = Encoding.UTF8.GetBytes(v1);
                w.Write(v1Bytes.Length);
                w.Write(v1Bytes);
            }
        } else {
            w.Write((sbyte)0x00);
        }
    } //Info::Write(...)

    public override String ToString()
    {
        StringBuilder result = new StringBuilder();
        result.Append('{').Append(' ');
        result.Append(GetType().ToString());
        result.Append(',').Append(' ').Append("key").Append(':');
        result.Append(this.key.ToString());
        result.Append(',').Append(' ').Append("number01").Append(':');
        result.Append(this.number01.ToString());
        result.Append(',').Append(' ').Append("number02").Append(':');
        result.Append(this.number02.ToString());
        result.Append(',').Append(' ').Append("number03").Append(':');
        result.Append(this.number03.ToString());
        result.Append(',').Append(' ').Append("number04").Append(':');
        result.Append(this.number04.ToString());
        result.Append(',').Append(' ').Append("number05").Append(':');
        result.Append(this.number05.ToString());
        result.Append(',').Append(' ').Append("number06").Append(':');
        result.Append(this.number06.ToString());
        result.Append(',').Append(' ').Append("number07").Append(':');
        result.Append(this.number07.ToString());
        result.Append(',').Append(' ').Append("number08").Append(':');
        result.Append(this.number08.ToString());
        result.Append(',').Append(' ').Append("number09").Append(':');
        result.Append(this.number09.ToString());
        result.Append(',').Append(' ').Append("number10").Append(':');
        result.Append(this.number10.ToString());
        result.Append(',').Append(' ').Append("isReal").Append(':');
        result.Append(this.isReal.ToString());
        result.Append(',').Append(' ').Append("s").Append(':');
        result.Append("\"" + this.s + "\"");
        result.Append(',').Append(' ').Append("world").Append(':');
        result.Append("(" + this.world.Count + ")");
        result.Append(',').Append(' ').Append("gender").Append(':');
        result.Append(this.gender.ToString());
        result.Append(',').Append(' ').Append("next").Append(':');
        if (this.next != null) { result.Append("<Info>"); }
        else { result.Append("null"); }
        result.Append(',').Append(' ').Append("conflict").Append(':');
        result.Append("<Test.Abc.Conflict>");
        result.Append(',').Append(' ').Append("conflicts").Append(':');
        result.Append("(" + this.conflicts.Count + ")");
        result.Append(',').Append(' ').Append("numbers").Append(':');
        result.Append("(" + this.numbers.Count + ")");
        result.Append(',').Append(' ').Append("mapInfoG").Append(':');
        result.Append("[" + this.mapInfoG.Count + "]");
        result.Append(',').Append(' ').Append("mapGenderInfo").Append(':');
        result.Append("[" + this.mapGenderInfo.Count + "]");
        result.Append(',').Append(' ').Append("mapDouble").Append(':');
        result.Append("[" + this.mapDouble.Count + "]");
        result.Append(',').Append(' ').Append("hotfix").Append(':');
        if (this.hotfix != null) { result.Append("[" + this.hotfix.Count + "]"); }
        else { result.Append("null"); }
        result.Append(' ').Append('}');
        return result.ToString();
    } //Info::ToString()

    public StringBuilder ToStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.WriteJSON(code);
        return code;
    }

    public void WriteJSON(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        s.Append('"').Append("key").Append('"').Append(':'); comma = ","; s.Append(this.key.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("number01").Append('"').Append(':'); comma = ","; s.Append(this.number01.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("number02").Append('"').Append(':'); comma = ","; s.Append(this.number02.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("number03").Append('"').Append(':'); comma = ","; s.Append(this.number03.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("number04").Append('"').Append(':'); comma = ","; s.Append(this.number04.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("number05").Append('"').Append(':'); comma = ","; s.Append(this.number05.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("number06").Append('"').Append(':'); comma = ","; s.Append(this.number06.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("number07").Append('"').Append(':'); comma = ","; s.Append(this.number07.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("number08").Append('"').Append(':'); comma = ","; s.Append(this.number08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("number09").Append('"').Append(':'); comma = ","; s.Append(this.number09.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("number10").Append('"').Append(':'); comma = ","; s.Append(this.number10.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("isReal").Append('"').Append(':'); comma = ","; s.Append(this.isReal.ToString().ToLower());
        bool sExists = !String.IsNullOrEmpty(this.s);
        if (!String.IsNullOrEmpty(comma) && sExists) { s.Append(comma); comma = null; }
        if (sExists) {
            s.Append('"').Append("s").Append('"').Append(':'); comma = ","; s.Append('"').Append(this.s.ToString()).Append('"');
        }
        bool worldExists = (null != this.world && this.world.Count > 0);
        if (!String.IsNullOrEmpty(comma) && worldExists) { s.Append(comma); comma = null; }
        if (worldExists) { s.Append('"').Append("world").Append('"').Append(':'); comma = ","; }
        int worldSize = (null == this.world ? 0 : this.world.Count);
        if (worldSize > 0) {
            s.Append('\n').Append('[');
            int worldIdx = 0;
            foreach (String n1 in this.world) { /* vec.for: this.world */
                ++worldIdx;
                s.Append('"').Append(n1.ToString()).Append('"');
                if (worldIdx != worldSize) { s.Append(','); }
            }
            s.Append(']');
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("gender").Append('"').Append(':'); comma = ","; s.Append((int)this.gender);;
        bool nextExists = (null != this.next);
        if (!String.IsNullOrEmpty(comma) && nextExists) { s.Append(comma); comma = null; }
        if (nextExists) {
            s.Append('"').Append("next").Append('"').Append(':'); comma = ","; this.next.WriteJSON(s);
        }
        bool conflictExists = (null != this.conflict);
        if (!String.IsNullOrEmpty(comma) && conflictExists) { s.Append(comma); comma = null; }
        if (conflictExists) {
            s.Append('"').Append("conflict").Append('"').Append(':'); comma = ","; this.conflict.WriteJSON(s);
        }
        bool conflictsExists = (null != this.conflicts && this.conflicts.Count > 0);
        if (!String.IsNullOrEmpty(comma) && conflictsExists) { s.Append(comma); comma = null; }
        if (conflictsExists) { s.Append('"').Append("conflicts").Append('"').Append(':'); comma = ","; }
        int conflictsSize = (null == this.conflicts ? 0 : this.conflicts.Count);
        if (conflictsSize > 0) {
            s.Append('\n').Append('[');
            int conflictsIdx = 0;
            foreach (Test.Xyz.Conflict n1 in this.conflicts) { /* vec.for: this.conflicts */
                ++conflictsIdx;
                n1.WriteJSON(s);
                if (conflictsIdx != conflictsSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool numbersExists = (null != this.numbers && this.numbers.Count > 0);
        if (!String.IsNullOrEmpty(comma) && numbersExists) { s.Append(comma); comma = null; }
        if (numbersExists) { s.Append('"').Append("numbers").Append('"').Append(':'); comma = ","; }
        int numbersSize = (null == this.numbers ? 0 : this.numbers.Count);
        if (numbersSize > 0) {
            s.Append('\n').Append('[');
            int numbersIdx = 0;
            foreach (Double n1 in this.numbers) { /* vec.for: this.numbers */
                ++numbersIdx;
                s.Append(n1.ToString());
                if (numbersIdx != numbersSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool mapInfoGExists = (null != this.mapInfoG && this.mapInfoG.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mapInfoGExists) { s.Append(comma); comma = null; }
        if (mapInfoGExists) { s.Append('"').Append("mapInfoG").Append('"').Append(':'); comma = ","; }
        int mapInfoGSize = (null == this.mapInfoG ? 0 : this.mapInfoG.Count);
        if (mapInfoGSize > 0) {
            s.Append('\n').Append('{');
            int mapInfoGIdx = 0;
            foreach (KeyValuePair<Info,Gender> mapInfoGIter in this.mapInfoG) { /* map.for: this.mapInfoG */
                ++mapInfoGIdx;
                Info k1 = mapInfoGIter.Key; /* nest.k */
                s.Append('"'); k1.WriteJSON(s); s.Append('"').Append(':');
                Gender v1 = mapInfoGIter.Value; /* nest.v */
                s.Append((int)v1);;
                if (mapInfoGIdx != mapInfoGSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool mapGenderInfoExists = (null != this.mapGenderInfo && this.mapGenderInfo.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mapGenderInfoExists) { s.Append(comma); comma = null; }
        if (mapGenderInfoExists) { s.Append('"').Append("mapGenderInfo").Append('"').Append(':'); comma = ","; }
        int mapGenderInfoSize = (null == this.mapGenderInfo ? 0 : this.mapGenderInfo.Count);
        if (mapGenderInfoSize > 0) {
            s.Append('\n').Append('{');
            int mapGenderInfoIdx = 0;
            foreach (KeyValuePair<Gender,Info> mapGenderInfoIter in this.mapGenderInfo) { /* map.for: this.mapGenderInfo */
                ++mapGenderInfoIdx;
                Gender k1 = mapGenderInfoIter.Key; /* nest.k */
                s.Append('"'); s.Append((int)k1);; s.Append('"').Append(':');
                Info v1 = mapGenderInfoIter.Value; /* nest.v */
                v1.WriteJSON(s);
                if (mapGenderInfoIdx != mapGenderInfoSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool mapDoubleExists = (null != this.mapDouble && this.mapDouble.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mapDoubleExists) { s.Append(comma); comma = null; }
        if (mapDoubleExists) { s.Append('"').Append("mapDouble").Append('"').Append(':'); comma = ","; }
        int mapDoubleSize = (null == this.mapDouble ? 0 : this.mapDouble.Count);
        if (mapDoubleSize > 0) {
            s.Append('\n').Append('{');
            int mapDoubleIdx = 0;
            foreach (KeyValuePair<Int32,Double> mapDoubleIter in this.mapDouble) { /* map.for: this.mapDouble */
                ++mapDoubleIdx;
                Int32 k1 = mapDoubleIter.Key; /* nest.k */
                s.Append('"'); s.Append(k1.ToString()); s.Append('"').Append(':');
                Double v1 = mapDoubleIter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (mapDoubleIdx != mapDoubleSize) { s.Append(','); }
            }
            s.Append('}');
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"'); s.Append('"').Append(k1.ToString()).Append('"'); s.Append('"').Append(':');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                }
                s.Append('}');
            } comma = ",";
        }
        s.Append('}').Append('\n');
    } //Info::WriteJSON(...)

    public StringBuilder ToStringLua()
    {
        StringBuilder code = new StringBuilder();
        code.Append("-- Info.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" --").Append('\n');
        code.Append("local table=");
        this.WriteLua(code); code.Append(';');
        return code;
    }

    public void WriteLua(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        s.Append("key").Append('='); comma = ","; s.Append(this.key.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("number01").Append('='); comma = ","; s.Append(this.number01.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("number02").Append('='); comma = ","; s.Append(this.number02.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("number03").Append('='); comma = ","; s.Append(this.number03.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("number04").Append('='); comma = ","; s.Append(this.number04.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("number05").Append('='); comma = ","; s.Append(this.number05.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("number06").Append('='); comma = ","; s.Append(this.number06.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("number07").Append('='); comma = ","; s.Append(this.number07.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("number08").Append('='); comma = ","; s.Append(this.number08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("number09").Append('='); comma = ","; s.Append(this.number09.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("number10").Append('='); comma = ","; s.Append(this.number10.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("isReal").Append('='); comma = ","; s.Append(this.isReal.ToString().ToLower());
        bool sExists = !String.IsNullOrEmpty(this.s);
        if (!String.IsNullOrEmpty(comma) && sExists) { s.Append(comma); comma = null; }
        if (sExists) {
            s.Append("s").Append('='); comma = ","; s.Append('"').Append(this.s.ToString()).Append('"');
        }
        bool worldExists = (null != this.world && this.world.Count > 0);
        if (!String.IsNullOrEmpty(comma) && worldExists) { s.Append(comma); comma = null; }
        if (worldExists) { s.Append("world").Append('='); comma = ","; }
        int worldSize = (null == this.world ? 0 : this.world.Count);
        if (worldSize > 0) {
            s.Append('\n').Append('{');
            int worldIdx = 0;
            foreach (String n1 in this.world) { /* vec.for: this.world */
                ++worldIdx;
                s.Append('"').Append(n1.ToString()).Append('"');
                if (worldIdx != worldSize) { s.Append(','); }
                s.Append('}');
            }
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("gender").Append('='); comma = ","; s.Append((int)this.gender);;
        bool nextExists = (null != this.next);
        if (!String.IsNullOrEmpty(comma) && nextExists) { s.Append(comma); comma = null; }
        if (nextExists) {
            s.Append("next").Append('='); comma = ","; this.next.WriteLua(s);
        }
        bool conflictExists = (null != this.conflict);
        if (!String.IsNullOrEmpty(comma) && conflictExists) { s.Append(comma); comma = null; }
        if (conflictExists) {
            s.Append("conflict").Append('='); comma = ","; this.conflict.WriteLua(s);
        }
        bool conflictsExists = (null != this.conflicts && this.conflicts.Count > 0);
        if (!String.IsNullOrEmpty(comma) && conflictsExists) { s.Append(comma); comma = null; }
        if (conflictsExists) { s.Append("conflicts").Append('='); comma = ","; }
        int conflictsSize = (null == this.conflicts ? 0 : this.conflicts.Count);
        if (conflictsSize > 0) {
            s.Append('\n').Append('{');
            int conflictsIdx = 0;
            foreach (Test.Xyz.Conflict n1 in this.conflicts) { /* vec.for: this.conflicts */
                ++conflictsIdx;
                n1.WriteLua(s);
                if (conflictsIdx != conflictsSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool numbersExists = (null != this.numbers && this.numbers.Count > 0);
        if (!String.IsNullOrEmpty(comma) && numbersExists) { s.Append(comma); comma = null; }
        if (numbersExists) { s.Append("numbers").Append('='); comma = ","; }
        int numbersSize = (null == this.numbers ? 0 : this.numbers.Count);
        if (numbersSize > 0) {
            s.Append('\n').Append('{');
            int numbersIdx = 0;
            foreach (Double n1 in this.numbers) { /* vec.for: this.numbers */
                ++numbersIdx;
                s.Append(n1.ToString());
                if (numbersIdx != numbersSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool mapInfoGExists = (null != this.mapInfoG && this.mapInfoG.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mapInfoGExists) { s.Append(comma); comma = null; }
        if (mapInfoGExists) { s.Append("mapInfoG").Append('='); comma = ","; }
        int mapInfoGSize = (null == this.mapInfoG ? 0 : this.mapInfoG.Count);
        if (mapInfoGSize > 0) {
            s.Append('\n').Append('{');
            int mapInfoGIdx = 0;
            foreach (KeyValuePair<Info,Gender> mapInfoGIter in this.mapInfoG) { /* map.for: this.mapInfoG */
                ++mapInfoGIdx;
                Info k1 = mapInfoGIter.Key; /* nest.k */
                k1.WriteLua(s); s.Append('=');
                Gender v1 = mapInfoGIter.Value; /* nest.v */
                s.Append((int)v1);;
                if (mapInfoGIdx != mapInfoGSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool mapGenderInfoExists = (null != this.mapGenderInfo && this.mapGenderInfo.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mapGenderInfoExists) { s.Append(comma); comma = null; }
        if (mapGenderInfoExists) { s.Append("mapGenderInfo").Append('='); comma = ","; }
        int mapGenderInfoSize = (null == this.mapGenderInfo ? 0 : this.mapGenderInfo.Count);
        if (mapGenderInfoSize > 0) {
            s.Append('\n').Append('{');
            int mapGenderInfoIdx = 0;
            foreach (KeyValuePair<Gender,Info> mapGenderInfoIter in this.mapGenderInfo) { /* map.for: this.mapGenderInfo */
                ++mapGenderInfoIdx;
                Gender k1 = mapGenderInfoIter.Key; /* nest.k */
                s.Append('['); s.Append((int)k1);; s.Append(']').Append('=');
                Info v1 = mapGenderInfoIter.Value; /* nest.v */
                v1.WriteLua(s);
                if (mapGenderInfoIdx != mapGenderInfoSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool mapDoubleExists = (null != this.mapDouble && this.mapDouble.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mapDoubleExists) { s.Append(comma); comma = null; }
        if (mapDoubleExists) { s.Append("mapDouble").Append('='); comma = ","; }
        int mapDoubleSize = (null == this.mapDouble ? 0 : this.mapDouble.Count);
        if (mapDoubleSize > 0) {
            s.Append('\n').Append('{');
            int mapDoubleIdx = 0;
            foreach (KeyValuePair<Int32,Double> mapDoubleIter in this.mapDouble) { /* map.for: this.mapDouble */
                ++mapDoubleIdx;
                Int32 k1 = mapDoubleIter.Key; /* nest.k */
                s.Append('['); s.Append(k1.ToString()); s.Append(']').Append('=');
                Double v1 = mapDoubleIter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (mapDoubleIdx != mapDoubleSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"').Append(k1.ToString()).Append('"'); s.Append('=');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        s.Append('}').Append('\n');
    }

    public StringBuilder ToStringPHP()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?php ").Append("/* Info.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" */").Append('\n');
        code.Append('\n').Append("return ");
        this.WritePHP(code); code.Append(';').Append('\n');
        return code;
    }

    public void WritePHP(StringBuilder s)
    {
        s.Append("array").Append('(').Append('\n');
        string comma = null;
        s.Append('\'').Append("key").Append('\'').Append("=>"); comma = ","; s.Append(this.key.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("number01").Append('\'').Append("=>"); comma = ","; s.Append(this.number01.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("number02").Append('\'').Append("=>"); comma = ","; s.Append(this.number02.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("number03").Append('\'').Append("=>"); comma = ","; s.Append(this.number03.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("number04").Append('\'').Append("=>"); comma = ","; s.Append(this.number04.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("number05").Append('\'').Append("=>"); comma = ","; s.Append(this.number05.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("number06").Append('\'').Append("=>"); comma = ","; s.Append(this.number06.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("number07").Append('\'').Append("=>"); comma = ","; s.Append(this.number07.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("number08").Append('\'').Append("=>"); comma = ","; s.Append(this.number08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("number09").Append('\'').Append("=>"); comma = ","; s.Append(this.number09.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("number10").Append('\'').Append("=>"); comma = ","; s.Append(this.number10.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("isReal").Append('\'').Append("=>"); comma = ","; s.Append(this.isReal.ToString().ToLower());
        bool sExists = !String.IsNullOrEmpty(this.s);
        if (!String.IsNullOrEmpty(comma) && sExists) { s.Append(comma).Append('\n'); comma = null; }
        if (sExists) {
            s.Append('\'').Append("s").Append('\'').Append("=>"); comma = ","; s.Append('\'').Append(this.s.ToString()).Append('\'');
        }
        bool worldExists = (null != this.world && this.world.Count > 0);
        if (!String.IsNullOrEmpty(comma) && worldExists) { s.Append(comma).Append('\n'); comma = null; }
        if (worldExists) { s.Append('\'').Append("world").Append('\'').Append("=>"); comma = ","; }
        int worldSize = (null == this.world ? 0 : this.world.Count);
        if (worldSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int worldIdx = 0;
            foreach (String n1 in this.world) { /* vec.for: this.world */
                ++worldIdx;
                s.Append('\'').Append(n1.ToString()).Append('\'');
                if (worldIdx != worldSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.world.Count).Append(" */").Append(')');
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("gender").Append('\'').Append("=>"); comma = ","; s.Append((int)this.gender);
        s.Append("/*Gender::").Append(this.gender.ToString()).Append("*/");
        bool nextExists = (null != this.next);
        if (!String.IsNullOrEmpty(comma) && nextExists) { s.Append(comma).Append('\n'); comma = null; }
        if (nextExists) {
            s.Append('\'').Append("next").Append('\'').Append("=>"); comma = ","; this.next.WritePHP(s);
        }
        bool conflictExists = (null != this.conflict);
        if (!String.IsNullOrEmpty(comma) && conflictExists) { s.Append(comma).Append('\n'); comma = null; }
        if (conflictExists) {
            s.Append('\'').Append("conflict").Append('\'').Append("=>"); comma = ","; this.conflict.WritePHP(s);
        }
        bool conflictsExists = (null != this.conflicts && this.conflicts.Count > 0);
        if (!String.IsNullOrEmpty(comma) && conflictsExists) { s.Append(comma).Append('\n'); comma = null; }
        if (conflictsExists) { s.Append('\'').Append("conflicts").Append('\'').Append("=>"); comma = ","; }
        int conflictsSize = (null == this.conflicts ? 0 : this.conflicts.Count);
        if (conflictsSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int conflictsIdx = 0;
            foreach (Test.Xyz.Conflict n1 in this.conflicts) { /* vec.for: this.conflicts */
                ++conflictsIdx;
                n1.WritePHP(s);
                if (conflictsIdx != conflictsSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.conflicts.Count).Append(" */").Append(')');
        }
        bool numbersExists = (null != this.numbers && this.numbers.Count > 0);
        if (!String.IsNullOrEmpty(comma) && numbersExists) { s.Append(comma).Append('\n'); comma = null; }
        if (numbersExists) { s.Append('\'').Append("numbers").Append('\'').Append("=>"); comma = ","; }
        int numbersSize = (null == this.numbers ? 0 : this.numbers.Count);
        if (numbersSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int numbersIdx = 0;
            foreach (Double n1 in this.numbers) { /* vec.for: this.numbers */
                ++numbersIdx;
                s.Append(n1.ToString());
                if (numbersIdx != numbersSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.numbers.Count).Append(" */").Append(')');
        }
        bool mapInfoGExists = (null != this.mapInfoG && this.mapInfoG.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mapInfoGExists) { s.Append(comma).Append('\n'); comma = null; }
        if (mapInfoGExists) { s.Append('\'').Append("mapInfoG").Append('\'').Append("=>"); comma = ","; }
        int mapInfoGSize = (null == this.mapInfoG ? 0 : this.mapInfoG.Count);
        if (mapInfoGSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int mapInfoGIdx = 0;
            foreach (KeyValuePair<Info,Gender> mapInfoGIter in this.mapInfoG) { /* map.for: this.mapInfoG */
                ++mapInfoGIdx;
                Info k1 = mapInfoGIter.Key; /* nest.k */
                k1.WritePHP(s); s.Append("=>");
                Gender v1 = mapInfoGIter.Value; /* nest.v */
                s.Append((int)v1);
                s.Append("/*Gender::").Append(v1.ToString()).Append("*/");
                if (mapInfoGIdx != mapInfoGSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.mapInfoG.Count).Append(" */").Append(')');
        }
        bool mapGenderInfoExists = (null != this.mapGenderInfo && this.mapGenderInfo.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mapGenderInfoExists) { s.Append(comma).Append('\n'); comma = null; }
        if (mapGenderInfoExists) { s.Append('\'').Append("mapGenderInfo").Append('\'').Append("=>"); comma = ","; }
        int mapGenderInfoSize = (null == this.mapGenderInfo ? 0 : this.mapGenderInfo.Count);
        if (mapGenderInfoSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int mapGenderInfoIdx = 0;
            foreach (KeyValuePair<Gender,Info> mapGenderInfoIter in this.mapGenderInfo) { /* map.for: this.mapGenderInfo */
                ++mapGenderInfoIdx;
                Gender k1 = mapGenderInfoIter.Key; /* nest.k */
                s.Append((int)k1);
                s.Append("/*Gender::").Append(k1.ToString()).Append("*/"); s.Append("=>");
                Info v1 = mapGenderInfoIter.Value; /* nest.v */
                v1.WritePHP(s);
                if (mapGenderInfoIdx != mapGenderInfoSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.mapGenderInfo.Count).Append(" */").Append(')');
        }
        bool mapDoubleExists = (null != this.mapDouble && this.mapDouble.Count > 0);
        if (!String.IsNullOrEmpty(comma) && mapDoubleExists) { s.Append(comma).Append('\n'); comma = null; }
        if (mapDoubleExists) { s.Append('\'').Append("mapDouble").Append('\'').Append("=>"); comma = ","; }
        int mapDoubleSize = (null == this.mapDouble ? 0 : this.mapDouble.Count);
        if (mapDoubleSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int mapDoubleIdx = 0;
            foreach (KeyValuePair<Int32,Double> mapDoubleIter in this.mapDouble) { /* map.for: this.mapDouble */
                ++mapDoubleIdx;
                Int32 k1 = mapDoubleIter.Key; /* nest.k */
                s.Append(k1.ToString()); s.Append("=>");
                Double v1 = mapDoubleIter.Value; /* nest.v */
                s.Append(v1.ToString());
                if (mapDoubleIdx != mapDoubleSize) { s.Append(','); s.Append('\n'); }
            }
            s.Append("/* map size: ").Append(this.mapDouble.Count).Append(" */").Append(')');
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma).Append('\n'); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append("array").Append('(').Append('\n');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('\'').Append(k1.ToString()).Append('\''); s.Append("=>");
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('\'').Append(v1.ToString()).Append('\'');
                    if (hotfixIdx != hotfixSize) { s.Append(','); s.Append('\n'); }
                }
                s.Append("/* map size: ").Append(this.hotfix.Count).Append(" */").Append(')');
            } comma = ",";
        }
        s.Append("/* ").Append(GetType().ToString()).Append(" */");
        s.Append(')');
    }

    public StringBuilder ToStringXML()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        code.Append('\n').Append("<!-- ").Append("Info").Append(".CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" -->");
        this.WriteXML(code, "Info");
        return code;
    }

    public void WriteXML(StringBuilder s, String name)
    {
        StringBuilder attrs = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        attrs.Append(' ').Append("key").Append('=').Append('"').Append(this.key.ToString()).Append('"');
        attrs.Append(' ').Append("number01").Append('=').Append('"').Append(this.number01.ToString()).Append('"');
        attrs.Append(' ').Append("number02").Append('=').Append('"').Append(this.number02.ToString()).Append('"');
        attrs.Append(' ').Append("number03").Append('=').Append('"').Append(this.number03.ToString()).Append('"');
        attrs.Append(' ').Append("number04").Append('=').Append('"').Append(this.number04.ToString()).Append('"');
        attrs.Append(' ').Append("number05").Append('=').Append('"').Append(this.number05.ToString()).Append('"');
        attrs.Append(' ').Append("number06").Append('=').Append('"').Append(this.number06.ToString()).Append('"');
        attrs.Append(' ').Append("number07").Append('=').Append('"').Append(this.number07.ToString()).Append('"');
        attrs.Append(' ').Append("number08").Append('=').Append('"').Append(this.number08.ToString()).Append('"');
        attrs.Append(' ').Append("number09").Append('=').Append('"').Append(this.number09.ToString()).Append('"');
        attrs.Append(' ').Append("number10").Append('=').Append('"').Append(this.number10.ToString()).Append('"');
        attrs.Append(' ').Append("isReal").Append('=').Append('"').Append(this.isReal.ToString()).Append('"');
        attrs.Append(' ').Append("s").Append('=').Append('"').Append(this.s).Append('"');
        if (this.world.Count > 0) {
            nodes.Append('\n').Append('<').Append("world").Append('>');
            foreach (String n1 in this.world) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("world").Append('>');
        }
        attrs.Append(' ').Append("gender").Append('=').Append('"').Append(this.gender.ToString()).Append('"');
        if (this.next != null) {
            this.next.WriteXML(nodes, "next");
        }
        this.conflict.WriteXML(nodes, "conflict");
        if (this.conflicts.Count > 0) {
            nodes.Append('\n').Append('<').Append("conflicts").Append('>');
            foreach (Test.Xyz.Conflict n1 in this.conflicts) {
                n1.WriteXML(nodes, "n1");
            }
            nodes.Append('<').Append('/').Append("conflicts").Append('>');
        }
        if (this.numbers.Count > 0) {
            nodes.Append('\n').Append('<').Append("numbers").Append('>');
            foreach (Double n1 in this.numbers) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("numbers").Append('>');
        }
        if (this.mapInfoG.Count > 0) {
            nodes.Append('\n').Append('<').Append("mapInfoG").Append('>');
            foreach (KeyValuePair<Info,Gender> mapInfoGIter in this.mapInfoG) {
                nodes.Append('\n');
                Info k1 = mapInfoGIter.Key;
                k1.WriteXML(nodes, "k1");
                Gender v1 = mapInfoGIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("mapInfoG").Append('>');
        }
        if (this.mapGenderInfo.Count > 0) {
            nodes.Append('\n').Append('<').Append("mapGenderInfo").Append('>');
            foreach (KeyValuePair<Gender,Info> mapGenderInfoIter in this.mapGenderInfo) {
                nodes.Append('\n');
                Gender k1 = mapGenderInfoIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Info v1 = mapGenderInfoIter.Value;
                v1.WriteXML(nodes, "v1");
            }
            nodes.Append('<').Append('/').Append("mapGenderInfo").Append('>');
        }
        if (this.mapDouble.Count > 0) {
            nodes.Append('\n').Append('<').Append("mapDouble").Append('>');
            foreach (KeyValuePair<Int32,Double> mapDoubleIter in this.mapDouble) {
                nodes.Append('\n');
                Int32 k1 = mapDoubleIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1.ToString());
                nodes.Append('"').Append('/').Append('>');
                Double v1 = mapDoubleIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("mapDouble").Append('>');
        }
        if (this.hotfix != null && this.hotfix.Count > 0) {
            nodes.Append('\n').Append('<').Append("hotfix").Append('>');
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                nodes.Append('\n');
                String k1 = hotfixIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1);
                nodes.Append('"').Append('/').Append('>');
                String v1 = hotfixIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("hotfix").Append('>');
        }
        s.Append('\n').Append('<').Append(name).Append(attrs);
        if (nodes.Length == 0) {
            s.Append('/').Append('>');
        } else {
            s.Append('>').Append(nodes);
            s.Append('<').Append('/').Append(name).Append('>');
        }
    } //Info::WriteXML(...)

} //class: Info
/*
2@test.abc.Info/int32/int8/int16/int32/int64/uint8/uint16/uint32/uint64/float/double/bool/string/vec
  -string/int32/Test.Abc.Info/Test.Abc.Conflict/vec-Test.Xyz.Conflict/vec-double/map-Test.Abc.Info-i
  nt32/map-int32-Test.Abc.Info/map-int32-double/map-string-string
+@test.abc.Conflict/int32/string/vec-int8/map-string-string
+@test.xyz.Conflict/double/map-string-string
*/
} //namespace: Test.Abc