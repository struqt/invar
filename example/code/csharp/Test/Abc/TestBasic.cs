/*===-----------------------------*  C#  *---------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace Test.Abc {

using System.Collections.Generic;
using System.IO;
using System.Text;
using System;

/// 基础类型.
public sealed class TestBasic
: Invar.BinaryDecode
, Invar.BinaryEncode
, Invar.JSONEncode
, Invar.XMLEncode
{
    public const uint CRC32 = 0x65717264;

    private SByte                     numberI08    = -128; // 有符号的8位整数.
    private Int16                     numberI16    = -32768; // 有符号的16位整数.
    private Int32                     numberI32    = -2147483648; // 有符号的32位整数.
    private Int64                     numberI64    = -9223372036854774808L; // 有符号的64位整数.
    private Byte                      numberU08    = 255; // 无符号的8位整数.
    private UInt16                    numberU16    = 65535; // 无符号的16位整数.
    private UInt32                    numberU32    = 4294967295; // 无符号的32位整数.
    private UInt64                    numberU64    = 18446744073709551615L; // 无符号的64位整数.
    private Single                    numberSingle = 3.14159F; // 单精度浮点小数.
    private Double                    numberDouble = 3.1415926; // 双精度浮点小数.
    private Boolean                   boolValue    = false; // 布尔值.
    private String                    stringValue  = "hello世界"; // 字符串.
    private Gender                    enumValue    = Gender.NONE; // 枚举值.
    private Gender                    enumDeft     = Gender.MALE; // 枚举值制定默认值.
    private Dictionary<String,String> hotfix       = null; // [AutoAdd] Hotfix.

    /// 有符号的8位整数.
    [Invar.InvarRule("int8", "0")]
    public SByte GetNumberI08() { return this.numberI08; }

    /// 有符号的16位整数.
    [Invar.InvarRule("int16", "1")]
    public Int16 GetNumberI16() { return this.numberI16; }

    /// 有符号的32位整数.
    [Invar.InvarRule("int32", "2")]
    public Int32 GetNumberI32() { return this.numberI32; }

    /// 有符号的64位整数.
    [Invar.InvarRule("int64", "3")]
    public Int64 GetNumberI64() { return this.numberI64; }

    /// 无符号的8位整数.
    [Invar.InvarRule("uint8", "4")]
    public Byte GetNumberU08() { return this.numberU08; }

    /// 无符号的16位整数.
    [Invar.InvarRule("uint16", "5")]
    public UInt16 GetNumberU16() { return this.numberU16; }

    /// 无符号的32位整数.
    [Invar.InvarRule("uint32", "6")]
    public UInt32 GetNumberU32() { return this.numberU32; }

    /// 无符号的64位整数.
    [Invar.InvarRule("uint64", "7")]
    public UInt64 GetNumberU64() { return this.numberU64; }

    /// 单精度浮点小数.
    [Invar.InvarRule("float", "8")]
    public Single GetNumberSingle() { return this.numberSingle; }

    /// 双精度浮点小数.
    [Invar.InvarRule("double", "9")]
    public Double GetNumberDouble() { return this.numberDouble; }

    /// 布尔值.
    [Invar.InvarRule("bool", "10")]
    public Boolean GetBoolValue() { return this.boolValue; }

    /// 字符串.
    [Invar.InvarRule("string", "11")]
    public String GetStringValue() { return this.stringValue; }

    /// 枚举值.
    [Invar.InvarRule("Test.Abc.Gender", "12")]
    public Gender GetEnumValue() { return this.enumValue; }

    /// 枚举值制定默认值.
    [Invar.InvarRule("Test.Abc.Gender", "13")]
    public Gender GetEnumDeft() { return this.enumDeft; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "14")]
    public Dictionary<String,String> GetHotfix() { return this.hotfix; }

    /// 有符号的8位整数.
    [Invar.InvarRule("int8", "0")]
    public TestBasic SetNumberI08(SByte value) { this.numberI08 = value; return this; }

    /// 有符号的16位整数.
    [Invar.InvarRule("int16", "1")]
    public TestBasic SetNumberI16(Int16 value) { this.numberI16 = value; return this; }

    /// 有符号的32位整数.
    [Invar.InvarRule("int32", "2")]
    public TestBasic SetNumberI32(Int32 value) { this.numberI32 = value; return this; }

    /// 有符号的64位整数.
    [Invar.InvarRule("int64", "3")]
    public TestBasic SetNumberI64(Int64 value) { this.numberI64 = value; return this; }

    /// 无符号的8位整数.
    [Invar.InvarRule("uint8", "4")]
    public TestBasic SetNumberU08(Byte value) { this.numberU08 = value; return this; }

    /// 无符号的16位整数.
    [Invar.InvarRule("uint16", "5")]
    public TestBasic SetNumberU16(UInt16 value) { this.numberU16 = value; return this; }

    /// 无符号的32位整数.
    [Invar.InvarRule("uint32", "6")]
    public TestBasic SetNumberU32(UInt32 value) { this.numberU32 = value; return this; }

    /// 无符号的64位整数.
    [Invar.InvarRule("uint64", "7")]
    public TestBasic SetNumberU64(UInt64 value) { this.numberU64 = value; return this; }

    /// 单精度浮点小数.
    [Invar.InvarRule("float", "8")]
    public TestBasic SetNumberSingle(Single value) { this.numberSingle = value; return this; }

    /// 双精度浮点小数.
    [Invar.InvarRule("double", "9")]
    public TestBasic SetNumberDouble(Double value) { this.numberDouble = value; return this; }

    /// 布尔值.
    [Invar.InvarRule("bool", "10")]
    public TestBasic SetBoolValue(Boolean value) { this.boolValue = value; return this; }

    /// 字符串.
    [Invar.InvarRule("string", "11")]
    public TestBasic SetStringValue(String value) { this.stringValue = value; return this; }

    /// 枚举值.
    [Invar.InvarRule("Test.Abc.Gender", "12")]
    public TestBasic SetEnumValue(Gender value) { this.enumValue = value; return this; }

    /// 枚举值制定默认值.
    [Invar.InvarRule("Test.Abc.Gender", "13")]
    public TestBasic SetEnumDeft(Gender value) { this.enumDeft = value; return this; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "14")]
    public TestBasic SetHotfix(Dictionary<String,String> value) { this.hotfix = value; return this; }

    public TestBasic Reuse()
    {
        this.numberI08   = -128;
        this.numberI16   = -32768;
        this.numberI32   = -2147483648;
        this.numberI64   = -9223372036854774808L;
        this.numberU08   = 255;
        this.numberU16   = 65535;
        this.numberU32   = 4294967295;
        this.numberU64   = 18446744073709551615L;
        this.numberSingle = 3.14159F;
        this.numberDouble = 3.1415926;
        this.boolValue   = false;
        this.stringValue = "hello世界";
        this.enumValue   = Gender.NONE;
        this.enumDeft    = Gender.MALE;
        if (this.hotfix != null) { this.hotfix.Clear(); }
        return this;
    } //TestBasic::Reuse()

    public TestBasic Copy(TestBasic from_)
    {
        if (null == from_ || this == from_) {
            return this;
        }
        this.numberI08 = from_.numberI08;
        this.numberI16 = from_.numberI16;
        this.numberI32 = from_.numberI32;
        this.numberI64 = from_.numberI64;
        this.numberU08 = from_.numberU08;
        this.numberU16 = from_.numberU16;
        this.numberU32 = from_.numberU32;
        this.numberU64 = from_.numberU64;
        this.numberSingle = from_.numberSingle;
        this.numberDouble = from_.numberDouble;
        this.boolValue = from_.boolValue;
        this.stringValue = from_.stringValue;
        this.enumValue = from_.enumValue;
        this.enumDeft = from_.enumDeft;
        if (null == from_.hotfix) {
            this.hotfix = null;
        } else {
            if (null == this.hotfix) { this.hotfix = new Dictionary<String,String>(); }
            else { this.hotfix.Clear(); }
            foreach (var hotfixIter in from_.hotfix) {
                this.hotfix.Add(hotfixIter.Key, hotfixIter.Value);
            }
        }
        return this;
    } //TestBasic::Copy(...)

    public void Read(BinaryReader r)
    {
        this.numberI08 = r.ReadSByte();
        this.numberI16 = r.ReadInt16();
        this.numberI32 = r.ReadInt32();
        this.numberI64 = r.ReadInt64();
        this.numberU08 = r.ReadByte();
        this.numberU16 = r.ReadUInt16();
        this.numberU32 = r.ReadUInt32();
        this.numberU64 = r.ReadUInt64();
        this.numberSingle = r.ReadSingle();
        this.numberDouble = r.ReadDouble();
        this.boolValue = r.ReadBoolean();
        this.stringValue = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
        this.enumValue = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
        this.enumDeft = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
        sbyte hotfixExists = r.ReadSByte();
        if ((sbyte)0x01 == hotfixExists) {
            if (this.hotfix == null) { this.hotfix = new Dictionary<String,String>(); }
            UInt32 lenHotfix = r.ReadUInt32();
            for (UInt32 iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
                String k1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                String v1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                if (!this.hotfix.ContainsKey(k1)) {
                    this.hotfix.Add(k1, v1);
                } else {
                    this.hotfix[k1] = v1;
                }
            }
        }
        else if ((sbyte)0x00 == hotfixExists) { this.hotfix = null; }
        else { throw new IOException("Protoc read error: The value of 'hotfixExists' is invalid.", 498); }
    } //TestBasic::Read(...)

    public void Write(BinaryWriter w)
    {
        w.Write(this.numberI08);
        w.Write(this.numberI16);
        w.Write(this.numberI32);
        w.Write(this.numberI64);
        w.Write(this.numberU08);
        w.Write(this.numberU16);
        w.Write(this.numberU32);
        w.Write(this.numberU64);
        w.Write(this.numberSingle);
        w.Write(this.numberDouble);
        w.Write(this.boolValue);
        byte[] stringValueBytes = Encoding.UTF8.GetBytes(this.stringValue);
        w.Write(stringValueBytes.Length);
        w.Write(stringValueBytes);
        w.Write((Int32)this.enumValue);
        w.Write((Int32)this.enumDeft);
        if (this.hotfix != null) {
            w.Write((sbyte)0x01);
            w.Write(this.hotfix.Count);
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                String k1 = hotfixIter.Key;
                byte[] k1Bytes = Encoding.UTF8.GetBytes(k1);
                w.Write(k1Bytes.Length);
                w.Write(k1Bytes);
                String v1 = hotfixIter.Value;
                byte[] v1Bytes = Encoding.UTF8.GetBytes(v1);
                w.Write(v1Bytes.Length);
                w.Write(v1Bytes);
            }
        } else {
            w.Write((sbyte)0x00);
        }
    } //TestBasic::Write(...)

    public override String ToString()
    {
        StringBuilder result = new StringBuilder();
        result.Append('{').Append(' ');
        result.Append(GetType().ToString());
        result.Append(',').Append(' ').Append("numberI08").Append(':');
        result.Append(this.numberI08.ToString());
        result.Append(',').Append(' ').Append("numberI16").Append(':');
        result.Append(this.numberI16.ToString());
        result.Append(',').Append(' ').Append("numberI32").Append(':');
        result.Append(this.numberI32.ToString());
        result.Append(',').Append(' ').Append("numberI64").Append(':');
        result.Append(this.numberI64.ToString());
        result.Append(',').Append(' ').Append("numberU08").Append(':');
        result.Append(this.numberU08.ToString());
        result.Append(',').Append(' ').Append("numberU16").Append(':');
        result.Append(this.numberU16.ToString());
        result.Append(',').Append(' ').Append("numberU32").Append(':');
        result.Append(this.numberU32.ToString());
        result.Append(',').Append(' ').Append("numberU64").Append(':');
        result.Append(this.numberU64.ToString());
        result.Append(',').Append(' ').Append("numberSingle").Append(':');
        result.Append(this.numberSingle.ToString());
        result.Append(',').Append(' ').Append("numberDouble").Append(':');
        result.Append(this.numberDouble.ToString());
        result.Append(',').Append(' ').Append("boolValue").Append(':');
        result.Append(this.boolValue.ToString());
        result.Append(',').Append(' ').Append("stringValue").Append(':');
        result.Append("\"" + this.stringValue + "\"");
        result.Append(',').Append(' ').Append("enumValue").Append(':');
        result.Append(this.enumValue.ToString());
        result.Append(',').Append(' ').Append("enumDeft").Append(':');
        result.Append(this.enumDeft.ToString());
        result.Append(',').Append(' ').Append("hotfix").Append(':');
        if (this.hotfix != null) { result.Append("[" + this.hotfix.Count + "]"); }
        else { result.Append("null"); }
        result.Append(' ').Append('}');
        return result.ToString();
    } //TestBasic::ToString()

    public StringBuilder ToStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.WriteJSON(code);
        return code;
    }

    public void WriteJSON(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        s.Append('"').Append("numberI08").Append('"').Append(':'); comma = ","; s.Append(this.numberI08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberI16").Append('"').Append(':'); comma = ","; s.Append(this.numberI16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberI32").Append('"').Append(':'); comma = ","; s.Append(this.numberI32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberI64").Append('"').Append(':'); comma = ","; s.Append(this.numberI64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberU08").Append('"').Append(':'); comma = ","; s.Append(this.numberU08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberU16").Append('"').Append(':'); comma = ","; s.Append(this.numberU16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberU32").Append('"').Append(':'); comma = ","; s.Append(this.numberU32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberU64").Append('"').Append(':'); comma = ","; s.Append(this.numberU64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberSingle").Append('"').Append(':'); comma = ","; s.Append(this.numberSingle.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("numberDouble").Append('"').Append(':'); comma = ","; s.Append(this.numberDouble.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("boolValue").Append('"').Append(':'); comma = ","; s.Append(this.boolValue.ToString().ToLower());
        bool stringValueExists = !String.IsNullOrEmpty(this.stringValue);
        if (!String.IsNullOrEmpty(comma) && stringValueExists) { s.Append(comma); comma = null; }
        if (stringValueExists) {
            s.Append('"').Append("stringValue").Append('"').Append(':'); comma = ","; s.Append('"').Append(this.stringValue.ToString()).Append('"');
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("enumValue").Append('"').Append(':'); comma = ","; s.Append((int)this.enumValue);;
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append('"').Append("enumDeft").Append('"').Append(':'); comma = ","; s.Append((int)this.enumDeft);;
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"'); s.Append('"').Append(k1.ToString()).Append('"'); s.Append('"').Append(':');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                }
                s.Append('}');
            } comma = ",";
        }
        s.Append('}').Append('\n');
    } //TestBasic::WriteJSON(...)

    public StringBuilder ToStringLua()
    {
        StringBuilder code = new StringBuilder();
        code.Append("-- TestBasic.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" --").Append('\n');
        code.Append("local table=");
        this.WriteLua(code); code.Append(';');
        return code;
    }

    public void WriteLua(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        s.Append("numberI08").Append('='); comma = ","; s.Append(this.numberI08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberI16").Append('='); comma = ","; s.Append(this.numberI16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberI32").Append('='); comma = ","; s.Append(this.numberI32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberI64").Append('='); comma = ","; s.Append(this.numberI64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberU08").Append('='); comma = ","; s.Append(this.numberU08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberU16").Append('='); comma = ","; s.Append(this.numberU16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberU32").Append('='); comma = ","; s.Append(this.numberU32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberU64").Append('='); comma = ","; s.Append(this.numberU64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberSingle").Append('='); comma = ","; s.Append(this.numberSingle.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("numberDouble").Append('='); comma = ","; s.Append(this.numberDouble.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("boolValue").Append('='); comma = ","; s.Append(this.boolValue.ToString().ToLower());
        bool stringValueExists = !String.IsNullOrEmpty(this.stringValue);
        if (!String.IsNullOrEmpty(comma) && stringValueExists) { s.Append(comma); comma = null; }
        if (stringValueExists) {
            s.Append("stringValue").Append('='); comma = ","; s.Append('"').Append(this.stringValue.ToString()).Append('"');
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("enumValue").Append('='); comma = ","; s.Append((int)this.enumValue);;
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma); comma = null; }
        s.Append("enumDeft").Append('='); comma = ","; s.Append((int)this.enumDeft);;
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"').Append(k1.ToString()).Append('"'); s.Append('=');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        s.Append('}').Append('\n');
    }

    public StringBuilder ToStringPHP()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?php ").Append("/* TestBasic.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" */").Append('\n');
        code.Append('\n').Append("return ");
        this.WritePHP(code); code.Append(';').Append('\n');
        return code;
    }

    public void WritePHP(StringBuilder s)
    {
        s.Append("array").Append('(').Append('\n');
        string comma = null;
        s.Append('\'').Append("numberI08").Append('\'').Append("=>"); comma = ","; s.Append(this.numberI08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberI16").Append('\'').Append("=>"); comma = ","; s.Append(this.numberI16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberI32").Append('\'').Append("=>"); comma = ","; s.Append(this.numberI32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberI64").Append('\'').Append("=>"); comma = ","; s.Append(this.numberI64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberU08").Append('\'').Append("=>"); comma = ","; s.Append(this.numberU08.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberU16").Append('\'').Append("=>"); comma = ","; s.Append(this.numberU16.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberU32").Append('\'').Append("=>"); comma = ","; s.Append(this.numberU32.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberU64").Append('\'').Append("=>"); comma = ","; s.Append(this.numberU64.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberSingle").Append('\'').Append("=>"); comma = ","; s.Append(this.numberSingle.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("numberDouble").Append('\'').Append("=>"); comma = ","; s.Append(this.numberDouble.ToString());
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("boolValue").Append('\'').Append("=>"); comma = ","; s.Append(this.boolValue.ToString().ToLower());
        bool stringValueExists = !String.IsNullOrEmpty(this.stringValue);
        if (!String.IsNullOrEmpty(comma) && stringValueExists) { s.Append(comma).Append('\n'); comma = null; }
        if (stringValueExists) {
            s.Append('\'').Append("stringValue").Append('\'').Append("=>"); comma = ","; s.Append('\'').Append(this.stringValue.ToString()).Append('\'');
        }
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("enumValue").Append('\'').Append("=>"); comma = ","; s.Append((int)this.enumValue);
        s.Append("/*Gender::").Append(this.enumValue.ToString()).Append("*/");
        if (!String.IsNullOrEmpty(comma)) { s.Append(comma).Append('\n'); comma = null; }
        s.Append('\'').Append("enumDeft").Append('\'').Append("=>"); comma = ","; s.Append((int)this.enumDeft);
        s.Append("/*Gender::").Append(this.enumDeft.ToString()).Append("*/");
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma).Append('\n'); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append("array").Append('(').Append('\n');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('\'').Append(k1.ToString()).Append('\''); s.Append("=>");
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('\'').Append(v1.ToString()).Append('\'');
                    if (hotfixIdx != hotfixSize) { s.Append(','); s.Append('\n'); }
                }
                s.Append("/* map size: ").Append(this.hotfix.Count).Append(" */").Append(')');
            } comma = ",";
        }
        s.Append("/* ").Append(GetType().ToString()).Append(" */");
        s.Append(')');
    }

    public StringBuilder ToStringXML()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        code.Append('\n').Append("<!-- ").Append("TestBasic").Append(".CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" -->");
        this.WriteXML(code, "TestBasic");
        return code;
    }

    public void WriteXML(StringBuilder s, String name)
    {
        StringBuilder attrs = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        attrs.Append(' ').Append("numberI08").Append('=').Append('"').Append(this.numberI08.ToString()).Append('"');
        attrs.Append(' ').Append("numberI16").Append('=').Append('"').Append(this.numberI16.ToString()).Append('"');
        attrs.Append(' ').Append("numberI32").Append('=').Append('"').Append(this.numberI32.ToString()).Append('"');
        attrs.Append(' ').Append("numberI64").Append('=').Append('"').Append(this.numberI64.ToString()).Append('"');
        attrs.Append(' ').Append("numberU08").Append('=').Append('"').Append(this.numberU08.ToString()).Append('"');
        attrs.Append(' ').Append("numberU16").Append('=').Append('"').Append(this.numberU16.ToString()).Append('"');
        attrs.Append(' ').Append("numberU32").Append('=').Append('"').Append(this.numberU32.ToString()).Append('"');
        attrs.Append(' ').Append("numberU64").Append('=').Append('"').Append(this.numberU64.ToString()).Append('"');
        attrs.Append(' ').Append("numberSingle").Append('=').Append('"').Append(this.numberSingle.ToString()).Append('"');
        attrs.Append(' ').Append("numberDouble").Append('=').Append('"').Append(this.numberDouble.ToString()).Append('"');
        attrs.Append(' ').Append("boolValue").Append('=').Append('"').Append(this.boolValue.ToString()).Append('"');
        attrs.Append(' ').Append("stringValue").Append('=').Append('"').Append(this.stringValue).Append('"');
        attrs.Append(' ').Append("enumValue").Append('=').Append('"').Append(this.enumValue.ToString()).Append('"');
        attrs.Append(' ').Append("enumDeft").Append('=').Append('"').Append(this.enumDeft.ToString()).Append('"');
        if (this.hotfix != null && this.hotfix.Count > 0) {
            nodes.Append('\n').Append('<').Append("hotfix").Append('>');
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                nodes.Append('\n');
                String k1 = hotfixIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1);
                nodes.Append('"').Append('/').Append('>');
                String v1 = hotfixIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("hotfix").Append('>');
        }
        s.Append('\n').Append('<').Append(name).Append(attrs);
        if (nodes.Length == 0) {
            s.Append('/').Append('>');
        } else {
            s.Append('>').Append(nodes);
            s.Append('<').Append('/').Append(name).Append('>');
        }
    } //TestBasic::WriteXML(...)

} /* class: TestBasic */
/*
0@test.abc.TestBasic/int8/int16/int32/int64/uint8/uint16/uint32/uint64/float/double/bool/string/int3
  2/int32/map-string-string
*/
} //namespace: Test.Abc