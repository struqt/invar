/*===-----------------------------*  C#  *---------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace Test.Abc {

using System.Collections.Generic;
using System.IO;
using System.Text;
using System;

/// 名字冲突的类型.
public sealed class Conflict
: Invar.BinaryDecode
, Invar.BinaryEncode
, Invar.JSONEncode
, Invar.XMLEncode
{
    public const uint CRC32 = 0xCC7A29B9;

    private Gender                    key    = Gender.NONE;
    private String                    text   = "";
    private List<SByte>               bytes  = new List<SByte>();
    private Dictionary<String,String> hotfix = null; // [AutoAdd] Hotfix.

    /// .
    [Invar.InvarRule("Test.Abc.Gender", "0")]
    public Gender GetKey() { return this.key; }

    /// .
    [Invar.InvarRule("string", "1")]
    public String GetText() { return this.text; }

    /// .
    [Invar.InvarRule("vec<int8>", "2")]
    public List<SByte> GetBytes() { return this.bytes; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "3")]
    public Dictionary<String,String> GetHotfix() { return this.hotfix; }

    /// .
    [Invar.InvarRule("Test.Abc.Gender", "0")]
    public Conflict SetKey(Gender value) { this.key = value; return this; }

    /// .
    [Invar.InvarRule("string", "1")]
    public Conflict SetText(String value) { this.text = value; return this; }

    /// [AutoAdd] Hotfix.
    [Invar.InvarRule("map<string,string>", "3")]
    public Conflict SetHotfix(Dictionary<String,String> value) { this.hotfix = value; return this; }

    public Conflict Reuse()
    {
        this.key    = Gender.NONE;
        this.text   = "";
        this.bytes.Clear();
        if (this.hotfix != null) { this.hotfix.Clear(); }
        return this;
    } //Conflict::Reuse()

    public Conflict Copy(Conflict from_)
    {
        if (null == from_ || this == from_) {
            return this;
        }
        this.key = from_.key;
        this.text = from_.text;
        this.bytes.Clear();
        this.bytes.AddRange(from_.bytes);
        if (null == from_.hotfix) {
            this.hotfix = null;
        } else {
            if (null == this.hotfix) { this.hotfix = new Dictionary<String,String>(); }
            else { this.hotfix.Clear(); }
            foreach (var hotfixIter in from_.hotfix) {
                this.hotfix.Add(hotfixIter.Key, hotfixIter.Value);
            }
        }
        return this;
    } //Conflict::Copy(...)

    public void Read(BinaryReader r)
    {
        this.key = (Gender)Enum.ToObject(typeof(Gender), r.ReadInt32());
        this.text = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
        UInt32 lenBytes = r.ReadUInt32();
        for (UInt32 iBytes = 0; iBytes < lenBytes; iBytes++) {
            SByte n1 = r.ReadSByte();
            this.bytes.Add(n1);
        }
        sbyte hotfixExists = r.ReadSByte();
        if ((sbyte)0x01 == hotfixExists) {
            if (this.hotfix == null) { this.hotfix = new Dictionary<String,String>(); }
            UInt32 lenHotfix = r.ReadUInt32();
            for (UInt32 iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
                String k1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                String v1 = Encoding.UTF8.GetString(r.ReadBytes(r.ReadInt32()));
                if (!this.hotfix.ContainsKey(k1)) {
                    this.hotfix.Add(k1, v1);
                } else {
                    this.hotfix[k1] = v1;
                }
            }
        }
        else if ((sbyte)0x00 == hotfixExists) { this.hotfix = null; }
        else { throw new IOException("Protoc read error: The value of 'hotfixExists' is invalid.", 498); }
    } //Conflict::Read(...)

    public void Write(BinaryWriter w)
    {
        w.Write((Int32)this.key);
        byte[] textBytes = Encoding.UTF8.GetBytes(this.text);
        w.Write(textBytes.Length);
        w.Write(textBytes);
        w.Write(this.bytes.Count);
        foreach (SByte n1 in this.bytes) {
            w.Write(n1);
        }
        if (this.hotfix != null) {
            w.Write((sbyte)0x01);
            w.Write(this.hotfix.Count);
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                String k1 = hotfixIter.Key;
                byte[] k1Bytes = Encoding.UTF8.GetBytes(k1);
                w.Write(k1Bytes.Length);
                w.Write(k1Bytes);
                String v1 = hotfixIter.Value;
                byte[] v1Bytes = Encoding.UTF8.GetBytes(v1);
                w.Write(v1Bytes.Length);
                w.Write(v1Bytes);
            }
        } else {
            w.Write((sbyte)0x00);
        }
    } //Conflict::Write(...)

    public override String ToString()
    {
        StringBuilder result = new StringBuilder();
        result.Append('{').Append(' ');
        result.Append(GetType().ToString());
        result.Append(',').Append(' ').Append("key").Append(':');
        result.Append(this.key.ToString());
        result.Append(',').Append(' ').Append("text").Append(':');
        result.Append("\"" + this.text + "\"");
        result.Append(',').Append(' ').Append("bytes").Append(':');
        result.Append("(" + this.bytes.Count + ")");
        result.Append(',').Append(' ').Append("hotfix").Append(':');
        if (this.hotfix != null) { result.Append("[" + this.hotfix.Count + "]"); }
        else { result.Append("null"); }
        result.Append(' ').Append('}');
        return result.ToString();
    } //Conflict::ToString()

    public StringBuilder ToStringJSON()
    {
        StringBuilder code = new StringBuilder();
        this.WriteJSON(code);
        return code;
    }

    public void WriteJSON(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        s.Append('"').Append("key").Append('"').Append(':'); comma = ","; s.Append((int)this.key);;
        bool textExists = !String.IsNullOrEmpty(this.text);
        if (!String.IsNullOrEmpty(comma) && textExists) { s.Append(comma); comma = null; }
        if (textExists) {
            s.Append('"').Append("text").Append('"').Append(':'); comma = ","; s.Append('"').Append(this.text.ToString()).Append('"');
        }
        bool bytesExists = (null != this.bytes && this.bytes.Count > 0);
        if (!String.IsNullOrEmpty(comma) && bytesExists) { s.Append(comma); comma = null; }
        if (bytesExists) { s.Append('"').Append("bytes").Append('"').Append(':'); comma = ","; }
        int bytesSize = (null == this.bytes ? 0 : this.bytes.Count);
        if (bytesSize > 0) {
            s.Append('\n').Append('[');
            int bytesIdx = 0;
            foreach (SByte n1 in this.bytes) { /* vec.for: this.bytes */
                ++bytesIdx;
                s.Append(n1.ToString());
                if (bytesIdx != bytesSize) { s.Append(','); }
            }
            s.Append(']');
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"'); s.Append('"').Append(k1.ToString()).Append('"'); s.Append('"').Append(':');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                }
                s.Append('}');
            } comma = ",";
        }
        s.Append('}').Append('\n');
    } //Conflict::WriteJSON(...)

    public StringBuilder ToStringLua()
    {
        StringBuilder code = new StringBuilder();
        code.Append("-- Conflict.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" --").Append('\n');
        code.Append("local table=");
        this.WriteLua(code); code.Append(';');
        return code;
    }

    public void WriteLua(StringBuilder s)
    {
        s.Append('\n').Append('{');
        string comma = null;
        s.Append("key").Append('='); comma = ","; s.Append((int)this.key);;
        bool textExists = !String.IsNullOrEmpty(this.text);
        if (!String.IsNullOrEmpty(comma) && textExists) { s.Append(comma); comma = null; }
        if (textExists) {
            s.Append("text").Append('='); comma = ","; s.Append('"').Append(this.text.ToString()).Append('"');
        }
        bool bytesExists = (null != this.bytes && this.bytes.Count > 0);
        if (!String.IsNullOrEmpty(comma) && bytesExists) { s.Append(comma); comma = null; }
        if (bytesExists) { s.Append("bytes").Append('='); comma = ","; }
        int bytesSize = (null == this.bytes ? 0 : this.bytes.Count);
        if (bytesSize > 0) {
            s.Append('\n').Append('{');
            int bytesIdx = 0;
            foreach (SByte n1 in this.bytes) { /* vec.for: this.bytes */
                ++bytesIdx;
                s.Append(n1.ToString());
                if (bytesIdx != bytesSize) { s.Append(','); }
                s.Append('}');
            }
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append('\n').Append('{');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('"').Append(k1.ToString()).Append('"'); s.Append('=');
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('"').Append(v1.ToString()).Append('"');
                    if (hotfixIdx != hotfixSize) { s.Append(','); }
                    s.Append('}');
                }
            } comma = ",";
        }
        s.Append('}').Append('\n');
    }

    public StringBuilder ToStringPHP()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?php ").Append("/* Conflict.CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" */").Append('\n');
        code.Append('\n').Append("return ");
        this.WritePHP(code); code.Append(';').Append('\n');
        return code;
    }

    public void WritePHP(StringBuilder s)
    {
        s.Append("array").Append('(').Append('\n');
        string comma = null;
        s.Append('\'').Append("key").Append('\'').Append("=>"); comma = ","; s.Append((int)this.key);
        s.Append("/*Gender::").Append(this.key.ToString()).Append("*/");
        bool textExists = !String.IsNullOrEmpty(this.text);
        if (!String.IsNullOrEmpty(comma) && textExists) { s.Append(comma).Append('\n'); comma = null; }
        if (textExists) {
            s.Append('\'').Append("text").Append('\'').Append("=>"); comma = ","; s.Append('\'').Append(this.text.ToString()).Append('\'');
        }
        bool bytesExists = (null != this.bytes && this.bytes.Count > 0);
        if (!String.IsNullOrEmpty(comma) && bytesExists) { s.Append(comma).Append('\n'); comma = null; }
        if (bytesExists) { s.Append('\'').Append("bytes").Append('\'').Append("=>"); comma = ","; }
        int bytesSize = (null == this.bytes ? 0 : this.bytes.Count);
        if (bytesSize > 0) {
            s.Append("array").Append('(').Append('\n');
            int bytesIdx = 0;
            foreach (SByte n1 in this.bytes) { /* vec.for: this.bytes */
                ++bytesIdx;
                s.Append(n1.ToString());
                if (bytesIdx != bytesSize) { s.Append(',').Append('\n'); }
            }
            s.Append("/* vec size: ").Append(this.bytes.Count).Append(" */").Append(')');
        }
        bool hotfixExists = (null != this.hotfix && this.hotfix.Count > 0);
        if (!String.IsNullOrEmpty(comma) && hotfixExists) { s.Append(comma).Append('\n'); comma = null; }
        if (hotfixExists) {
            int hotfixSize = (null == this.hotfix ? 0 : this.hotfix.Count);
            if (hotfixSize > 0) {
                s.Append("array").Append('(').Append('\n');
                int hotfixIdx = 0;
                foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) { /* map.for: this.hotfix */
                    ++hotfixIdx;
                    String k1 = hotfixIter.Key; /* nest.k */
                    s.Append('\'').Append(k1.ToString()).Append('\''); s.Append("=>");
                    String v1 = hotfixIter.Value; /* nest.v */
                    s.Append('\'').Append(v1.ToString()).Append('\'');
                    if (hotfixIdx != hotfixSize) { s.Append(','); s.Append('\n'); }
                }
                s.Append("/* map size: ").Append(this.hotfix.Count).Append(" */").Append(')');
            } comma = ",";
        }
        s.Append("/* ").Append(GetType().ToString()).Append(" */");
        s.Append(')');
    }

    public StringBuilder ToStringXML()
    {
        StringBuilder code = new StringBuilder();
        code.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        code.Append('\n').Append("<!-- ").Append("Conflict").Append(".CRC32: 0x");
        code.Append(CRC32.ToString("X2")).Append(" -->");
        this.WriteXML(code, "Conflict");
        return code;
    }

    public void WriteXML(StringBuilder s, String name)
    {
        StringBuilder attrs = new StringBuilder();
        StringBuilder nodes = new StringBuilder();
        attrs.Append(' ').Append("key").Append('=').Append('"').Append(this.key.ToString()).Append('"');
        attrs.Append(' ').Append("text").Append('=').Append('"').Append(this.text).Append('"');
        if (this.bytes.Count > 0) {
            nodes.Append('\n').Append('<').Append("bytes").Append('>');
            foreach (SByte n1 in this.bytes) {
                nodes.Append('<').Append("n1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(n1.ToString());
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("bytes").Append('>');
        }
        if (this.hotfix != null && this.hotfix.Count > 0) {
            nodes.Append('\n').Append('<').Append("hotfix").Append('>');
            foreach (KeyValuePair<String,String> hotfixIter in this.hotfix) {
                nodes.Append('\n');
                String k1 = hotfixIter.Key;
                nodes.Append('<').Append("k1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(k1);
                nodes.Append('"').Append('/').Append('>');
                String v1 = hotfixIter.Value;
                nodes.Append('<').Append("v1").Append(' ').Append("value").Append('=').Append('"');
                nodes.Append(v1);
                nodes.Append('"').Append('/').Append('>');
            }
            nodes.Append('<').Append('/').Append("hotfix").Append('>');
        }
        s.Append('\n').Append('<').Append(name).Append(attrs);
        if (nodes.Length == 0) {
            s.Append('/').Append('>');
        } else {
            s.Append('>').Append(nodes);
            s.Append('<').Append('/').Append(name).Append('>');
        }
    } //Conflict::WriteXML(...)

} //class: Conflict
/*
0@test.abc.Conflict/int32/string/vec-int8/map-string-string
*/
} //namespace: Test.Abc