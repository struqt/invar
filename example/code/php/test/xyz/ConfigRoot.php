<?php
/*===----------------------------*  PHP 5  *-------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace test\xyz;

require_once dirname(__FILE__) . '/../../test/xyz/TestNest.php';
require_once dirname(__FILE__) . '/../../test/xyz/TestList.php';
require_once dirname(__FILE__) . '/../../test/xyz/TestDict.php';
require_once dirname(__FILE__) . '/../../test/xyz/InfoX.php';
require_once dirname(__FILE__) . '/../../test/abc/Info.php';
require_once dirname(__FILE__) . '/../../invar/invar.codec.php';

use \invar\BinaryReader;
use \invar\BinaryWriter;
use \test\abc\Info;

final class ConfigRoot
{
    const CRC32 = 0x1CDC2714;

    static public function &CreateFromBytes (& $str)
    {
        $o = new ConfigRoot;
        $o->read(new BinaryReader($str));
        return $o;
    }

    private $revision ;/* f0 string */
    private $list     ;/* f1 test.xyz.TestList */
    private $dict     ;/* f2 test.xyz.TestDict */
    private $nest     ;/* f3 test.xyz.TestNest */
    private $info     ;/* f4 test.abc.Info */
    private $infox    ;/* f5 test.xyz.InfoX */
    private $hotfix   ;/* f6 map<string,string> // [AutoAdd] Hotfix */

    function __construct()
    {
        $this->revision = '1.0.0';
        $this->list     = new TestList;
        $this->dict     = new TestDict;
        $this->nest     = new TestNest;
        $this->info     = new Info;
        $this->infox    = new InfoX;
        $this->hotfix   = NULL;
    }
    /* End of constructor() */

    public function &copy (& $from)
    {
        if ($this == $from || $from == NULL) {
            return this;
        }
        $this->revision = $from->revision;
        $this->list = $from->list;
        $this->dict = $from->dict;
        $this->nest = $from->nest;
        $this->info = $from->info;
        $this->infox = $from->infox;
        if ($from->hotfix != NULL) {
            $this->hotfix = array();
            $this->hotfix = array_merge($from->hotfix);
        } else {
            $this->hotfix = NULL;
        }
        return $this;
    }
    /* End of copy(...) */

    public function &read (& $r)
    {
        $this->revision = $r->readUTF();
        $this->list->read($r);
        $this->dict->read($r);
        $this->nest->read($r);
        $this->info->read($r);
        $this->infox->read($r);
        $hotfixExists = $r->readInt08();
        if (0x01 == $hotfixExists) {
            if ($this->hotfix == NULL) { $this->hotfix = array(); }
            $lenHotfix = $r->readUInt32();
            for ($iHotfix = 0; $iHotfix < $lenHotfix; ++$iHotfix) {
                $k1 = $r->readUTF();
                $v1 = $r->readUTF();
                $this->hotfix[$k1] = $v1;
            }
        }
        else if (0x00 == $hotfixExists) { $this->hotfix = NULL; }
        else { throw new \Exception('Protoc read error: The value of ' . $hotfixExists . ' is invalid.', 498); }
        return $this;
    }
    /* End of read(...) */

    public function write (& $str)
    {
        BinaryWriter::writeUTF($this->revision, $str);
        $this->list->write($str);
        $this->dict->write($str);
        $this->nest->write($str);
        $this->info->write($str);
        $this->infox->write($str);
        if ($this->hotfix != NULL) {
            BinaryWriter::writeInt08(0x01, $str);
            BinaryWriter::writeInt32(count($this->hotfix), $str);
            foreach ($this->hotfix as $k1 => &$v1) {
                BinaryWriter::writeUTF($k1, $str);
                BinaryWriter::writeUTF($v1, $str);
            }
        } else {
            BinaryWriter::writeInt08(0x00, $str);
        }
    }
    /* End of write(...) */

    /**  */
    public function &getRevision() { return $this->revision; }

    /**  */
    public function &getList() { return $this->list; }

    /**  */
    public function &getDict() { return $this->dict; }

    /**  */
    public function &getNest() { return $this->nest; }

    /**  */
    public function &getInfo() { return $this->info; }

    /**  */
    public function &getInfox() { return $this->infox; }

    /** [AutoAdd] Hotfix */
    public function getHotfix() { return $this->hotfix; }

    /**  */
    public function setRevision($value) { $this->revision = $value; return $this; }

    /**  */
    public function setList($value) { $this->list = $value; return $this; }

    /**  */
    public function setDict($value) { $this->dict = $value; return $this; }

    /**  */
    public function setNest($value) { $this->nest = $value; return $this; }

    /**  */
    public function setInfo($value) { $this->info = $value; return $this; }

    /**  */
    public function setInfox($value) { $this->infox = $value; return $this; }

    /** [AutoAdd] Hotfix */
    public function setHotfix($value) { $this->hotfix = $value; return $this; }

    public function &toString()
    {
        $s  = '{'; $s .= get_class($this);
        $s .= ','; $s .= 'revision'; $s .= ':';
        $s .= '"'; $s .= $this->revision; $s .= '"';
        $s .= ','; $s .= 'list'; $s .= ':';
        $s .= '<'; $s .= 'TestList'; $s .= '>';
        $s .= ','; $s .= 'dict'; $s .= ':';
        $s .= '<'; $s .= 'TestDict'; $s .= '>';
        $s .= ','; $s .= 'nest'; $s .= ':';
        $s .= '<'; $s .= 'TestNest'; $s .= '>';
        $s .= ','; $s .= 'info'; $s .= ':';
        $s .= '<'; $s .= 'Info'; $s .= '>';
        $s .= ','; $s .= 'infox'; $s .= ':';
        $s .= '<'; $s .= 'InfoX'; $s .= '>';
        $s .= ','; $s .= 'hotfix'; $s .= ':';
        if (isset($this->hotfix)) { $s .= '['; $s .= count($this->hotfix); $s .= ']'; }
        else { $s .= 'null'; }
        $s .= '}';
        return $s;
    }
    /* End of toString() */

    public function &toStringJSON()
    {
        $code = '';
        $this->writeJSON($code);
        return $code;
    }

    public function writeJSON(& $s)
    {
        $s .= "\n"; $s .= '{';
        $revisionExists = !empty($this->revision);
        if ($revisionExists) {
            $s .= '"'; $s .= 'revision'; $s .= '"'; $s .= ':'; $comma = ',';
            $s .= '"'; $s .= $this->revision; $s .= '"';
        }
        $listExists = isset($this->list);
        if (!empty($comma) && $listExists) { $s .= $comma; $comma = ''; }
        if ($listExists) {
            $s .= '"'; $s .= 'list'; $s .= '"'; $s .= ':'; $comma = ',';
            $this->list->writeJSON($s);
        }
        $dictExists = isset($this->dict);
        if (!empty($comma) && $dictExists) { $s .= $comma; $comma = ''; }
        if ($dictExists) {
            $s .= '"'; $s .= 'dict'; $s .= '"'; $s .= ':'; $comma = ',';
            $this->dict->writeJSON($s);
        }
        $nestExists = isset($this->nest);
        if (!empty($comma) && $nestExists) { $s .= $comma; $comma = ''; }
        if ($nestExists) {
            $s .= '"'; $s .= 'nest'; $s .= '"'; $s .= ':'; $comma = ',';
            $this->nest->writeJSON($s);
        }
        $infoExists = isset($this->info);
        if (!empty($comma) && $infoExists) { $s .= $comma; $comma = ''; }
        if ($infoExists) {
            $s .= '"'; $s .= 'info'; $s .= '"'; $s .= ':'; $comma = ',';
            $this->info->writeJSON($s);
        }
        $infoxExists = isset($this->infox);
        if (!empty($comma) && $infoxExists) { $s .= $comma; $comma = ''; }
        if ($infoxExists) {
            $s .= '"'; $s .= 'infox'; $s .= '"'; $s .= ':'; $comma = ',';
            $this->infox->writeJSON($s);
        }
        $hotfixExists = (isset($this->hotfix) && count($this->hotfix) > 0);
        if (!empty($comma) && $hotfixExists) { $s .= $comma; $comma = ''; }
        if ($hotfixExists) {
            $s .= '"'; $s .= 'hotfix'; $s .= '"'; $s .= ':'; $comma = ',';
            $hotfixSize = (!isset($this->hotfix) ? 0 : count($this->hotfix));
            $s .= "\n"; $s .= '{';
            $hotfixIdx = 0;
            foreach ($this->hotfix as $k1 => &$v1) {
                $s .= '"'; $s .= $k1; $s .= '"';
                $s .= '"'; $s .= $v1; $s .= '"';
                ++$hotfixIdx;
                if (hotfixIdx != $hotfixSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $s .= '}'; $s .= "\n";
    }
    /* End of writeJSON(...) */

    public function &toStringXML()
    {
        $code  = '<?xml version="1.0" encoding="UTF-8"?>';
        $code .= "\n"; $code .= '<!-- '; $code .= 'ConfigRoot'; $code .= '.CRC32: 0x';
        $code .= strtoupper(dechex(self::CRC32)); $code .= ' -->';
        $code .= "\n"; $this->writeXML($code, 'ConfigRoot');
        return $code;
    }

    public function writeXML (& $s, $name)
    {
        $attrs = ''; $nodes = '';
        $attrs .= ' '; $attrs .= 'revision'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->revision; $attrs .= '"';
        $this->list->writeXML($nodes, 'list');
        $this->dict->writeXML($nodes, 'dict');
        $this->nest->writeXML($nodes, 'nest');
        $this->info->writeXML($nodes, 'info');
        $this->infox->writeXML($nodes, 'infox');
        if (isset($this->hotfix) && count($this->hotfix) > 0) {
            $nodes .= '<'; $nodes .= 'hotfix'; $nodes .= '>';
            foreach ($this->hotfix as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'hotfix'; $nodes .= '>';
        }
        $s .= '<';
        $s .= $name;
        $s .= $attrs;
        if (strlen($nodes) == 0) {
            $s .= '/>';
        } else {
            $s .= '>'; $s .= $nodes;
            $s .= '</'; $s .= $name; $s .= '>';
        }
    }
    /* End of writeXML(...) */

}
