<?php
/*===----------------------------*  PHP 5  *-------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace test\xyz;

require_once dirname(__FILE__) . '/../../test/abc/Gender.php';
require_once dirname(__FILE__) . '/../../test/abc/Custom.php';
require_once dirname(__FILE__) . '/../../invar/invar.codec.php';

use \invar\BinaryReader;
use \invar\BinaryWriter;
use \test\abc\Custom;
use \test\abc\Gender;

final class TestRefer
{
    const CRC32 = 0xC9B6DDD6;

    static public function &CreateFromBytes (& $str)
    {
        $o = new TestRefer;
        $o->read(new BinaryReader($str));
        return $o;
    }

    private $numberi08    ;/* 0 int8 */
    private $numberi16    ;/* 1 int16 */
    private $numberi32    ;/* 2 int32 */
    private $numberi64    ;/* 3 int64 */
    private $numberu08    ;/* 4 uint8 */
    private $numberu16    ;/* 5 uint16 */
    private $numberu32    ;/* 6 uint32 */
    private $numberu64    ;/* 7 uint64 */
    private $numberSingle ;/* 8 float */
    private $numberDouble ;/* 9 double */
    private $boolValue    ;/* 10 bool */
    private $stringValue  ;/* 11 string */
    private $enumValue    ;/* 12 test.abc.Gender */
    private $other        ;/* 13 test.abc.Custom */
    private $self         ;/* 14 test.xyz.TestRefer */
    private $listI08      ;/* 15 vec<int8> */
    private $dictI08      ;/* 16 map<int8,int8> */
    private $hotfix       ;/* 17 map<string,string> // [AutoAdd] Hotfix */

    function __construct()
    {
        $this->numberi08    = -1;
        $this->numberi16    = -1;
        $this->numberi32    = -1;
        $this->numberi64    = -1;
        $this->numberu08    = 0;
        $this->numberu16    = 0;
        $this->numberu32    = 0;
        $this->numberu64    = 0;
        $this->numberSingle = 0.0;
        $this->numberDouble = 0.00;
        $this->boolValue    = FALSE;
        $this->stringValue  = '';
        $this->enumValue    = Gender::NONE;
        $this->other        = new Custom;
        $this->self         = NULL;
        $this->listI08      = array();
        $this->dictI08      = array();
        $this->hotfix       = NULL;
    }
    /* End of constructor() */

    public function &copy (& $from)
    {
        if ($this == $from || $from == NULL) {
            return this;
        }
        $this->numberi08 = $from->numberi08;
        $this->numberi16 = $from->numberi16;
        $this->numberi32 = $from->numberi32;
        $this->numberi64 = $from->numberi64;
        $this->numberu08 = $from->numberu08;
        $this->numberu16 = $from->numberu16;
        $this->numberu32 = $from->numberu32;
        $this->numberu64 = $from->numberu64;
        $this->numberSingle = $from->numberSingle;
        $this->numberDouble = $from->numberDouble;
        $this->boolValue = $from->boolValue;
        $this->stringValue = $from->stringValue;
        $this->enumValue = $from->enumValue;
        $this->other = $from->other;
        if ($from->self != NULL) {
            $this->self.copy($from->self);
        } else {
            $this->self = NULL;
        }
        if ($from->listI08 != NULL) {
            $this->listI08 = array_merge($from->listI08);
        } else {
            $this->listI08 = array();
        }
        if ($from->dictI08 != NULL) {
            $this->dictI08 = array_merge($from->dictI08);
        } else {
            $this->dictI08 = array();
        }
        if ($from->hotfix != NULL) {
            $this->hotfix = array();
            $this->hotfix = array_merge($from->hotfix);
        } else {
            $this->hotfix = NULL;
        }
        return $this;
    }
    /* End of copy(...) */

    public function &read (& $r)
    {
        $this->numberi08 = $r->readInt08();
        $this->numberi16 = $r->readInt16();
        $this->numberi32 = $r->readInt32();
        $this->numberi64 = $r->readInt64();
        $this->numberu08 = $r->readUInt08();
        $this->numberu16 = $r->readUInt16();
        $this->numberu32 = $r->readUInt32();
        $this->numberu64 = $r->readUInt64();
        $this->numberSingle = $r->readFloat32();
        $this->numberDouble = $r->readFloat64();
        $this->boolValue = $r->readBoolean();
        $this->stringValue = $r->readUTF();
        $this->enumValue = $r->readInt32();
        $this->other->read($r);
        $selfExists = $r->readInt08();
        if (0x01 == $selfExists) {
            if ($this->self == NULL) { $this->self = new TestRefer; }
            $this->self->read($r);
        }
        else if (0x00 == $selfExists) { $this->self = NULL; }
        else { throw new \Exception('Protoc read error: The value of ' . $selfExists . ' is invalid.', 497); }
        $this->listI08 = array();
        $lenListI08 = $r->readUInt32();
        for ($iListI08 = 0; $iListI08 < $lenListI08; ++$iListI08) {
            $n1 = $r->readInt08();
            $this->listI08[] = $n1;
        }
        $this->dictI08 = array();
        $lenDictI08 = $r->readUInt32();
        for ($iDictI08 = 0; $iDictI08 < $lenDictI08; ++$iDictI08) {
            $k1 = $r->readInt08();
            $v1 = $r->readInt08();
            $this->dictI08[$k1] = $v1;
        }
        $hotfixExists = $r->readInt08();
        if (0x01 == $hotfixExists) {
            if ($this->hotfix == NULL) { $this->hotfix = array(); }
            $lenHotfix = $r->readUInt32();
            for ($iHotfix = 0; $iHotfix < $lenHotfix; ++$iHotfix) {
                $k1 = $r->readUTF();
                $v1 = $r->readUTF();
                $this->hotfix[$k1] = $v1;
            }
        }
        else if (0x00 == $hotfixExists) { $this->hotfix = NULL; }
        else { throw new \Exception('Protoc read error: The value of ' . $hotfixExists . ' is invalid.', 498); }
        return $this;
    }
    /* End of read(...) */

    public function write (& $str)
    {
        BinaryWriter::writeInt08($this->numberi08, $str);
        BinaryWriter::writeInt16($this->numberi16, $str);
        BinaryWriter::writeInt32($this->numberi32, $str);
        BinaryWriter::writeInt64($this->numberi64, $str);
        BinaryWriter::writeUInt08($this->numberu08, $str);
        BinaryWriter::writeUInt16($this->numberu16, $str);
        BinaryWriter::writeUInt32($this->numberu32, $str);
        BinaryWriter::writeUInt64($this->numberu64, $str);
        BinaryWriter::writeFloat32($this->numberSingle, $str);
        BinaryWriter::writeFloat64($this->numberDouble, $str);
        BinaryWriter::writeBoolean($this->boolValue, $str);
        BinaryWriter::writeUTF($this->stringValue, $str);
        BinaryWriter::writeInt32($this->enumValue, $str);
        $this->other->write($str);
        if ($this->self != NULL) {
            BinaryWriter::writeInt08(0x01, $str);
            $this->self->write($str);
        } else {
            BinaryWriter::writeInt08(0x00, $str);
        }
        BinaryWriter::writeInt32(count($this->listI08), $str);
        foreach ($this->listI08 as &$n1) {
            BinaryWriter::writeInt08($n1, $str);
        }
        BinaryWriter::writeInt32(count($this->dictI08), $str);
        foreach ($this->dictI08 as $k1 => &$v1) {
            BinaryWriter::writeInt08($k1, $str);
            BinaryWriter::writeInt08($v1, $str);
        }
        if ($this->hotfix != NULL) {
            BinaryWriter::writeInt08(0x01, $str);
            BinaryWriter::writeInt32(count($this->hotfix), $str);
            foreach ($this->hotfix as $k1 => &$v1) {
                BinaryWriter::writeUTF($k1, $str);
                BinaryWriter::writeUTF($v1, $str);
            }
        } else {
            BinaryWriter::writeInt08(0x00, $str);
        }
    }
    /* End of write(...) */

    /**  */
    public function &getNumberi08() { return $this->numberi08; }

    /**  */
    public function &getNumberi16() { return $this->numberi16; }

    /**  */
    public function &getNumberi32() { return $this->numberi32; }

    /**  */
    public function &getNumberi64() { return $this->numberi64; }

    /**  */
    public function &getNumberu08() { return $this->numberu08; }

    /**  */
    public function &getNumberu16() { return $this->numberu16; }

    /**  */
    public function &getNumberu32() { return $this->numberu32; }

    /**  */
    public function &getNumberu64() { return $this->numberu64; }

    /**  */
    public function &getNumberSingle() { return $this->numberSingle; }

    /**  */
    public function &getNumberDouble() { return $this->numberDouble; }

    /**  */
    public function &getBoolValue() { return $this->boolValue; }

    /**  */
    public function  getStringValue() { return $this->stringValue; }

    /**  */
    public function &getEnumValue() { return $this->enumValue; }

    /**  */
    public function  getOther() { return $this->other; }

    /**  */
    public function getSelf() { return $this->self; }

    /**  */
    public function  getListI08() { return $this->listI08; }

    /**  */
    public function  getDictI08() { return $this->dictI08; }

    /** [AutoAdd] Hotfix */
    public function getHotfix() { return $this->hotfix; }

    /**  */
    public function setNumberi08($value) { $this->numberi08 = $value; return $this; }

    /**  */
    public function setNumberi16($value) { $this->numberi16 = $value; return $this; }

    /**  */
    public function setNumberi32($value) { $this->numberi32 = $value; return $this; }

    /**  */
    public function setNumberi64($value) { $this->numberi64 = $value; return $this; }

    /**  */
    public function setNumberu08($value) { $this->numberu08 = $value; return $this; }

    /**  */
    public function setNumberu16($value) { $this->numberu16 = $value; return $this; }

    /**  */
    public function setNumberu32($value) { $this->numberu32 = $value; return $this; }

    /**  */
    public function setNumberu64($value) { $this->numberu64 = $value; return $this; }

    /**  */
    public function setNumberSingle($value) { $this->numberSingle = $value; return $this; }

    /**  */
    public function setNumberDouble($value) { $this->numberDouble = $value; return $this; }

    /**  */
    public function setBoolValue($value) { $this->boolValue = $value; return $this; }

    /**  */
    public function setStringValue($value) { $this->stringValue = $value; return $this; }

    /**  */
    public function setEnumValue($value) { $this->enumValue = $value; return $this; }

    /**  */
    public function setOther($value) { $this->other = $value; return $this; }

    /**  */
    public function setSelf($value) { $this->self = $value; return $this; }

    /** [AutoAdd] Hotfix */
    public function setHotfix($value) { $this->hotfix = $value; return $this; }

    public function &toString()
    {
        $s  = '{'; $s .= get_class($this);
        $s .= ','; $s .= 'numberi08'; $s .= ':';
        $s .= $this->numberi08;
        $s .= ','; $s .= 'numberi16'; $s .= ':';
        $s .= $this->numberi16;
        $s .= ','; $s .= 'numberi32'; $s .= ':';
        $s .= $this->numberi32;
        $s .= ','; $s .= 'numberi64'; $s .= ':';
        $s .= $this->numberi64;
        $s .= ','; $s .= 'numberu08'; $s .= ':';
        $s .= $this->numberu08;
        $s .= ','; $s .= 'numberu16'; $s .= ':';
        $s .= $this->numberu16;
        $s .= ','; $s .= 'numberu32'; $s .= ':';
        $s .= $this->numberu32;
        $s .= ','; $s .= 'numberu64'; $s .= ':';
        $s .= $this->numberu64;
        $s .= ','; $s .= 'numberSingle'; $s .= ':';
        $s .= $this->numberSingle;
        $s .= ','; $s .= 'numberDouble'; $s .= ':';
        $s .= $this->numberDouble;
        $s .= ','; $s .= 'boolValue'; $s .= ':';
        $s .= $this->boolValue == TRUE ? 'True' : 'False';
        $s .= ','; $s .= 'stringValue'; $s .= ':';
        $s .= '"'; $s .= $this->stringValue; $s .= '"';
        $s .= ','; $s .= 'enumValue'; $s .= ':';
        $s .= $this->enumValue;
        $s .= ','; $s .= 'other'; $s .= ':';
        $s .= '<'; $s .= 'Custom'; $s .= '>';
        $s .= ','; $s .= 'self'; $s .= ':';
        if (isset($this->self)) { $s .= '<'; $s .= 'TestRefer'; $s .= '>'; }
        else { $s .= 'null'; }
        $s .= ','; $s .= 'listI08'; $s .= ':';
        $s .= '('; $s .= count($this->listI08); $s .= ')';
        $s .= ','; $s .= 'dictI08'; $s .= ':';
        $s .= '['; $s .= count($this->dictI08); $s .= ']';
        $s .= ','; $s .= 'hotfix'; $s .= ':';
        if (isset($this->hotfix)) { $s .= '['; $s .= count($this->hotfix); $s .= ']'; }
        else { $s .= 'null'; }
        $s .= '}';
        return $s;
    }
    /* End of toString() */

    public function &toStringJSON()
    {
        $code = '';
        $this->writeJSON($code);
        return $code;
    }

    public function writeJSON(& $s)
    {
        $s .= "\n"; $s .= '{';
        $s .= '"'; $s .= 'numberi08'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberi08;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberi16'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberi16;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberi32'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberi32;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberi64'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberi64;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberu08'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberu08;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberu16'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberu16;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberu32'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberu32;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberu64'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberu64;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberSingle'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= number_format($this->numberSingle, 6, '.', '');
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberDouble'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberDouble;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'boolValue'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->boolValue ? "true" : "false";
        $stringValueExists = !empty($this->stringValue);
        if (!empty($comma) && $stringValueExists) { $s .= $comma; $comma = ''; }
        if ($stringValueExists) {
            $s .= '"'; $s .= 'stringValue'; $s .= '"'; $s .= ':'; $comma = ',';
            $s .= '"'; $s .= $this->stringValue; $s .= '"';
        }
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'enumValue'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->enumValue;
        $otherExists = isset($this->other);
        if (!empty($comma) && $otherExists) { $s .= $comma; $comma = ''; }
        if ($otherExists) {
            $s .= '"'; $s .= 'other'; $s .= '"'; $s .= ':'; $comma = ',';
            $this->other->writeJSON($s);
        }
        $selfExists = isset($this->self);
        if (!empty($comma) && $selfExists) { $s .= $comma; $comma = ''; }
        if ($selfExists) {
            $s .= '"'; $s .= 'self'; $s .= '"'; $s .= ':'; $comma = ',';
            $this->self->writeJSON($s);
        }
        $listI08Exists = (isset($this->listI08) && count($this->listI08) > 0);
        if (!empty($comma) && $listI08Exists) { $s .= $comma; $comma = ''; }
        if ($listI08Exists) {
            $s .= '"'; $s .= 'listI08'; $s .= '"'; $s .= ':'; $comma = ',';
            $listI08Size = (!isset($this->listI08) ? 0 : count($this->listI08));
            $s .= "\n"; $s .= '[';
            $listI08Idx = 0;
            foreach ($this->listI08 as &$n1) {
                $s .= $n1;
                ++$listI08Idx;
                if ($listI08Idx != $listI08Size) { $s .= ','; }
            }
            $s .= ']';
        }
        $dictI08Exists = (isset($this->dictI08) && count($this->dictI08) > 0);
        if (!empty($comma) && $dictI08Exists) { $s .= $comma; $comma = ''; }
        if ($dictI08Exists) {
            $s .= '"'; $s .= 'dictI08'; $s .= '"'; $s .= ':'; $comma = ',';
            $dictI08Size = (!isset($this->dictI08) ? 0 : count($this->dictI08));
            $s .= "\n"; $s .= '{';
            $dictI08Idx = 0;
            foreach ($this->dictI08 as $k1 => &$v1) {
                $s .= $k1;
                $s .= $v1;
                ++$dictI08Idx;
                if (dictI08Idx != $dictI08Size) { $s .= ','; }
            }
            $s .= '}';
        }
        $hotfixExists = (isset($this->hotfix) && count($this->hotfix) > 0);
        if (!empty($comma) && $hotfixExists) { $s .= $comma; $comma = ''; }
        if ($hotfixExists) {
            $s .= '"'; $s .= 'hotfix'; $s .= '"'; $s .= ':'; $comma = ',';
            $hotfixSize = (!isset($this->hotfix) ? 0 : count($this->hotfix));
            $s .= "\n"; $s .= '{';
            $hotfixIdx = 0;
            foreach ($this->hotfix as $k1 => &$v1) {
                $s .= '"'; $s .= $k1; $s .= '"';
                $s .= '"'; $s .= $v1; $s .= '"';
                ++$hotfixIdx;
                if (hotfixIdx != $hotfixSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $s .= '}'; $s .= "\n";
    }
    /* End of writeJSON(...) */

    public function &toStringXML()
    {
        $code  = '<?xml version="1.0" encoding="UTF-8"?>';
        $code .= "\n"; $code .= '<!-- '; $code .= 'TestRefer'; $code .= '.CRC32: 0x';
        $code .= strtoupper(dechex(self::CRC32)); $code .= ' -->';
        $code .= "\n"; $this->writeXML($code, 'TestRefer');
        return $code;
    }

    public function writeXML (& $s, $name)
    {
        $attrs = ''; $nodes = '';
        $attrs .= ' '; $attrs .= 'numberi08'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberi08; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberi16'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberi16; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberi32'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberi32; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberi64'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberi64; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberu08'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberu08; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberu16'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberu16; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberu32'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberu32; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberu64'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberu64; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberSingle'; $attrs .= '=';
        $attrs .= '"'; $attrs .= number_format($this->numberSingle, 6, '.', ''); $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberDouble'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberDouble; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'boolValue'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->boolValue ? "true" : "false"; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'stringValue'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->stringValue; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'enumValue'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->enumValue; $attrs .= '"';
        $this->other->writeXML($nodes, 'other');
        if (isset($this->self)) {
            $this->self->writeXML($nodes, 'self');
        }
        if (count($this->listI08) > 0) {
            $nodes .= '<'; $nodes .= 'listI08'; $nodes .= '>';
            foreach ($this->listI08 as &$n1) {
                $nodes .= '<'; $nodes .= 'n1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$n1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'listI08'; $nodes .= '>';
        }
        if (count($this->dictI08) > 0) {
            $nodes .= '<'; $nodes .= 'dictI08'; $nodes .= '>';
            foreach ($this->dictI08 as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'dictI08'; $nodes .= '>';
        }
        if (isset($this->hotfix) && count($this->hotfix) > 0) {
            $nodes .= '<'; $nodes .= 'hotfix'; $nodes .= '>';
            foreach ($this->hotfix as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'hotfix'; $nodes .= '>';
        }
        $s .= '<';
        $s .= $name;
        $s .= $attrs;
        if (strlen($nodes) == 0) {
            $s .= '/>';
        } else {
            $s .= '>'; $s .= $nodes;
            $s .= '</'; $s .= $name; $s .= '>';
        }
    }
    /* End of writeXML(...) */

}
