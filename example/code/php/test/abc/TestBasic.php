<?php
/*===----------------------------*  PHP 5  *-------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/

namespace test\abc;

require_once dirname(__FILE__) . '/../../test/abc/Gender.php';
require_once dirname(__FILE__) . '/../../invar/invar.codec.php';

use \invar\BinaryReader;
use \invar\BinaryWriter;

final class TestBasic
{
    const CRC32 = 0x65717264;

    static public function &CreateFromBytes (& $str)
    {
        $o = new TestBasic;
        $o->read(new BinaryReader($str));
        return $o;
    }

    private $numberI08    ;/* 0 int8 // 有符号的8位整数 */
    private $numberI16    ;/* 1 int16 // 有符号的16位整数 */
    private $numberI32    ;/* 2 int32 // 有符号的32位整数 */
    private $numberI64    ;/* 3 int64 // 有符号的64位整数 */
    private $numberU08    ;/* 4 uint8 // 无符号的8位整数 */
    private $numberU16    ;/* 5 uint16 // 无符号的16位整数 */
    private $numberU32    ;/* 6 uint32 // 无符号的32位整数 */
    private $numberU64    ;/* 7 uint64 // 无符号的64位整数 */
    private $numberSingle ;/* 8 float // 单精度浮点小数 */
    private $numberDouble ;/* 9 double // 双精度浮点小数 */
    private $boolValue    ;/* 10 bool // 布尔值 */
    private $stringValue  ;/* 11 string // 字符串 */
    private $enumValue    ;/* 12 test.abc.Gender // 枚举值 */
    private $enumDeft     ;/* 13 test.abc.Gender // 枚举值制定默认值 */
    private $hotfix       ;/* 14 map<string,string> // [AutoAdd] Hotfix */

    function __construct()
    {
        $this->numberI08    = -128;
        $this->numberI16    = -32768;
        $this->numberI32    = -2147483648;
        $this->numberI64    = -9223372036854774808;
        $this->numberU08    = 255;
        $this->numberU16    = 65535;
        $this->numberU32    = 4294967295;
        $this->numberU64    = 18446744073709551615;
        $this->numberSingle = 3.14159;
        $this->numberDouble = 3.1415926;
        $this->boolValue    = FALSE;
        $this->stringValue  = 'hello世界';
        $this->enumValue    = Gender::NONE;
        $this->enumDeft     = Gender::MALE;
        $this->hotfix       = NULL;
    }
    /* End of constructor() */

    public function &copy (& $from)
    {
        if ($this == $from || $from == NULL) {
            return this;
        }
        $this->numberI08 = $from->numberI08;
        $this->numberI16 = $from->numberI16;
        $this->numberI32 = $from->numberI32;
        $this->numberI64 = $from->numberI64;
        $this->numberU08 = $from->numberU08;
        $this->numberU16 = $from->numberU16;
        $this->numberU32 = $from->numberU32;
        $this->numberU64 = $from->numberU64;
        $this->numberSingle = $from->numberSingle;
        $this->numberDouble = $from->numberDouble;
        $this->boolValue = $from->boolValue;
        $this->stringValue = $from->stringValue;
        $this->enumValue = $from->enumValue;
        $this->enumDeft = $from->enumDeft;
        if ($from->hotfix != NULL) {
            $this->hotfix = array();
            $this->hotfix = array_merge($from->hotfix);
        } else {
            $this->hotfix = NULL;
        }
        return $this;
    }
    /* End of copy(...) */

    public function &read (& $r)
    {
        $this->numberI08 = $r->readInt08();
        $this->numberI16 = $r->readInt16();
        $this->numberI32 = $r->readInt32();
        $this->numberI64 = $r->readInt64();
        $this->numberU08 = $r->readUInt08();
        $this->numberU16 = $r->readUInt16();
        $this->numberU32 = $r->readUInt32();
        $this->numberU64 = $r->readUInt64();
        $this->numberSingle = $r->readFloat32();
        $this->numberDouble = $r->readFloat64();
        $this->boolValue = $r->readBoolean();
        $this->stringValue = $r->readUTF();
        $this->enumValue = $r->readInt32();
        $this->enumDeft = $r->readInt32();
        $hotfixExists = $r->readInt08();
        if (0x01 == $hotfixExists) {
            if ($this->hotfix == NULL) { $this->hotfix = array(); }
            $lenHotfix = $r->readUInt32();
            for ($iHotfix = 0; $iHotfix < $lenHotfix; ++$iHotfix) {
                $k1 = $r->readUTF();
                $v1 = $r->readUTF();
                $this->hotfix[$k1] = $v1;
            }
        }
        else if (0x00 == $hotfixExists) { $this->hotfix = NULL; }
        else { throw new \Exception('Protoc read error: The value of ' . $hotfixExists . ' is invalid.', 498); }
        return $this;
    }
    /* End of read(...) */

    public function write (& $str)
    {
        BinaryWriter::writeInt08($this->numberI08, $str);
        BinaryWriter::writeInt16($this->numberI16, $str);
        BinaryWriter::writeInt32($this->numberI32, $str);
        BinaryWriter::writeInt64($this->numberI64, $str);
        BinaryWriter::writeUInt08($this->numberU08, $str);
        BinaryWriter::writeUInt16($this->numberU16, $str);
        BinaryWriter::writeUInt32($this->numberU32, $str);
        BinaryWriter::writeUInt64($this->numberU64, $str);
        BinaryWriter::writeFloat32($this->numberSingle, $str);
        BinaryWriter::writeFloat64($this->numberDouble, $str);
        BinaryWriter::writeBoolean($this->boolValue, $str);
        BinaryWriter::writeUTF($this->stringValue, $str);
        BinaryWriter::writeInt32($this->enumValue, $str);
        BinaryWriter::writeInt32($this->enumDeft, $str);
        if ($this->hotfix != NULL) {
            BinaryWriter::writeInt08(0x01, $str);
            BinaryWriter::writeInt32(count($this->hotfix), $str);
            foreach ($this->hotfix as $k1 => &$v1) {
                BinaryWriter::writeUTF($k1, $str);
                BinaryWriter::writeUTF($v1, $str);
            }
        } else {
            BinaryWriter::writeInt08(0x00, $str);
        }
    }
    /* End of write(...) */

    /** 有符号的8位整数 */
    public function  getNumberI08() { return $this->numberI08; }

    /** 有符号的16位整数 */
    public function  getNumberI16() { return $this->numberI16; }

    /** 有符号的32位整数 */
    public function  getNumberI32() { return $this->numberI32; }

    /** 有符号的64位整数 */
    public function  getNumberI64() { return $this->numberI64; }

    /** 无符号的8位整数 */
    public function  getNumberU08() { return $this->numberU08; }

    /** 无符号的16位整数 */
    public function  getNumberU16() { return $this->numberU16; }

    /** 无符号的32位整数 */
    public function  getNumberU32() { return $this->numberU32; }

    /** 无符号的64位整数 */
    public function  getNumberU64() { return $this->numberU64; }

    /** 单精度浮点小数 */
    public function  getNumberSingle() { return $this->numberSingle; }

    /** 双精度浮点小数 */
    public function  getNumberDouble() { return $this->numberDouble; }

    /** 布尔值 */
    public function  getBoolValue() { return $this->boolValue; }

    /** 字符串 */
    public function &getStringValue() { return $this->stringValue; }

    /** 枚举值 */
    public function  getEnumValue() { return $this->enumValue; }

    /** 枚举值制定默认值 */
    public function  getEnumDeft() { return $this->enumDeft; }

    /** [AutoAdd] Hotfix */
    public function getHotfix() { return $this->hotfix; }

    /** 有符号的8位整数 */
    public function setNumberI08($value) { $this->numberI08 = $value; return $this; }

    /** 有符号的16位整数 */
    public function setNumberI16($value) { $this->numberI16 = $value; return $this; }

    /** 有符号的32位整数 */
    public function setNumberI32($value) { $this->numberI32 = $value; return $this; }

    /** 有符号的64位整数 */
    public function setNumberI64($value) { $this->numberI64 = $value; return $this; }

    /** 无符号的8位整数 */
    public function setNumberU08($value) { $this->numberU08 = $value; return $this; }

    /** 无符号的16位整数 */
    public function setNumberU16($value) { $this->numberU16 = $value; return $this; }

    /** 无符号的32位整数 */
    public function setNumberU32($value) { $this->numberU32 = $value; return $this; }

    /** 无符号的64位整数 */
    public function setNumberU64($value) { $this->numberU64 = $value; return $this; }

    /** 单精度浮点小数 */
    public function setNumberSingle($value) { $this->numberSingle = $value; return $this; }

    /** 双精度浮点小数 */
    public function setNumberDouble($value) { $this->numberDouble = $value; return $this; }

    /** 布尔值 */
    public function setBoolValue($value) { $this->boolValue = $value; return $this; }

    /** 字符串 */
    public function setStringValue($value) { $this->stringValue = $value; return $this; }

    /** 枚举值 */
    public function setEnumValue($value) { $this->enumValue = $value; return $this; }

    /** 枚举值制定默认值 */
    public function setEnumDeft($value) { $this->enumDeft = $value; return $this; }

    /** [AutoAdd] Hotfix */
    public function setHotfix($value) { $this->hotfix = $value; return $this; }

    public function &toString()
    {
        $s  = '{'; $s .= get_class($this);
        $s .= ','; $s .= 'numberI08'; $s .= ':';
        $s .= $this->numberI08;
        $s .= ','; $s .= 'numberI16'; $s .= ':';
        $s .= $this->numberI16;
        $s .= ','; $s .= 'numberI32'; $s .= ':';
        $s .= $this->numberI32;
        $s .= ','; $s .= 'numberI64'; $s .= ':';
        $s .= $this->numberI64;
        $s .= ','; $s .= 'numberU08'; $s .= ':';
        $s .= $this->numberU08;
        $s .= ','; $s .= 'numberU16'; $s .= ':';
        $s .= $this->numberU16;
        $s .= ','; $s .= 'numberU32'; $s .= ':';
        $s .= $this->numberU32;
        $s .= ','; $s .= 'numberU64'; $s .= ':';
        $s .= $this->numberU64;
        $s .= ','; $s .= 'numberSingle'; $s .= ':';
        $s .= $this->numberSingle;
        $s .= ','; $s .= 'numberDouble'; $s .= ':';
        $s .= $this->numberDouble;
        $s .= ','; $s .= 'boolValue'; $s .= ':';
        $s .= $this->boolValue == TRUE ? 'True' : 'False';
        $s .= ','; $s .= 'stringValue'; $s .= ':';
        $s .= '"'; $s .= $this->stringValue; $s .= '"';
        $s .= ','; $s .= 'enumValue'; $s .= ':';
        $s .= $this->enumValue;
        $s .= ','; $s .= 'enumDeft'; $s .= ':';
        $s .= $this->enumDeft;
        $s .= ','; $s .= 'hotfix'; $s .= ':';
        if (isset($this->hotfix)) { $s .= '['; $s .= count($this->hotfix); $s .= ']'; }
        else { $s .= 'null'; }
        $s .= '}';
        return $s;
    }
    /* End of toString() */

    public function &toStringJSON()
    {
        $code = '';
        $this->writeJSON($code);
        return $code;
    }

    public function writeJSON(& $s)
    {
        $s .= "\n"; $s .= '{';
        $s .= '"'; $s .= 'numberI08'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberI08;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberI16'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberI16;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberI32'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberI32;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberI64'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberI64;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberU08'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberU08;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberU16'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberU16;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberU32'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberU32;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberU64'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberU64;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberSingle'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= number_format($this->numberSingle, 6, '.', '');
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'numberDouble'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->numberDouble;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'boolValue'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->boolValue ? "true" : "false";
        $stringValueExists = !empty($this->stringValue);
        if (!empty($comma) && $stringValueExists) { $s .= $comma; $comma = ''; }
        if ($stringValueExists) {
            $s .= '"'; $s .= 'stringValue'; $s .= '"'; $s .= ':'; $comma = ',';
            $s .= '"'; $s .= $this->stringValue; $s .= '"';
        }
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'enumValue'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->enumValue;
        if (!empty($comma)) { $s .= $comma; $comma = ''; }
        $s .= '"'; $s .= 'enumDeft'; $s .= '"'; $s .= ':'; $comma = ',';
        $s .= $this->enumDeft;
        $hotfixExists = (isset($this->hotfix) && count($this->hotfix) > 0);
        if (!empty($comma) && $hotfixExists) { $s .= $comma; $comma = ''; }
        if ($hotfixExists) {
            $s .= '"'; $s .= 'hotfix'; $s .= '"'; $s .= ':'; $comma = ',';
            $hotfixSize = (!isset($this->hotfix) ? 0 : count($this->hotfix));
            $s .= "\n"; $s .= '{';
            $hotfixIdx = 0;
            foreach ($this->hotfix as $k1 => &$v1) {
                $s .= '"'; $s .= $k1; $s .= '"';
                $s .= '"'; $s .= $v1; $s .= '"';
                ++$hotfixIdx;
                if (hotfixIdx != $hotfixSize) { $s .= ','; }
            }
            $s .= '}';
        }
        $s .= '}'; $s .= "\n";
    }
    /* End of writeJSON(...) */

    public function &toStringXML()
    {
        $code  = '<?xml version="1.0" encoding="UTF-8"?>';
        $code .= "\n"; $code .= '<!-- '; $code .= 'TestBasic'; $code .= '.CRC32: 0x';
        $code .= strtoupper(dechex(self::CRC32)); $code .= ' -->';
        $code .= "\n"; $this->writeXML($code, 'TestBasic');
        return $code;
    }

    public function writeXML (& $s, $name)
    {
        $attrs = ''; $nodes = '';
        $attrs .= ' '; $attrs .= 'numberI08'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberI08; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberI16'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberI16; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberI32'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberI32; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberI64'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberI64; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberU08'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberU08; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberU16'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberU16; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberU32'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberU32; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberU64'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberU64; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberSingle'; $attrs .= '=';
        $attrs .= '"'; $attrs .= number_format($this->numberSingle, 6, '.', ''); $attrs .= '"';
        $attrs .= ' '; $attrs .= 'numberDouble'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->numberDouble; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'boolValue'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->boolValue ? "true" : "false"; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'stringValue'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->stringValue; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'enumValue'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->enumValue; $attrs .= '"';
        $attrs .= ' '; $attrs .= 'enumDeft'; $attrs .= '=';
        $attrs .= '"'; $attrs .= $this->enumDeft; $attrs .= '"';
        if (isset($this->hotfix) && count($this->hotfix) > 0) {
            $nodes .= '<'; $nodes .= 'hotfix'; $nodes .= '>';
            foreach ($this->hotfix as $k1 => &$v1) {
                $nodes .= '<'; $nodes .= 'k1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$k1; $nodes .= '"';  $nodes .= '/>';
                $nodes .= '<'; $nodes .= 'v1'; $nodes .= ' ';
                $nodes .= 'value'; $nodes .= '='; $nodes .= '"';
                $nodes .= $$v1; $nodes .= '"';  $nodes .= '/>';
            }
            $nodes .= '</'; $nodes .= 'hotfix'; $nodes .= '>';
        }
        $s .= '<';
        $s .= $name;
        $s .= $attrs;
        if (strlen($nodes) == 0) {
            $s .= '/>';
        } else {
            $s .= '>'; $s .= $nodes;
            $s .= '</'; $s .= $name; $s .= '>';
        }
    }
    /* End of writeXML(...) */

}
