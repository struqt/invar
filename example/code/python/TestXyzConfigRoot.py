#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ===------------------------------*  Python  *------------------------------===
#             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
# ===------------------------------------------------------------------------===

from TestAbcInfo import Info
from TestXyzInfoX import InfoX
from TestXyzTestDict import TestDict
from TestXyzTestList import TestList
from TestXyzTestNest import TestNest
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO
from InvarCodec import DataWriter
from InvarCodec import DataReader

class ConfigRoot(object):

    """"""
    CRC32_ = 0x6D03BB9B
    SIZE_  = 5

    __slots__ = (
        '_revision',
        '_list',
        '_dict',
        '_nest',
        '_info',
        '_infox',
        '_hotfix')
   #__slots__

    def __init__(self):
        self._revision = '1.0.0'
        self._list     = TestList()
        self._dict     = TestDict()
        self._nest     = TestNest()
        self._info     = Info()
        self._infox    = InfoX()
        self._hotfix   = None
   #def __init__

    def __str__(self):
        s = StringIO()
        s.write(u'{')
        s.write(u' ')
        s.write(u'ConfigRoot')
        s.write(u',')
        s.write(u' ')
        s.write(u'revision')
        s.write(u':')
        s.write(u'"')
        s.write(self._revision)
        s.write(u'"')
        s.write(u',')
        s.write(u' ')
        s.write(u'list')
        s.write(u':')
        s.write(u'<')
        s.write(u'TestList')
        s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'dict')
        s.write(u':')
        s.write(u'<')
        s.write(u'TestDict')
        s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'nest')
        s.write(u':')
        s.write(u'<')
        s.write(u'TestNest')
        s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'info')
        s.write(u':')
        s.write(u'<')
        s.write(u'Info')
        s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'infox')
        s.write(u':')
        s.write(u'<')
        s.write(u'InfoX')
        s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'hotfix')
        s.write(u':')
        if self._hotfix is None:
            s.write(u'null')
        else:
            s.write(u'[')
            s.write(str(len(self._hotfix)))
            s.write(u']')
        s.write(u' ')
        s.write(u'}')
        result = s.getvalue()
        s.close()
        return result
   #def __str__

    def __len__(self):
        size = ConfigRoot.SIZE_
        size += len(self._revision)
        size += len(self._list)
        size += len(self._dict)
        size += len(self._nest)
        size += len(self._info)
        size += len(self._infox)
        if self._hotfix is not None:
            size += 4
            for (k1,v1) in self._hotfix.items():
                size += len(k1)
                size += len(v1)
        return size
   #def __len__

    def read(r):
        self._revision = r.readString()
        self._list.read(r)
        self._dict.read(r)
        self._nest.read(r)
        self._info.read(r)
        self._infox.read(r)
        hotfixExists = r.readInt8()
        if 0x01 == hotfixExists:
            if self._hotfix == None:
                self._hotfix = dict()
            lenHotfix = r.readUInt32()
            num = 0
            while num < lenHotfix:
                num += 1
                k1 = r.readString()
                v1 = r.readString()
                self._hotfix[k1] = v1
        elif 0x00 == hotfixExists:
            self._hotfix = None
        else:
            raise InvarError(498, 'Protoc read error: The value of \'hotfixExists\' is invalid.')
   #def read

    def write(w):
        w.writeString(self._revision)
        self._list.write(w)
        self._dict.write(w)
        self._nest.write(w)
        self._info.write(w)
        self._infox.write(w)
        if self._hotfix != None:
            w.writeUInt8(0x01)
            w.writeUInt32(len(self._hotfix))
            for (k1,v1) in self._hotfix.items():
                w.writeString(k1)
                w.writeString(v1)
        else:
            w.writeUInt8(0x00)
   #def write

#class ConfigRoot

if '__main__' == __name__:
    print('dir(ConfigRoot()) =>\n' + '\n'.join(dir(ConfigRoot())))
    print('ConfigRoot.__doc__ => ' + ConfigRoot.__doc__)
    print('ConfigRoot.__len__ => ' + str(len(ConfigRoot())))
    print('ConfigRoot.__str__ => ' + str(ConfigRoot()))
