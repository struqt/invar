#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ===------------------------------*  Python  *------------------------------===
#             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
# ===------------------------------------------------------------------------===

from TestAbcGender import Gender
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO
from InvarCodec import DataWriter
from InvarCodec import DataReader

class TestAbcConflict(object):

    """名字冲突的类型"""
    CRC32_ = 0xCC7A29B9
    SIZE_  = 13

    __slots__ = (
        '_key',
        '_text',
        '_bytes',
        '_hotfix')
   #__slots__

    def __init__(self):
        self._key    = Gender.NONE
        self._text   = ''
        self._bytes  = []
        self._hotfix = None
   #def __init__

    def __str__(self):
        s = StringIO()
        s.write(u'{')
        s.write(u' ')
        s.write(u'TestAbcConflict')
        s.write(u',')
        s.write(u' ')
        s.write(u'key')
        s.write(u':')
        s.write(unicode(self._key))
        s.write(u',')
        s.write(u' ')
        s.write(u'text')
        s.write(u':')
        s.write(u'"')
        s.write(self._text)
        s.write(u'"')
        s.write(u',')
        s.write(u' ')
        s.write(u'bytes')
        s.write(u':')
        s.write(u'(')
        s.write(str(len(self._bytes)))
        s.write(u')')
        s.write(u',')
        s.write(u' ')
        s.write(u'hotfix')
        s.write(u':')
        if self._hotfix is None:
            s.write(u'null')
        else:
            s.write(u'[')
            s.write(str(len(self._hotfix)))
            s.write(u']')
        s.write(u' ')
        s.write(u'}')
        result = s.getvalue()
        s.close()
        return result
   #def __str__

    def __len__(self):
        size = TestAbcConflict.SIZE_
        size += len(self._text)
        if len(self._bytes) > 0:
            size += len(self._bytes) * 1
        if self._hotfix is not None:
            size += 4
            for (k1,v1) in self._hotfix.items():
                size += len(k1)
                size += len(v1)
        return size
   #def __len__

    def read(r):
        self._key = r.readInt32()
        self._text = r.readString()
        lenBytes = r.readUInt32()
        num = 0
        while num < lenBytes:
            num += 1
            n1 = r.readInt8()
            self._bytes.append(n1)
        hotfixExists = r.readInt8()
        if 0x01 == hotfixExists:
            if self._hotfix == None:
                self._hotfix = dict()
            lenHotfix = r.readUInt32()
            num = 0
            while num < lenHotfix:
                num += 1
                k1 = r.readString()
                v1 = r.readString()
                self._hotfix[k1] = v1
        elif 0x00 == hotfixExists:
            self._hotfix = None
        else:
            raise InvarError(498, 'Protoc read error: The value of \'hotfixExists\' is invalid.')
   #def read

    def write(w):
        w.writeInt32(self._key)
        w.writeString(self._text)
        w.writeUInt32(len(self._bytes))
        for n1 in self._bytes:
            w.writeInt8(n1)
        if self._hotfix != None:
            w.writeUInt8(0x01)
            w.writeUInt32(len(self._hotfix))
            for (k1,v1) in self._hotfix.items():
                w.writeString(k1)
                w.writeString(v1)
        else:
            w.writeUInt8(0x00)
   #def write

#class TestAbcConflict

if '__main__' == __name__:
    print('dir(TestAbcConflict()) =>\n' + '\n'.join(dir(TestAbcConflict())))
    print('TestAbcConflict.__doc__ => ' + TestAbcConflict.__doc__)
    print('TestAbcConflict.__len__ => ' + str(len(TestAbcConflict())))
    print('TestAbcConflict.__str__ => ' + str(TestAbcConflict()))
