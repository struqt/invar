#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ===------------------------------*  Python  *------------------------------===
#             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
# ===------------------------------------------------------------------------===

from TestAbcConflict import TestAbcConflict
from TestAbcGender import Gender
from TestAbcTestBasic import TestBasic
from TestXyzConflict import TestXyzConflict
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO
from InvarCodec import DataWriter
from InvarCodec import DataReader

class Custom(object):

    """自定义类型"""
    CRC32_ = 0x355EC042
    SIZE_  = 23

    __slots__ = (
        '_x',
        '_test_',
        '_xyz',
        '_abc',
        '_children',
        '_noSetter',
        '_useRef',
        '_usePtr',
        '_prev',
        '_next',
        '_emptyDoc')
   #__slots__

    def __init__(self):
        self._x        = Gender.NONE
        self._test_    = TestBasic()
        self._xyz      = TestXyzConflict()
        self._abc      = TestAbcConflict()
        self._children = []
        self._noSetter = -1
        self._useRef   = ''
        self._usePtr   = None
        self._prev     = None
        self._next     = None
        self._emptyDoc = ''
   #def __init__

    def __str__(self):
        s = StringIO()
        s.write(u'{')
        s.write(u' ')
        s.write(u'Custom')
        s.write(u',')
        s.write(u' ')
        s.write(u'x')
        s.write(u':')
        s.write(unicode(self._x))
        s.write(u',')
        s.write(u' ')
        s.write(u'test_')
        s.write(u':')
        s.write(u'<')
        s.write(u'TestBasic')
        s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'xyz')
        s.write(u':')
        s.write(u'<')
        s.write(u'TestXyzConflict')
        s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'abc')
        s.write(u':')
        s.write(u'<')
        s.write(u'TestAbcConflict')
        s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'children')
        s.write(u':')
        s.write(u'(')
        s.write(str(len(self._children)))
        s.write(u')')
        s.write(u',')
        s.write(u' ')
        s.write(u'noSetter')
        s.write(u':')
        s.write(unicode(self._noSetter))
        s.write(u',')
        s.write(u' ')
        s.write(u'useRef')
        s.write(u':')
        s.write(u'"')
        s.write(self._useRef)
        s.write(u'"')
        s.write(u',')
        s.write(u' ')
        s.write(u'usePtr')
        s.write(u':')
        if self._usePtr is None:
            s.write(u'null')
        else:
            s.write(u'"')
            s.write(self._usePtr)
            s.write(u'"')
        s.write(u',')
        s.write(u' ')
        s.write(u'prev')
        s.write(u':')
        if self._prev is None:
            s.write(u'null')
        else:
            s.write(u'<')
            s.write(u'Custom')
            s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'next')
        s.write(u':')
        if self._next is None:
            s.write(u'null')
        else:
            s.write(u'<')
            s.write(u'Custom')
            s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'emptyDoc')
        s.write(u':')
        s.write(u'"')
        s.write(self._emptyDoc)
        s.write(u'"')
        s.write(u' ')
        s.write(u'}')
        result = s.getvalue()
        s.close()
        return result
   #def __str__

    def __len__(self):
        size = Custom.SIZE_
        size += len(self._test_)
        size += len(self._xyz)
        size += len(self._abc)
        size += 4
        for n1 in self._children:
            size += len(n1)
        size += len(self._useRef)
        if self._usePtr is not None:
            size += len(self._usePtr)
        if self._prev is not None:
            size += len(self._prev)
        if self._next is not None:
            size += len(self._next)
        size += len(self._emptyDoc)
        return size
   #def __len__

    def read(r):
        self._x = r.readInt32()
        self._test_.read(r)
        self._xyz.read(r)
        self._abc.read(r)
        lenChildren = r.readUInt32()
        num = 0
        while num < lenChildren:
            num += 1
            n1 = Custom()
            n1.read(r)
            self._children.append(n1)
        self._noSetter = r.readInt32()
        self._useRef = r.readString()
        usePtrExists = r.readInt8()
        if 0x01 == usePtrExists:
            self._usePtr = r.readString()
        elif 0x00 == usePtrExists:
            self._usePtr = None
        else:
            raise InvarError(496, 'Protoc read error: The value of \'usePtrExists\' is invalid.')
        prevExists = r.readInt8()
        if 0x01 == prevExists:
            if self._prev == None:
                self._prev = Custom()
            self._prev.read(r)
        elif 0x00 == prevExists:
            self._prev = None
        else:
            raise InvarError(497, 'Protoc read error: The value of \'prevExists\' is invalid.')
        nextExists = r.readInt8()
        if 0x01 == nextExists:
            if self._next == None:
                self._next = Custom()
            self._next.read(r)
        elif 0x00 == nextExists:
            self._next = None
        else:
            raise InvarError(497, 'Protoc read error: The value of \'nextExists\' is invalid.')
        self._emptyDoc = r.readString()
   #def read

    def write(w):
        w.writeInt32(self._x)
        self._test_.write(w)
        self._xyz.write(w)
        self._abc.write(w)
        w.writeUInt32(len(self._children))
        for n1 in self._children:
            n1.write(w)
        w.writeInt32(self._noSetter)
        w.writeString(self._useRef)
        if self._usePtr != None:
            w.writeUInt8(0x01)
            w.writeString(self._usePtr)
        else:
            w.writeUInt8(0x00)
        if self._prev != None:
            w.writeUInt8(0x01)
            self._prev.write(w)
        else:
            w.writeUInt8(0x00)
        if self._next != None:
            w.writeUInt8(0x01)
            self._next.write(w)
        else:
            w.writeUInt8(0x00)
        w.writeString(self._emptyDoc)
   #def write

#class Custom

if '__main__' == __name__:
    print('dir(Custom()) =>\n' + '\n'.join(dir(Custom())))
    print('Custom.__doc__ => ' + Custom.__doc__)
    print('Custom.__len__ => ' + str(len(Custom())))
    print('Custom.__str__ => ' + str(Custom()))
