#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ===------------------------------*  Python  *------------------------------===
#             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
# ===------------------------------------------------------------------------===

from TestAbcCustom import Custom
from TestAbcGender import Gender
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO
from InvarCodec import DataWriter
from InvarCodec import DataReader

class TestPointer(object):

    """指针类型测试"""
    CRC32_ = 0x6348C9B7
    SIZE_  = 15

    __slots__ = (
        '_self',
        '_stringValue',
        '_other',
        '_listI08',
        '_dictI08',
        '_listNested',
        '_numberSingle',
        '_enumValue',
        '_hotfix')
   #__slots__

    def __init__(self):
        self._self         = None
        self._stringValue  = None
        self._other        = None
        self._listI08      = None
        self._dictI08      = None
        self._listNested   = None
        self._numberSingle = 0.0
        self._enumValue    = Gender.NONE
        self._hotfix       = None
   #def __init__

    def __str__(self):
        s = StringIO()
        s.write(u'{')
        s.write(u' ')
        s.write(u'TestPointer')
        s.write(u',')
        s.write(u' ')
        s.write(u'self')
        s.write(u':')
        if self._self is None:
            s.write(u'null')
        else:
            s.write(u'<')
            s.write(u'TestPointer')
            s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'stringValue')
        s.write(u':')
        if self._stringValue is None:
            s.write(u'null')
        else:
            s.write(u'"')
            s.write(self._stringValue)
            s.write(u'"')
        s.write(u',')
        s.write(u' ')
        s.write(u'other')
        s.write(u':')
        if self._other is None:
            s.write(u'null')
        else:
            s.write(u'<')
            s.write(u'Custom')
            s.write(u'>')
        s.write(u',')
        s.write(u' ')
        s.write(u'listI08')
        s.write(u':')
        if self._listI08 is None:
            s.write(u'null')
        else:
            s.write(u'(')
            s.write(str(len(self._listI08)))
            s.write(u')')
        s.write(u',')
        s.write(u' ')
        s.write(u'dictI08')
        s.write(u':')
        if self._dictI08 is None:
            s.write(u'null')
        else:
            s.write(u'[')
            s.write(str(len(self._dictI08)))
            s.write(u']')
        s.write(u',')
        s.write(u' ')
        s.write(u'listNested')
        s.write(u':')
        if self._listNested is None:
            s.write(u'null')
        else:
            s.write(u'(')
            s.write(str(len(self._listNested)))
            s.write(u')')
        s.write(u',')
        s.write(u' ')
        s.write(u'numberSingle')
        s.write(u':')
        s.write(unicode(self._numberSingle))
        s.write(u',')
        s.write(u' ')
        s.write(u'enumValue')
        s.write(u':')
        s.write(unicode(self._enumValue))
        s.write(u',')
        s.write(u' ')
        s.write(u'hotfix')
        s.write(u':')
        if self._hotfix is None:
            s.write(u'null')
        else:
            s.write(u'[')
            s.write(str(len(self._hotfix)))
            s.write(u']')
        s.write(u' ')
        s.write(u'}')
        result = s.getvalue()
        s.close()
        return result
   #def __str__

    def __len__(self):
        size = TestPointer.SIZE_
        if self._self is not None:
            size += len(self._self)
        if self._stringValue is not None:
            size += len(self._stringValue)
        if self._other is not None:
            size += len(self._other)
        if self._listI08 is not None:
            if len(self._listI08) > 0:
                size += len(self._listI08) * 1
        if self._dictI08 is not None:
            if len(self._dictI08) > 0:
                size += len(self._dictI08) * 2
        if self._listNested is not None:
            size += 4
            for n1 in self._listNested:
                size += 4
                for n2 in n1:
                    size += 4
                    for n3 in n2:
                        size += 4
                        for n4 in n3:
                            size += len(n4)
        if self._hotfix is not None:
            size += 4
            for (k1,v1) in self._hotfix.items():
                size += len(k1)
                size += len(v1)
        return size
   #def __len__

    def read(r):
        selfExists = r.readInt8()
        if 0x01 == selfExists:
            if self._self == None:
                self._self = TestPointer()
            self._self.read(r)
        elif 0x00 == selfExists:
            self._self = None
        else:
            raise InvarError(497, 'Protoc read error: The value of \'selfExists\' is invalid.')
        stringValueExists = r.readInt8()
        if 0x01 == stringValueExists:
            self._stringValue = r.readString()
        elif 0x00 == stringValueExists:
            self._stringValue = None
        else:
            raise InvarError(496, 'Protoc read error: The value of \'stringValueExists\' is invalid.')
        otherExists = r.readInt8()
        if 0x01 == otherExists:
            if self._other == None:
                self._other = Custom()
            self._other.read(r)
        elif 0x00 == otherExists:
            self._other = None
        else:
            raise InvarError(497, 'Protoc read error: The value of \'otherExists\' is invalid.')
        listI08Exists = r.readInt8()
        if 0x01 == listI08Exists:
            if self._listI08 == None:
                self._listI08 = list()
            lenListI08 = r.readUInt32()
            num = 0
            while num < lenListI08:
                num += 1
                n1 = r.readInt8()
                self._listI08.append(n1)
        elif 0x00 == listI08Exists:
            self._listI08 = None
        else:
            raise InvarError(498, 'Protoc read error: The value of \'listI08Exists\' is invalid.')
        dictI08Exists = r.readInt8()
        if 0x01 == dictI08Exists:
            if self._dictI08 == None:
                self._dictI08 = dict()
            lenDictI08 = r.readUInt32()
            num = 0
            while num < lenDictI08:
                num += 1
                k1 = r.readInt8()
                v1 = r.readInt8()
                self._dictI08[k1] = v1
        elif 0x00 == dictI08Exists:
            self._dictI08 = None
        else:
            raise InvarError(498, 'Protoc read error: The value of \'dictI08Exists\' is invalid.')
        listNestedExists = r.readInt8()
        if 0x01 == listNestedExists:
            if self._listNested == None:
                self._listNested = list()
            lenListNested = r.readUInt32()
            num = 0
            while num < lenListNested:
                num += 1
                n1 = list() # read.vec.head
                lenN1 = r.readUInt32()
                num = 0
                while num < lenN1:
                    num += 1
                    n2 = list() # read.vec.head
                    lenN2 = r.readUInt32()
                    num = 0
                    while num < lenN2:
                        num += 1
                        n3 = list() # read.vec.head
                        lenN3 = r.readUInt32()
                        num = 0
                        while num < lenN3:
                            num += 1
                            n4 = TestPointer()
                            n4.read(r)
                            n3.append(n4)
                        n2.append(n3)
                    n1.append(n2)
                self._listNested.append(n1)
        elif 0x00 == listNestedExists:
            self._listNested = None
        else:
            raise InvarError(498, 'Protoc read error: The value of \'listNestedExists\' is invalid.')
        self._numberSingle = r.readSingle()
        self._enumValue = r.readInt32()
        hotfixExists = r.readInt8()
        if 0x01 == hotfixExists:
            if self._hotfix == None:
                self._hotfix = dict()
            lenHotfix = r.readUInt32()
            num = 0
            while num < lenHotfix:
                num += 1
                k1 = r.readString()
                v1 = r.readString()
                self._hotfix[k1] = v1
        elif 0x00 == hotfixExists:
            self._hotfix = None
        else:
            raise InvarError(498, 'Protoc read error: The value of \'hotfixExists\' is invalid.')
   #def read

    def write(w):
        if self._self != None:
            w.writeUInt8(0x01)
            self._self.write(w)
        else:
            w.writeUInt8(0x00)
        if self._stringValue != None:
            w.writeUInt8(0x01)
            w.writeString(self._stringValue)
        else:
            w.writeUInt8(0x00)
        if self._other != None:
            w.writeUInt8(0x01)
            self._other.write(w)
        else:
            w.writeUInt8(0x00)
        if self._listI08 != None:
            w.writeUInt8(0x01)
            w.writeUInt32(len(self._listI08))
            for n1 in self._listI08:
                w.writeInt8(n1)
        else:
            w.writeUInt8(0x00)
        if self._dictI08 != None:
            w.writeUInt8(0x01)
            w.writeUInt32(len(self._dictI08))
            for (k1,v1) in self._dictI08.items():
                w.writeInt8(k1)
                w.writeInt8(v1)
        else:
            w.writeUInt8(0x00)
        if self._listNested != None:
            w.writeUInt8(0x01)
            w.writeUInt32(len(self._listNested))
            for n1 in self._listNested:
                w.writeUInt32(len(n1))
                for n2 in n1:
                    w.writeUInt32(len(n2))
                    for n3 in n2:
                        w.writeUInt32(len(n3))
                        for n4 in n3:
                            n4.write(w)
        else:
            w.writeUInt8(0x00)
        w.writeFloat(self._numberSingle)
        w.writeInt32(self._enumValue)
        if self._hotfix != None:
            w.writeUInt8(0x01)
            w.writeUInt32(len(self._hotfix))
            for (k1,v1) in self._hotfix.items():
                w.writeString(k1)
                w.writeString(v1)
        else:
            w.writeUInt8(0x00)
   #def write

#class TestPointer

if '__main__' == __name__:
    print('dir(TestPointer()) =>\n' + '\n'.join(dir(TestPointer())))
    print('TestPointer.__doc__ => ' + TestPointer.__doc__)
    print('TestPointer.__len__ => ' + str(len(TestPointer())))
    print('TestPointer.__str__ => ' + str(TestPointer()))
