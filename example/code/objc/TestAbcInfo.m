//*==---------------------------*  Obj-C  *--------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------==*//
///*
#if ! __has_feature(objc_arc)
#error This file must be compiled with ARC. Either turn on ARC for the project or use -fobjc-arc flag
#endif //*/

#import "TestAbcInfo.h"

#define CRC32 0x120FDCDB

@interface Info ()
{
    int32_t               _key          ; /* f0 int32 */
    int8_t                _number01     ; /* f1 int8 */
    int16_t               _number02     ; /* f2 int16 */
    int32_t               _number03     ; /* f3 int32 */
    int64_t               _number04     ; /* f4 int64 */
    uint8_t               _number05     ; /* f5 uint8 */
    uint16_t              _number06     ; /* f6 uint16 */
    uint32_t              _number07     ; /* f7 uint32 */
    uint64_t              _number08     ; /* f8 uint64 */
    float_t               _number09     ; /* f9 float */
    double_t              _number10     ; /* f10 double */
    boolean_t             _isReal       ; /* f11 bool */
    NSString            * _s            ; /* f12 string */
    NSMutableArray      * _world        ; /* f13 vec<string> */
    Gender                _gender       ; /* f14 Test.Abc.Gender */
    Info                * _next         ; /* f15 Test.Abc.Info */
    Test_Abc_Conflict   * _conflict     ; /* f16 Test.Abc.Conflict */
    NSMutableArray      * _conflicts    ; /* f17 vec<Test.Xyz.Conflict> */
    NSMutableArray      * _numbers      ; /* f18 vec<double> */
    NSMutableDictionary * _mapInfoG     ; /* f19 map<Test.Abc.Info,Test.Abc.Gender> */
    NSMutableDictionary * _mapGenderInfo; /* f20 map<Test.Abc.Gender,Test.Abc.Info> */
    NSMutableDictionary * _mapDouble    ; /* f21 map<int32,double> */
    NSMutableDictionary * _hotfix       ; /* f22 map<string,string> */
}
@end

@implementation Info

- (instancetype) init
{
    self = [super init];
    if (!self) { return self; }
    _key           = 123;
    _number01      = -1;
    _number02      = -1;
    _number03      = -1;
    _number04      = -1L;
    _number05      = 0;
    _number06      = 0;
    _number07      = 0;
    _number08      = 0UL;
    _number09      = 0.0F;
    _number10      = 0.00;
    _isReal        = false;
    _s             = @"hello";
    _world         = [[NSMutableArray alloc] init];
    _gender        = GenderNONE;
    _next          = nil;
    _conflict      = [[Test_Abc_Conflict alloc] init];
    _conflicts     = [[NSMutableArray alloc] init];
    _numbers       = [[NSMutableArray alloc] init];
    _mapInfoG      = [[NSMutableDictionary alloc] init];
    _mapGenderInfo = [[NSMutableDictionary alloc] init];
    _mapDouble     = [[NSMutableDictionary alloc] init];
    _hotfix        = nil;
    return self;
}
/* Info::init */

- (void) dealloc
{
    if (_s            ) { _s             = nil; }
    if (_world        ) { _world         = nil; }
    if (_next         ) { _next          = nil; }
    if (_conflict     ) { _conflict      = nil; }
    if (_conflicts    ) { _conflicts     = nil; }
    if (_numbers      ) { _numbers       = nil; }
    if (_mapInfoG     ) { _mapInfoG      = nil; }
    if (_mapGenderInfo) { _mapGenderInfo = nil; }
    if (_mapDouble    ) { _mapDouble     = nil; }
    if (_hotfix       ) { _hotfix        = nil; }
}
/* Info::dealloc */

- (id) copyWithZone:(nullable NSZone *)zone;
{
    id copy = [[[self class] allocWithZone:zone] init];
    DataWriter *writer = [DataWriter Create];
    [self write:writer];
    [copy read:[DataReader CreateWithData:writer.data]];
    return copy;
}
/* Info::copyWithZone */

- (int32_t              ) key           { return _key          ; }
- (int8_t               ) number01      { return _number01     ; }
- (int16_t              ) number02      { return _number02     ; }
- (int32_t              ) number03      { return _number03     ; }
- (int64_t              ) number04      { return _number04     ; }
- (uint8_t              ) number05      { return _number05     ; }
- (uint16_t             ) number06      { return _number06     ; }
- (uint32_t             ) number07      { return _number07     ; }
- (uint64_t             ) number08      { return _number08     ; }
- (float_t              ) number09      { return _number09     ; }
- (double_t             ) number10      { return _number10     ; }
- (boolean_t            ) isReal        { return _isReal       ; }
- (NSString            *) s             { return _s            ; }
- (NSMutableArray      *) world         { return _world        ; }
- (Gender               ) gender        { return _gender       ; }
- (Info                *) next          { return _next         ; }
- (Test_Abc_Conflict   *) conflict      { return _conflict     ; }
- (NSMutableArray      *) conflicts     { return _conflicts    ; }
- (NSMutableArray      *) numbers       { return _numbers      ; }
- (NSMutableDictionary *) mapInfoG      { return _mapInfoG     ; }
- (NSMutableDictionary *) mapGenderInfo { return _mapGenderInfo; }
- (NSMutableDictionary *) mapDouble     { return _mapDouble    ; }
- (NSMutableDictionary *) hotfix        { return _hotfix       ; }

- (Info *) setKey           : (int32_t              )v { _key           = v; return self; }
- (Info *) setNumber01      : (int8_t               )v { _number01      = v; return self; }
- (Info *) setNumber02      : (int16_t              )v { _number02      = v; return self; }
- (Info *) setNumber03      : (int32_t              )v { _number03      = v; return self; }
- (Info *) setNumber04      : (int64_t              )v { _number04      = v; return self; }
- (Info *) setNumber05      : (uint8_t              )v { _number05      = v; return self; }
- (Info *) setNumber06      : (uint16_t             )v { _number06      = v; return self; }
- (Info *) setNumber07      : (uint32_t             )v { _number07      = v; return self; }
- (Info *) setNumber08      : (uint64_t             )v { _number08      = v; return self; }
- (Info *) setNumber09      : (float_t              )v { _number09      = v; return self; }
- (Info *) setNumber10      : (double_t             )v { _number10      = v; return self; }
- (Info *) setIsReal        : (boolean_t            )v { _isReal        = v; return self; }
- (Info *) setS             : (NSString            *)v { _s             = v; return self; }
- (Info *) setGender        : (Gender               )v { _gender        = v; return self; }
- (Info *) setNext          : (Info                *)v { _next          = v; return self; }
- (Info *) setConflict      : (Test_Abc_Conflict   *)v { _conflict      = v; return self; }
- (Info *) setHotfix        : (NSMutableDictionary *)v { _hotfix        = v; return self; }

- (NSInteger)read:(const DataReader * const)r
{
    BOOL eof = false;
    _key = [r readInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _number01 = [r readInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _number02 = [r readInt16:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _number03 = [r readInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _number04 = [r readInt64:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _number05 = [r readUInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _number06 = [r readUInt16:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _number07 = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _number08 = [r readUInt64:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _number09 = [r readFloat:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _number10 = [r readDouble:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _isReal = [r readBool:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _s = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    uint32_t lenWorld = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    for (uint32_t iWorld = 0; iWorld < lenWorld; iWorld++) {
        NSString *n1 = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
        [_world addObject:n1];
    } if (eof) { return INVAR_ERR_DECODE_EOF; }
    _gender = (Gender)[r readInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    int8_t nextExists = [r readInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    if (0x01 == nextExists) {
        if (_next == nil) { _next = [[Info alloc] init]; }
        NSInteger nextErr = [_next read:r]; if (nextErr != 0) { return nextErr; }
    }
    else if (0x00 == nextExists) { _next = nil; }
    else { return INVAR_ERR_DECODE_STRUCT_P; } if (eof) { return INVAR_ERR_DECODE_EOF; }
    NSInteger conflictErr = [_conflict read:r]; if (conflictErr != 0) { return conflictErr; } if (eof) { return INVAR_ERR_DECODE_EOF; }
    uint32_t lenConflicts = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    for (uint32_t iConflicts = 0; iConflicts < lenConflicts; iConflicts++) {
        Test_Xyz_Conflict *n1 = [[Test_Xyz_Conflict alloc] init];
        NSInteger n1Err = [n1 read:r]; if (n1Err != 0) { return n1Err; } if (eof) { return INVAR_ERR_DECODE_EOF; }
        [_conflicts addObject:n1];
    } if (eof) { return INVAR_ERR_DECODE_EOF; }
    uint32_t lenNumbers = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    for (uint32_t iNumbers = 0; iNumbers < lenNumbers; iNumbers++) {
        NSNumber *n1 = @([r readDouble:&eof]); if (eof) { return INVAR_ERR_DECODE_EOF; }
        [_numbers addObject:n1];
    } if (eof) { return INVAR_ERR_DECODE_EOF; }
    uint32_t lenMapInfoG = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    for (uint32_t iMapInfoG = 0; iMapInfoG < lenMapInfoG; iMapInfoG++) {
        Info *k1 = [[Info alloc] init];
        NSInteger k1Err = [k1 read:r]; if (k1Err != 0) { return k1Err; } if (eof) { return INVAR_ERR_DECODE_EOF; }
        id v1 = @((Gender)[r readInt32:&eof]); if (eof) { return INVAR_ERR_DECODE_EOF; }
        [_mapInfoG setObject:v1 forKey:k1];
    } if (eof) { return INVAR_ERR_DECODE_EOF; }
    uint32_t lenMapGenderInfo = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    for (uint32_t iMapGenderInfo = 0; iMapGenderInfo < lenMapGenderInfo; iMapGenderInfo++) {
        id k1 = @((Gender)[r readInt32:&eof]); if (eof) { return INVAR_ERR_DECODE_EOF; }
        Info *v1 = [[Info alloc] init];
        NSInteger v1Err = [v1 read:r]; if (v1Err != 0) { return v1Err; } if (eof) { return INVAR_ERR_DECODE_EOF; }
        [_mapGenderInfo setObject:v1 forKey:k1];
    } if (eof) { return INVAR_ERR_DECODE_EOF; }
    uint32_t lenMapDouble = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    for (uint32_t iMapDouble = 0; iMapDouble < lenMapDouble; iMapDouble++) {
        NSNumber *k1 = @([r readInt32:&eof]); if (eof) { return INVAR_ERR_DECODE_EOF; }
        NSNumber *v1 = @([r readDouble:&eof]); if (eof) { return INVAR_ERR_DECODE_EOF; }
        [_mapDouble setObject:v1 forKey:k1];
    } if (eof) { return INVAR_ERR_DECODE_EOF; }
    int8_t hotfixExists = [r readInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    if (0x01 == hotfixExists) {
        if (_hotfix == nil) { _hotfix = [[NSMutableDictionary alloc] init]; }
        uint32_t lenHotfix = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
        for (uint32_t iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
            NSString *k1 = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
            NSString *v1 = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
            [_hotfix setObject:v1 forKey:k1];
        }
    }
    else if (0x00 == hotfixExists) { _hotfix = nil; }
    else { return INVAR_ERR_DECODE_VEC_MAP_P; } if (eof) { return INVAR_ERR_DECODE_EOF; }
    return INVAR_ERR_NONE;
}
/* Info::read(...) */

- (NSInteger)write:(DataWriter *)w
{
    [w writeInt32:_key];
    [w writeInt8:_number01];
    [w writeInt16:_number02];
    [w writeInt32:_number03];
    [w writeInt64:_number04];
    [w writeUInt8:_number05];
    [w writeUInt16:_number06];
    [w writeUInt32:_number07];
    [w writeUInt64:_number08];
    [w writeFloat:_number09];
    [w writeDouble:_number10];
    [w writeBool:_isReal];
    [w writeString:_s];
    [w writeUInt32:(uint32_t)[_world count]];
    for (id n1 in _world) {
        [w writeString:n1];
    }
    [w writeInt32:_gender];
    if (_next != nil) { [w writeInt8:0x01]; [_next write:w]; }
    else { [w writeInt8:0x00]; }
    [_conflict write:w];
    [w writeUInt32:(uint32_t)[_conflicts count]];
    for (id n1 in _conflicts) {
        [n1 write:w];
    }
    [w writeUInt32:(uint32_t)[_numbers count]];
    for (id n1 in _numbers) {
        [w writeDouble:[n1 doubleValue]];
    }
    [w writeUInt32:(uint32_t)[_mapInfoG count]];
    for (id k1 in _mapInfoG) {
        [k1 write:w];
        Gender v1 = [[_mapInfoG objectForKey:k1] intValue]; [w writeInt32:v1];
    }
    [w writeUInt32:(uint32_t)[_mapGenderInfo count]];
    for (id k1 in _mapGenderInfo) {
        [w writeInt32:[k1 intValue]];
        Info *v1 = [_mapGenderInfo objectForKey:k1];
        [v1 write:w];
    }
    [w writeUInt32:(uint32_t)[_mapDouble count]];
    for (id k1 in _mapDouble) {
        [w writeInt32:[k1 intValue]];
        double_t v1 = [[_mapDouble objectForKey:k1] doubleValue]; [w writeDouble:v1];
    }
    if (_hotfix != nil) {
        [w writeInt8:0x01];
        [w writeUInt32:(uint32_t)[_hotfix count]];
        for (id k1 in _hotfix) {
            [w writeString:k1];
            NSString *v1 = [_hotfix objectForKey:k1];
            [w writeString:v1];
        }
    } else {
        [w writeInt8:0x00];
    }
    return 0;
}
/* Info::write */

- (NSString *)toStringJSON;
{
    NSMutableString *s = [[NSMutableString alloc] init] ;
    [self writeJSON:s];
    return s;
}

- (void)writeJSON:(NSMutableString *)s
{
    [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
    NSString *comma = nil;
    [s appendString:QUOTATION_S]; [s appendString:@"key"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_key)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"number01"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_number01)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"number02"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_number02)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"number03"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_number03)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"number04"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_number04)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"number05"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_number05)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"number06"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_number06)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"number07"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_number07)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"number08"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_number08)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"number09"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_number09)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"number10"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_number10)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"isReal"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendString:_isReal ? @"true" : @"false"];
    BOOL sExists = (_s && [_s length] > 0);
    if (comma && sExists) { [s appendString:comma]; comma = nil; }
    if (sExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"s"]; [s appendString:QUOTATION_S];
        [s appendString:COLON_S]; [s appendString:QUOTATION_S]; [s appendString:_s]; [s appendString:QUOTATION_S]; comma = COMMA_S;
    }
    BOOL worldExists = (nil != _world && [_world count] > 0);
    if (comma && worldExists) { [s appendString:comma]; comma = nil; }
    if (worldExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"world"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger worldSize = (nil == _world ? 0 : [_world count]);
        if (worldSize > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_SQUARE_S];
            int worldIdx = 0;
            for (id n1 in _world) {/* vec.for: _world */
                ++worldIdx;
                [s appendString:QUOTATION_S]; [s appendString:n1]; [s appendString:QUOTATION_S];
                if (worldIdx != worldSize) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_SQUARE_S];
        } comma = COMMA_S;
    }
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"gender"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_gender)];
    BOOL nextExists = (nil != _next);
    if (comma && nextExists) { [s appendString:comma]; comma = nil; }
    if (nextExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"next"]; [s appendString:QUOTATION_S];
        [s appendString:COLON_S]; [_next writeJSON:s]; comma = COMMA_S;
    }
    BOOL conflictExists = (nil != _conflict);
    if (comma && conflictExists) { [s appendString:comma]; comma = nil; }
    if (conflictExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"conflict"]; [s appendString:QUOTATION_S];
        [s appendString:COLON_S]; [_conflict writeJSON:s]; comma = COMMA_S;
    }
    BOOL conflictsExists = (nil != _conflicts && [_conflicts count] > 0);
    if (comma && conflictsExists) { [s appendString:comma]; comma = nil; }
    if (conflictsExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"conflicts"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger conflictsSize = (nil == _conflicts ? 0 : [_conflicts count]);
        if (conflictsSize > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_SQUARE_S];
            int conflictsIdx = 0;
            for (id n1 in _conflicts) {/* vec.for: _conflicts */
                ++conflictsIdx;
                [n1 writeJSON:s];
                if (conflictsIdx != conflictsSize) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_SQUARE_S];
        } comma = COMMA_S;
    }
    BOOL numbersExists = (nil != _numbers && [_numbers count] > 0);
    if (comma && numbersExists) { [s appendString:comma]; comma = nil; }
    if (numbersExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"numbers"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger numbersSize = (nil == _numbers ? 0 : [_numbers count]);
        if (numbersSize > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_SQUARE_S];
            int numbersIdx = 0;
            for (id n1 in _numbers) {/* vec.for: _numbers */
                ++numbersIdx;
                [s appendFormat:FORMAT_S, n1];
                if (numbersIdx != numbersSize) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_SQUARE_S];
        } comma = COMMA_S;
    }
    BOOL mapInfoGExists = (nil != _mapInfoG && [_mapInfoG count] > 0);
    if (comma && mapInfoGExists) { [s appendString:comma]; comma = nil; }
    if (mapInfoGExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"mapInfoG"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger mapInfoGSize = (nil == _mapInfoG ? 0 : [_mapInfoG count]);
        if (mapInfoGSize > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
            int mapInfoGIdx = 0;
            for (id k1 in _mapInfoG) { /* map.for: _mapInfoG */
                ++mapInfoGIdx;
                [s appendString:QUOTATION_S]; [k1 writeJSON:s];
                [s appendString:QUOTATION_S]; [s appendString:COLON_S]; /* nest.k */
                id v1 = [_mapInfoG objectForKey:k1];
                [s appendFormat:FORMAT_S, v1]; /* nest.v */
                if (mapInfoGIdx != mapInfoGSize) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_CURLY_S];
        } comma = COMMA_S;
    }
    BOOL mapGenderInfoExists = (nil != _mapGenderInfo && [_mapGenderInfo count] > 0);
    if (comma && mapGenderInfoExists) { [s appendString:comma]; comma = nil; }
    if (mapGenderInfoExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"mapGenderInfo"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger mapGenderInfoSize = (nil == _mapGenderInfo ? 0 : [_mapGenderInfo count]);
        if (mapGenderInfoSize > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
            int mapGenderInfoIdx = 0;
            for (id k1 in _mapGenderInfo) { /* map.for: _mapGenderInfo */
                ++mapGenderInfoIdx;
                [s appendString:QUOTATION_S]; [s appendFormat:FORMAT_S, k1];
                [s appendString:QUOTATION_S]; [s appendString:COLON_S]; /* nest.k */
                id v1 = [_mapGenderInfo objectForKey:k1];
                [v1 writeJSON:s]; /* nest.v */
                if (mapGenderInfoIdx != mapGenderInfoSize) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_CURLY_S];
        } comma = COMMA_S;
    }
    BOOL mapDoubleExists = (nil != _mapDouble && [_mapDouble count] > 0);
    if (comma && mapDoubleExists) { [s appendString:comma]; comma = nil; }
    if (mapDoubleExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"mapDouble"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger mapDoubleSize = (nil == _mapDouble ? 0 : [_mapDouble count]);
        if (mapDoubleSize > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
            int mapDoubleIdx = 0;
            for (id k1 in _mapDouble) { /* map.for: _mapDouble */
                ++mapDoubleIdx;
                [s appendString:QUOTATION_S]; [s appendFormat:FORMAT_S, k1];
                [s appendString:QUOTATION_S]; [s appendString:COLON_S]; /* nest.k */
                id v1 = [_mapDouble objectForKey:k1];
                [s appendFormat:FORMAT_S, v1]; /* nest.v */
                if (mapDoubleIdx != mapDoubleSize) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_CURLY_S];
        } comma = COMMA_S;
    }
    BOOL hotfixExists = (nil != _hotfix && [_hotfix count] > 0);
    if (comma && hotfixExists) { [s appendString:comma]; comma = nil; }
    if (hotfixExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"hotfix"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger hotfixSize = (nil == _hotfix ? 0 : [_hotfix count]);
        if (hotfixSize > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
            int hotfixIdx = 0;
            for (id k1 in _hotfix) { /* map.for: _hotfix */
                ++hotfixIdx;
                [s appendString:QUOTATION_S]; [s appendString:k1]; [s appendString:QUOTATION_S]; [s appendString:COLON_S]; /* nest.k.string */
                id v1 = [_hotfix objectForKey:k1];
                [s appendString:QUOTATION_S]; [s appendString:v1]; [s appendString:QUOTATION_S]; /* nest.v */
                if (hotfixIdx != hotfixSize) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_CURLY_S];
        } comma = COMMA_S;
    }
    [s appendString:RIGHT_CURLY_S]; [s appendString:LINE_FEED_S];
}
/* Info::writeJSON */

@end /* @implementation Info */
/*
2@test.abc.Info/int32/int8/int16/int32/int64/uint8/uint16/uint32/uint64/float/double/bool/string/vec
  -string/int32/test.abc.Info/test.abc.Conflict/vec-test.xyz.Conflict/vec-double/map-test.abc.Info-i
  nt32/map-int32-test.abc.Info/map-int32-double/map-string-string
+@test.abc.Conflict/int32/string/vec-int8/map-string-string
+@test.xyz.Conflict/double/map-string-string
*/

