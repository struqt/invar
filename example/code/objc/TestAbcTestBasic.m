//*==---------------------------*  Obj-C  *--------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------==*//
///*
#if ! __has_feature(objc_arc)
#error This file must be compiled with ARC. Either turn on ARC for the project or use -fobjc-arc flag
#endif //*/

#import "TestAbcTestBasic.h"

#define CRC32__ 0xF60C9915
#define SIZE__  55L

@interface TestBasic ()
{
    int8_t      _numberI08   ; /* 0 &-int8 */
    int16_t     _numberI16   ; /* 1 &-int16 */
    int32_t     _numberI32   ; /* 2 &-int32 */
    int64_t     _numberI64   ; /* 3 &-int64 */
    uint8_t     _numberU08   ; /* 4 &-uint8 */
    uint16_t    _numberU16   ; /* 5 &-uint16 */
    uint32_t    _numberU32   ; /* 6 &-uint32 */
    uint64_t    _numberU64   ; /* 7 &-uint64 */
    float_t     _numberSingle; /* 8 &-float */
    double_t    _numberDouble; /* 9 &-double */
    boolean_t   _boolValue   ; /* 10 &-bool */
    NSString  * _stringValue ; /* 11 &-string */
    Gender      _enumValue   ; /* 12 &-Test.Abc.Gender */
    Gender      _enumDeft    ; /* 13 &-Test.Abc.Gender */
}
@end

@implementation TestBasic

- (instancetype) init
{
    self = [super init];
    if (!self) { return self; }
    _numberI08    = -128;
    _numberI16    = -32768;
    _numberI32    = -2147483648;
    _numberI64    = -9223372036854774808L;
    _numberU08    = 255;
    _numberU16    = 65535;
    _numberU32    = 4294967295;
    _numberU64    = 18446744073709551615UL;
    _numberSingle = 3.14159F;
    _numberDouble = 3.1415926;
    _boolValue    = false;
    _stringValue  = @"hello世界";
    _enumValue    = GenderNONE;
    _enumDeft     = GenderMALE;
    return self;
}
/* TestBasic::init */

- (void) dealloc
{
    if (_stringValue ) { _stringValue  = nil; }
}
/* TestBasic::dealloc */

- (id) copyWithZone:(nullable NSZone *)zone;
{
    id copy = [[[self class] allocWithZone:zone] init];
    DataWriter *writer = [DataWriter CreateWithData:[[NSMutableData alloc] initWithCapacity:[self byteSize]]];
    [self write:writer];
    [copy read:[DataReader CreateWithData:writer.data]];
    return copy;
}
/* TestBasic::copyWithZone */

- (int8_t     ) numberI08    { return _numberI08   ; }
- (int16_t    ) numberI16    { return _numberI16   ; }
- (int32_t    ) numberI32    { return _numberI32   ; }
- (int64_t    ) numberI64    { return _numberI64   ; }
- (uint8_t    ) numberU08    { return _numberU08   ; }
- (uint16_t   ) numberU16    { return _numberU16   ; }
- (uint32_t   ) numberU32    { return _numberU32   ; }
- (uint64_t   ) numberU64    { return _numberU64   ; }
- (float_t    ) numberSingle { return _numberSingle; }
- (double_t   ) numberDouble { return _numberDouble; }
- (boolean_t  ) boolValue    { return _boolValue   ; }
- (NSString  *) stringValue  { return _stringValue ; }
- (Gender     ) enumValue    { return _enumValue   ; }
- (Gender     ) enumDeft     { return _enumDeft    ; }

- (TestBasic *) setNumberI08    : (int8_t     )v { _numberI08    = v; return self; }
- (TestBasic *) setNumberI16    : (int16_t    )v { _numberI16    = v; return self; }
- (TestBasic *) setNumberI32    : (int32_t    )v { _numberI32    = v; return self; }
- (TestBasic *) setNumberI64    : (int64_t    )v { _numberI64    = v; return self; }
- (TestBasic *) setNumberU08    : (uint8_t    )v { _numberU08    = v; return self; }
- (TestBasic *) setNumberU16    : (uint16_t   )v { _numberU16    = v; return self; }
- (TestBasic *) setNumberU32    : (uint32_t   )v { _numberU32    = v; return self; }
- (TestBasic *) setNumberU64    : (uint64_t   )v { _numberU64    = v; return self; }
- (TestBasic *) setNumberSingle : (float_t    )v { _numberSingle = v; return self; }
- (TestBasic *) setNumberDouble : (double_t   )v { _numberDouble = v; return self; }
- (TestBasic *) setBoolValue    : (boolean_t  )v { _boolValue    = v; return self; }
- (TestBasic *) setStringValue  : (NSString  *)v { _stringValue  = v; return self; }
- (TestBasic *) setEnumValue    : (Gender     )v { _enumValue    = v; return self; }
- (TestBasic *) setEnumDeft     : (Gender     )v { _enumDeft     = v; return self; }

- (NSInteger)read:(const DataReader * const)r
{
    BOOL eof = false;
    _numberI08 = [r readInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberI16 = [r readInt16:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberI32 = [r readInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberI64 = [r readInt64:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberU08 = [r readUInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberU16 = [r readUInt16:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberU32 = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberU64 = [r readUInt64:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberSingle = [r readFloat:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberDouble = [r readDouble:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _boolValue = [r readBool:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _stringValue = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _enumValue = (Gender)[r readInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _enumDeft = (Gender)[r readInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    return INVAR_ERR_NONE;
}
/* TestBasic::read(...) */

- (NSInteger)write:(DataWriter *)w
{
    [w writeInt8:_numberI08];
    [w writeInt16:_numberI16];
    [w writeInt32:_numberI32];
    [w writeInt64:_numberI64];
    [w writeUInt8:_numberU08];
    [w writeUInt16:_numberU16];
    [w writeUInt32:_numberU32];
    [w writeUInt64:_numberU64];
    [w writeFloat:_numberSingle];
    [w writeDouble:_numberDouble];
    [w writeBool:_boolValue];
    [w writeString:_stringValue];
    [w writeInt32:_enumValue];
    [w writeInt32:_enumDeft];
    return 0;
}
/* TestBasic::write */

- (NSUInteger)byteSize
{
    NSUInteger size = SIZE__;
    size += [_stringValue length];
    return size;
}
/* TestBasic::byteSize */

- (NSString *)toStringJSON;
{
    NSMutableString *s = [[NSMutableString alloc] init] ;
    [self writeJSON:s];
    return s;
}

- (void)writeJSON:(NSMutableString *)s
{
    [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
    NSString *comma = nil;
    [s appendString:QUOTATION_S]; [s appendString:@"numberI08"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberI08)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberI16"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberI16)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberI32"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberI32)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberI64"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberI64)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberU08"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberU08)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberU16"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberU16)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberU32"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberU32)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberU64"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberU64)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberSingle"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberSingle)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberDouble"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberDouble)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"boolValue"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendString:_boolValue ? @"true" : @"false"];
    BOOL stringValueExists = (_stringValue && [_stringValue length] > 0);
    if (comma && stringValueExists) { [s appendString:comma]; comma = nil; }
    if (stringValueExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"stringValue"]; [s appendString:QUOTATION_S];
        [s appendString:COLON_S]; [s appendString:QUOTATION_S]; [s appendString:_stringValue]; [s appendString:QUOTATION_S]; comma = COMMA_S;
    }
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"enumValue"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_enumValue)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"enumDeft"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_enumDeft)];
    [s appendString:RIGHT_CURLY_S]; [s appendString:LINE_FEED_S];
}
/* TestBasic::writeJSON */

@end /* @implementation TestBasic */
/*
0@test.abc.TestBasic/int8/int16/int32/int64/uint8/uint16/uint32/uint64/float/double/bool/string/int3
  2/int32
*/

