//*==---------------------------*  Obj-C  *--------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------==*//
///*
#if ! __has_feature(objc_arc)
#error This file must be compiled with ARC. Either turn on ARC for the project or use -fobjc-arc flag
#endif //*/

#import "TestXyzTestRefer.h"

#define CRC32 0xCB836F3B

@interface TestRefer ()
{
    int8_t                _numberi08   ; /* 0 int8 */
    int16_t               _numberi16   ; /* 1 int16 */
    int32_t               _numberi32   ; /* 2 int32 */
    int64_t               _numberi64   ; /* 3 int64 */
    uint8_t               _numberu08   ; /* 4 uint8 */
    uint16_t              _numberu16   ; /* 5 uint16 */
    uint32_t              _numberu32   ; /* 6 uint32 */
    uint64_t              _numberu64   ; /* 7 uint64 */
    float_t               _numberSingle; /* 8 float */
    double_t              _numberDouble; /* 9 double */
    boolean_t             _boolValue   ; /* 10 bool */
    NSString            * _stringValue ; /* 11 string */
    Gender                _enumValue   ; /* 12 Test.Abc.Gender */
    Custom              * _other       ; /* 13 Test.Abc.Custom */
    TestRefer           * _self        ; /* 14 Test.Xyz.TestRefer */
    NSMutableArray      * _listI08     ; /* 15 vec<int8> */
    NSMutableDictionary * _dictI08     ; /* 16 map<int8,int8> */
    NSMutableDictionary * _hotfix      ; /* 17 map<string,string> */
}
@end

@implementation TestRefer

- (instancetype) init
{
    self = [super init];
    if (!self) { return self; }
    _numberi08    = -1;
    _numberi16    = -1;
    _numberi32    = -1;
    _numberi64    = -1L;
    _numberu08    = 0;
    _numberu16    = 0;
    _numberu32    = 0;
    _numberu64    = 0UL;
    _numberSingle = 0.0F;
    _numberDouble = 0.00;
    _boolValue    = false;
    _stringValue  = @"";
    _enumValue    = GenderNONE;
    _other        = [[Custom alloc] init];
    _self         = nil;
    _listI08      = [[NSMutableArray alloc] init];
    _dictI08      = [[NSMutableDictionary alloc] init];
    _hotfix       = nil;
    return self;
}
/* TestRefer::init */

- (void) dealloc
{
    if (_stringValue ) { _stringValue  = nil; }
    if (_other       ) { _other        = nil; }
    if (_self        ) { _self         = nil; }
    if (_listI08     ) { _listI08      = nil; }
    if (_dictI08     ) { _dictI08      = nil; }
    if (_hotfix      ) { _hotfix       = nil; }
}
/* TestRefer::dealloc */

- (id) copyWithZone:(nullable NSZone *)zone;
{
    id copy = [[[self class] allocWithZone:zone] init];
    DataWriter *writer = [DataWriter Create];
    [self write:writer];
    [copy read:[DataReader CreateWithData:writer.data]];
    return copy;
}
/* TestRefer::copyWithZone */

- (int8_t               ) numberi08    { return _numberi08   ; }
- (int16_t              ) numberi16    { return _numberi16   ; }
- (int32_t              ) numberi32    { return _numberi32   ; }
- (int64_t              ) numberi64    { return _numberi64   ; }
- (uint8_t              ) numberu08    { return _numberu08   ; }
- (uint16_t             ) numberu16    { return _numberu16   ; }
- (uint32_t             ) numberu32    { return _numberu32   ; }
- (uint64_t             ) numberu64    { return _numberu64   ; }
- (float_t              ) numberSingle { return _numberSingle; }
- (double_t             ) numberDouble { return _numberDouble; }
- (boolean_t            ) boolValue    { return _boolValue   ; }
- (NSString            *) stringValue  { return _stringValue ; }
- (Gender               ) enumValue    { return _enumValue   ; }
- (Custom              *) other        { return _other       ; }
- (TestRefer           *) self         { return _self        ; }
- (NSMutableArray      *) listI08      { return _listI08     ; }
- (NSMutableDictionary *) dictI08      { return _dictI08     ; }
- (NSMutableDictionary *) hotfix       { return _hotfix      ; }

- (TestRefer *) setNumberi08    : (int8_t               )v { _numberi08    = v; return self; }
- (TestRefer *) setNumberi16    : (int16_t              )v { _numberi16    = v; return self; }
- (TestRefer *) setNumberi32    : (int32_t              )v { _numberi32    = v; return self; }
- (TestRefer *) setNumberi64    : (int64_t              )v { _numberi64    = v; return self; }
- (TestRefer *) setNumberu08    : (uint8_t              )v { _numberu08    = v; return self; }
- (TestRefer *) setNumberu16    : (uint16_t             )v { _numberu16    = v; return self; }
- (TestRefer *) setNumberu32    : (uint32_t             )v { _numberu32    = v; return self; }
- (TestRefer *) setNumberu64    : (uint64_t             )v { _numberu64    = v; return self; }
- (TestRefer *) setNumberSingle : (float_t              )v { _numberSingle = v; return self; }
- (TestRefer *) setNumberDouble : (double_t             )v { _numberDouble = v; return self; }
- (TestRefer *) setBoolValue    : (boolean_t            )v { _boolValue    = v; return self; }
- (TestRefer *) setStringValue  : (NSString            *)v { _stringValue  = v; return self; }
- (TestRefer *) setEnumValue    : (Gender               )v { _enumValue    = v; return self; }
- (TestRefer *) setOther        : (Custom              *)v { _other        = v; return self; }
- (TestRefer *) setSelf         : (TestRefer           *)v { _self         = v; return self; }
- (TestRefer *) setHotfix       : (NSMutableDictionary *)v { _hotfix       = v; return self; }

- (NSInteger)read:(const DataReader * const)r
{
    BOOL eof = false;
    _numberi08 = [r readInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberi16 = [r readInt16:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberi32 = [r readInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberi64 = [r readInt64:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberu08 = [r readUInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberu16 = [r readUInt16:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberu32 = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberu64 = [r readUInt64:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberSingle = [r readFloat:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _numberDouble = [r readDouble:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _boolValue = [r readBool:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _stringValue = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    _enumValue = (Gender)[r readInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    NSInteger otherErr = [_other read:r]; if (otherErr != 0) { return otherErr; } if (eof) { return INVAR_ERR_DECODE_EOF; }
    int8_t selfExists = [r readInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    if (0x01 == selfExists) {
        if (_self == nil) { _self = [[TestRefer alloc] init]; }
        NSInteger selfErr = [_self read:r]; if (selfErr != 0) { return selfErr; }
    }
    else if (0x00 == selfExists) { _self = nil; }
    else { return INVAR_ERR_DECODE_STRUCT_P; } if (eof) { return INVAR_ERR_DECODE_EOF; }
    uint32_t lenListI08 = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    for (uint32_t iListI08 = 0; iListI08 < lenListI08; iListI08++) {
        NSNumber *n1 = @([r readInt8:&eof]); if (eof) { return INVAR_ERR_DECODE_EOF; }
        [_listI08 addObject:n1];
    } if (eof) { return INVAR_ERR_DECODE_EOF; }
    uint32_t lenDictI08 = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    for (uint32_t iDictI08 = 0; iDictI08 < lenDictI08; iDictI08++) {
        NSNumber *k1 = @([r readInt8:&eof]); if (eof) { return INVAR_ERR_DECODE_EOF; }
        NSNumber *v1 = @([r readInt8:&eof]); if (eof) { return INVAR_ERR_DECODE_EOF; }
        [_dictI08 setObject:v1 forKey:k1];
    } if (eof) { return INVAR_ERR_DECODE_EOF; }
    int8_t hotfixExists = [r readInt8:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
    if (0x01 == hotfixExists) {
        if (_hotfix == nil) { _hotfix = [[NSMutableDictionary alloc] init]; }
        uint32_t lenHotfix = [r readUInt32:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
        for (uint32_t iHotfix = 0; iHotfix < lenHotfix; iHotfix++) {
            NSString *k1 = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
            NSString *v1 = [r readString:&eof]; if (eof) { return INVAR_ERR_DECODE_EOF; }
            [_hotfix setObject:v1 forKey:k1];
        }
    }
    else if (0x00 == hotfixExists) { _hotfix = nil; }
    else { return INVAR_ERR_DECODE_VEC_MAP_P; } if (eof) { return INVAR_ERR_DECODE_EOF; }
    return INVAR_ERR_NONE;
}
/* TestRefer::read(...) */

- (NSInteger)write:(DataWriter *)w
{
    [w writeInt8:_numberi08];
    [w writeInt16:_numberi16];
    [w writeInt32:_numberi32];
    [w writeInt64:_numberi64];
    [w writeUInt8:_numberu08];
    [w writeUInt16:_numberu16];
    [w writeUInt32:_numberu32];
    [w writeUInt64:_numberu64];
    [w writeFloat:_numberSingle];
    [w writeDouble:_numberDouble];
    [w writeBool:_boolValue];
    [w writeString:_stringValue];
    [w writeInt32:_enumValue];
    [_other write:w];
    if (_self != nil) { [w writeInt8:0x01]; [_self write:w]; }
    else { [w writeInt8:0x00]; }
    [w writeUInt32:(uint32_t)[_listI08 count]];
    for (id n1 in _listI08) {
        [w writeInt8:[n1 charValue]];
    }
    [w writeUInt32:(uint32_t)[_dictI08 count]];
    for (id k1 in _dictI08) {
        [w writeInt8:[k1 charValue]];
        int8_t v1 = [[_dictI08 objectForKey:k1] charValue]; [w writeInt8:v1];
    }
    if (_hotfix != nil) {
        [w writeInt8:0x01];
        [w writeUInt32:(uint32_t)[_hotfix count]];
        for (id k1 in _hotfix) {
            [w writeString:k1];
            NSString *v1 = [_hotfix objectForKey:k1];
            [w writeString:v1];
        }
    } else {
        [w writeInt8:0x00];
    }
    return 0;
}
/* TestRefer::write */

- (NSString *)toStringJSON;
{
    NSMutableString *s = [[NSMutableString alloc] init] ;
    [self writeJSON:s];
    return s;
}

- (void)writeJSON:(NSMutableString *)s
{
    [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
    NSString *comma = nil;
    [s appendString:QUOTATION_S]; [s appendString:@"numberi08"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberi08)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberi16"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberi16)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberi32"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberi32)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberi64"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberi64)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberu08"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberu08)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberu16"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberu16)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberu32"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberu32)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberu64"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberu64)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberSingle"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberSingle)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"numberDouble"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_numberDouble)];
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"boolValue"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendString:_boolValue ? @"true" : @"false"];
    BOOL stringValueExists = (_stringValue && [_stringValue length] > 0);
    if (comma && stringValueExists) { [s appendString:comma]; comma = nil; }
    if (stringValueExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"stringValue"]; [s appendString:QUOTATION_S];
        [s appendString:COLON_S]; [s appendString:QUOTATION_S]; [s appendString:_stringValue]; [s appendString:QUOTATION_S]; comma = COMMA_S;
    }
    if (comma) { [s appendString:comma]; comma = nil; }
    [s appendString:QUOTATION_S]; [s appendString:@"enumValue"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
    comma = COMMA_S; [s appendFormat:FORMAT_S, @(_enumValue)];
    BOOL otherExists = (nil != _other);
    if (comma && otherExists) { [s appendString:comma]; comma = nil; }
    if (otherExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"other"]; [s appendString:QUOTATION_S];
        [s appendString:COLON_S]; [_other writeJSON:s]; comma = COMMA_S;
    }
    BOOL selfExists = (nil != _self);
    if (comma && selfExists) { [s appendString:comma]; comma = nil; }
    if (selfExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"self"]; [s appendString:QUOTATION_S];
        [s appendString:COLON_S]; [_self writeJSON:s]; comma = COMMA_S;
    }
    BOOL listI08Exists = (nil != _listI08 && [_listI08 count] > 0);
    if (comma && listI08Exists) { [s appendString:comma]; comma = nil; }
    if (listI08Exists) {
        [s appendString:QUOTATION_S]; [s appendString:@"listI08"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger listI08Size = (nil == _listI08 ? 0 : [_listI08 count]);
        if (listI08Size > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_SQUARE_S];
            int listI08Idx = 0;
            for (id n1 in _listI08) {/* vec.for: _listI08 */
                ++listI08Idx;
                [s appendFormat:FORMAT_S, n1];
                if (listI08Idx != listI08Size) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_SQUARE_S];
        } comma = COMMA_S;
    }
    BOOL dictI08Exists = (nil != _dictI08 && [_dictI08 count] > 0);
    if (comma && dictI08Exists) { [s appendString:comma]; comma = nil; }
    if (dictI08Exists) {
        [s appendString:QUOTATION_S]; [s appendString:@"dictI08"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger dictI08Size = (nil == _dictI08 ? 0 : [_dictI08 count]);
        if (dictI08Size > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
            int dictI08Idx = 0;
            for (id k1 in _dictI08) { /* map.for: _dictI08 */
                ++dictI08Idx;
                [s appendString:QUOTATION_S]; [s appendFormat:FORMAT_S, k1];
                [s appendString:QUOTATION_S]; [s appendString:COLON_S]; /* nest.k */
                id v1 = [_dictI08 objectForKey:k1];
                [s appendFormat:FORMAT_S, v1]; /* nest.v */
                if (dictI08Idx != dictI08Size) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_CURLY_S];
        } comma = COMMA_S;
    }
    BOOL hotfixExists = (nil != _hotfix && [_hotfix count] > 0);
    if (comma && hotfixExists) { [s appendString:comma]; comma = nil; }
    if (hotfixExists) {
        [s appendString:QUOTATION_S]; [s appendString:@"hotfix"]; [s appendString:QUOTATION_S]; [s appendString:COLON_S];
        NSUInteger hotfixSize = (nil == _hotfix ? 0 : [_hotfix count]);
        if (hotfixSize > 0) {
            [s appendString:LINE_FEED_S]; [s appendString:LEFT_CURLY_S];
            int hotfixIdx = 0;
            for (id k1 in _hotfix) { /* map.for: _hotfix */
                ++hotfixIdx;
                [s appendString:QUOTATION_S]; [s appendString:k1]; [s appendString:QUOTATION_S]; [s appendString:COLON_S]; /* nest.k.string */
                id v1 = [_hotfix objectForKey:k1];
                [s appendString:QUOTATION_S]; [s appendString:v1]; [s appendString:QUOTATION_S]; /* nest.v */
                if (hotfixIdx != hotfixSize) { [s appendString:COMMA_S]; }
            }
            [s appendString:RIGHT_CURLY_S];
        } comma = COMMA_S;
    }
    [s appendString:RIGHT_CURLY_S]; [s appendString:LINE_FEED_S];
}
/* TestRefer::writeJSON */

@end /* @implementation TestRefer */

