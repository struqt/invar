/*===----------------------------*  Java  *--------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/
package test.abc;

import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;

/** 基础类型 */
public final class TestBasic
implements
invar.InvarCodec.BinaryDecode,
invar.InvarCodec.BinaryEncode,
invar.InvarCodec.XMLEncode
{
    static public final long CRC32 = 0xF60C9915;

    static public TestBasic Create() {
        return new TestBasic();
    }

    private java.lang.Byte    numberI08   ;/* 有符号的8位整数 */
    private Short             numberI16   ;/* 有符号的16位整数 */
    private Integer           numberI32   ;/* 有符号的32位整数 */
    private Long              numberI64   ;/* 有符号的64位整数 */
    private java.lang.Integer numberU08   ;/* 无符号的8位整数 */
    private java.lang.Integer numberU16   ;/* 无符号的16位整数 */
    private java.lang.Long    numberU32   ;/* 无符号的32位整数 */
    private BigInteger        numberU64   ;/* 无符号的64位整数 */
    private Float             numberSingle;/* 单精度浮点小数 */
    private java.lang.Double  numberDouble;/* 双精度浮点小数 */
    private java.lang.Boolean boolValue   ;/* 布尔值 */
    private java.lang.String  stringValue ;/* 字符串 */
    private Gender            enumValue   ;/* 枚举值 */
    private Gender            enumDeft    ;/* 枚举值制定默认值 */

    public TestBasic()
    {
        numberI08    = -128;
        numberI16    = -32768;
        numberI32    = -2147483648;
        numberI64    = -9223372036854774808L;
        numberU08    = 255;
        numberU16    = 65535;
        numberU32    = 4294967295L;
        numberU64    = new BigInteger("18446744073709551615", 10);
        numberSingle = 3.14159F;
        numberDouble = 3.1415926;
        boolValue    = false;
        stringValue  = "hello世界";
        enumValue    = Gender.NONE;
        enumDeft     = Gender.MALE;
    }

    public TestBasic reuse()
    {
        numberI08 = -128;
        numberI16 = -32768;
        numberI32 = -2147483648;
        numberI64 = -9223372036854774808L;
        numberU08 = 255;
        numberU16 = 65535;
        numberU32 = 4294967295L;
        numberU64 = new BigInteger("18446744073709551615", 10);
        numberSingle = 3.14159F;
        numberDouble = 3.1415926;
        boolValue = false;
        stringValue = "hello世界";
        enumValue = Gender.NONE;
        enumDeft = Gender.MALE;
        return this;
    }

    /** 有符号的8位整数 */
    @invar.InvarRule(T="int8", S="f0")
    public java.lang.Byte getNumberI08() { return numberI08; }

    /** 有符号的16位整数 */
    @invar.InvarRule(T="int16", S="f1")
    public Short getNumberI16() { return numberI16; }

    /** 有符号的32位整数 */
    @invar.InvarRule(T="int32", S="f2")
    public Integer getNumberI32() { return numberI32; }

    /** 有符号的64位整数 */
    @invar.InvarRule(T="int64", S="f3")
    public Long getNumberI64() { return numberI64; }

    /** 无符号的8位整数 */
    @invar.InvarRule(T="uint8", S="f4")
    public java.lang.Integer getNumberU08() { return numberU08; }

    /** 无符号的16位整数 */
    @invar.InvarRule(T="uint16", S="f5")
    public java.lang.Integer getNumberU16() { return numberU16; }

    /** 无符号的32位整数 */
    @invar.InvarRule(T="uint32", S="f6")
    public java.lang.Long getNumberU32() { return numberU32; }

    /** 无符号的64位整数 */
    @invar.InvarRule(T="uint64", S="f7")
    public BigInteger getNumberU64() { return numberU64; }

    /** 单精度浮点小数 */
    @invar.InvarRule(T="float", S="f8")
    public Float getNumberSingle() { return numberSingle; }

    /** 双精度浮点小数 */
    @invar.InvarRule(T="double", S="f9")
    public java.lang.Double getNumberDouble() { return numberDouble; }

    /** 布尔值 */
    @invar.InvarRule(T="bool", S="f10")
    public java.lang.Boolean getBoolValue() { return boolValue; }

    /** 字符串 */
    @invar.InvarRule(T="string", S="f11")
    public java.lang.String getStringValue() { return stringValue; }

    /** 枚举值 */
    @invar.InvarRule(T="test.abc.Gender", S="f12")
    public Gender getEnumValue() { return enumValue; }

    /** 枚举值制定默认值 */
    @invar.InvarRule(T="test.abc.Gender", S="f13")
    public Gender getEnumDeft() { return enumDeft; }

    /** 有符号的8位整数 */
    @invar.InvarRule(T="int8", S="f0")
    public TestBasic setNumberI08(java.lang.Byte value) { this.numberI08 = value; return this; }

    /** 有符号的16位整数 */
    @invar.InvarRule(T="int16", S="f1")
    public TestBasic setNumberI16(Short value) { this.numberI16 = value; return this; }

    /** 有符号的32位整数 */
    @invar.InvarRule(T="int32", S="f2")
    public TestBasic setNumberI32(Integer value) { this.numberI32 = value; return this; }

    /** 有符号的64位整数 */
    @invar.InvarRule(T="int64", S="f3")
    public TestBasic setNumberI64(Long value) { this.numberI64 = value; return this; }

    /** 无符号的8位整数 */
    @invar.InvarRule(T="uint8", S="f4")
    public TestBasic setNumberU08(java.lang.Integer value) { this.numberU08 = value; return this; }

    /** 无符号的16位整数 */
    @invar.InvarRule(T="uint16", S="f5")
    public TestBasic setNumberU16(java.lang.Integer value) { this.numberU16 = value; return this; }

    /** 无符号的32位整数 */
    @invar.InvarRule(T="uint32", S="f6")
    public TestBasic setNumberU32(java.lang.Long value) { this.numberU32 = value; return this; }

    /** 无符号的64位整数 */
    @invar.InvarRule(T="uint64", S="f7")
    public TestBasic setNumberU64(BigInteger value) { this.numberU64 = value; return this; }

    /** 单精度浮点小数 */
    @invar.InvarRule(T="float", S="f8")
    public TestBasic setNumberSingle(Float value) { this.numberSingle = value; return this; }

    /** 双精度浮点小数 */
    @invar.InvarRule(T="double", S="f9")
    public TestBasic setNumberDouble(java.lang.Double value) { this.numberDouble = value; return this; }

    /** 布尔值 */
    @invar.InvarRule(T="bool", S="f10")
    public TestBasic setBoolValue(java.lang.Boolean value) { this.boolValue = value; return this; }

    /** 字符串 */
    @invar.InvarRule(T="string", S="f11")
    public TestBasic setStringValue(java.lang.String value) { this.stringValue = value; return this; }

    /** 枚举值 */
    @invar.InvarRule(T="test.abc.Gender", S="f12")
    public TestBasic setEnumValue(Gender value) { this.enumValue = value; return this; }

    /** 枚举值制定默认值 */
    @invar.InvarRule(T="test.abc.Gender", S="f13")
    public TestBasic setEnumDeft(Gender value) { this.enumDeft = value; return this; }

    public TestBasic copy (TestBasic from)
    {
        if (this == from || from == null) {
            return this;
        }
        numberI08 = from.numberI08;
        numberI16 = from.numberI16;
        numberI32 = from.numberI32;
        numberI64 = from.numberI64;
        numberU08 = from.numberU08;
        numberU16 = from.numberU16;
        numberU32 = from.numberU32;
        numberU64 = from.numberU64;
        numberSingle = from.numberSingle;
        numberDouble = from.numberDouble;
        boolValue = from.boolValue;
        stringValue = from.stringValue;
        enumValue = from.enumValue;
        enumDeft = from.enumDeft;
        return this;
    } //copyFrom(...)

    public void read(InputStream from) throws IOException
    {
        this.read((DataInput)new DataInputStream(from));
    }

    public void read(DataInput from) throws IOException
    {
        numberI08 = from.readByte();
        numberI16 = from.readShort();
        numberI32 = from.readInt();
        numberI64 = from.readLong();
        numberU08 = from.readUnsignedByte();
        numberU16 = from.readUnsignedShort();
        numberU32 = from.readInt() & 0xFFFFFFFFL;
        byte[] numberU64Bytes = new byte[8]; from.readFully(numberU64Bytes, 0, 8);
        numberU64 = new BigInteger(numberU64Bytes);
        numberSingle = from.readFloat();
        numberDouble = from.readDouble();
        boolValue = from.readBoolean();
        stringValue = from.readUTF();
        enumValue = Gender.valueOf(from.readInt());
        enumDeft = Gender.valueOf(from.readInt());
    }

    public void write(OutputStream from) throws IOException
    {
        this.write((DataOutput)new DataOutputStream(from));
    }

    public void write(DataOutput dest) throws IOException
    {
        dest.writeByte(numberI08);
        dest.writeShort(numberI16);
        dest.writeInt(numberI32);
        dest.writeLong(numberI64);
        dest.writeByte(numberU08);
        dest.writeShort(numberU16);
        dest.writeInt(numberU32.intValue());
        dest.writeLong(numberU64.longValue());
        dest.writeFloat(numberSingle);
        dest.writeDouble(numberDouble);
        dest.writeBoolean(boolValue);
        dest.writeUTF(stringValue);
        dest.writeInt(enumValue.getValue());
        dest.writeInt(enumDeft.getValue());
    }

    public StringBuilder toStringXML (String name)
    {
        StringBuilder result = new StringBuilder();
        StringBuilder attrs  = new StringBuilder();
        StringBuilder nodes  = new StringBuilder();
        attrs.append(" numberI08=\"");
        attrs.append(numberI08.toString()); attrs.append("\"");
        attrs.append(" numberI16=\"");
        attrs.append(numberI16.toString()); attrs.append("\"");
        attrs.append(" numberI32=\"");
        attrs.append(numberI32.toString()); attrs.append("\"");
        attrs.append(" numberI64=\"");
        attrs.append(numberI64.toString()); attrs.append("\"");
        attrs.append(" numberU08=\"");
        attrs.append(numberU08.toString()); attrs.append("\"");
        attrs.append(" numberU16=\"");
        attrs.append(numberU16.toString()); attrs.append("\"");
        attrs.append(" numberU32=\"");
        attrs.append(numberU32.toString()); attrs.append("\"");
        attrs.append(" numberU64=\"");
        attrs.append(numberU64.toString()); attrs.append("\"");
        attrs.append(" numberSingle=\"");
        attrs.append(numberSingle.toString()); attrs.append("\"");
        attrs.append(" numberDouble=\"");
        attrs.append(numberDouble.toString()); attrs.append("\"");
        attrs.append(" boolValue=\"");
        attrs.append(boolValue.toString()); attrs.append("\"");
        attrs.append(" stringValue=\"");
        attrs.append(stringValue); attrs.append("\"");
        attrs.append(" enumValue=\"");
        attrs.append(enumValue.toString()); attrs.append("\"");
        attrs.append(" enumDeft=\"");
        attrs.append(enumDeft.toString()); attrs.append("\"");
        result.append("<"); result.append(name); result.append(attrs);
        if (nodes.length() == 0) {
            result.append("/>");
        } else {
            result.append(">");
            result.append(nodes);
            result.append("</"); result.append(name); result.append(">");
        }
        return result;
    } //TestBasic::toStringXML (String name)

    public String toString ()
    {
        StringBuilder result = new StringBuilder();
        result.append("{ ");
        result.append(getClass().getName());
        result.append(", numberI08:");
        result.append(numberI08.toString());
        result.append(", numberI16:");
        result.append(numberI16.toString());
        result.append(", numberI32:");
        result.append(numberI32.toString());
        result.append(", numberI64:");
        result.append(numberI64.toString());
        result.append(", numberU08:");
        result.append(numberU08.toString());
        result.append(", numberU16:");
        result.append(numberU16.toString());
        result.append(", numberU32:");
        result.append(numberU32.toString());
        result.append(", numberU64:");
        result.append(numberU64.toString());
        result.append(", numberSingle:");
        result.append(numberSingle.toString());
        result.append(", numberDouble:");
        result.append(numberDouble.toString());
        result.append(", boolValue:");
        result.append(boolValue.toString());
        result.append(", stringValue:");
        result.append("\"" + stringValue + "\"");
        result.append(", enumValue:");
        result.append(enumValue.toString());
        result.append(", enumDeft:");
        result.append(enumDeft.toString());
        result.append(" }");
        return result.toString();
    } //TestBasic::toString ()

}

