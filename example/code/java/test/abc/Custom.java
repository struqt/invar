/*===----------------------------*  Java  *--------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/
package test.abc;

import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.LinkedList;

/** 自定义类型 */
public final class Custom
implements
invar.InvarCodec.BinaryDecode,
invar.InvarCodec.BinaryEncode,
invar.InvarCodec.XMLEncode
{
    static public Custom Create() { return new Custom(); }

    static public final long CRC32 = 0x355EC042;

    private Gender             x       ;/* 枚举值 */
    private TestBasic          test    ;/* 其他类型 */
    private test.xyz.Conflict  xyz     ;/* 同名的类型 */
    private test.abc.Conflict  abc     ;/* 同名的类型 */
    private LinkedList<Custom> children;/* 自身类型容器 */
    private Integer            noSetter;/* 屏蔽Setter */
    private java.lang.String   useRef  ;/* 使用引用 */
    private java.lang.String   usePtr  ;/* 使用指针 */
    private Custom             prev    ;/* 自身类型 */
    private Custom             next    ;/* 自身类型 */
    private java.lang.String   emptyDoc;

    public Custom()
    {
        x        = Gender.NONE;
        test     = new TestBasic();
        xyz      = new test.xyz.Conflict();
        abc      = new test.abc.Conflict();
        children = new LinkedList<Custom>();
        noSetter = -1;
        useRef   = "";
        usePtr   = null;
        prev     = null;
        next     = null;
        emptyDoc = "";
    }

    public Custom reuse()
    {
        x = Gender.NONE;
        test.reuse();
        xyz.reuse();
        abc.reuse();
        children.clear();
        noSetter = -1;
        useRef = "";
        if (usePtr != null) {
            usePtr = "";
        }
        if (prev != null) {
            prev.reuse();
        }
        if (next != null) {
            next.reuse();
        }
        emptyDoc = "";
        return this;
    }

    /** 枚举值 */
    @invar.InvarRule(T="test.abc.Gender", S="f0")
    public Gender getX() { return x; }

    /** 其他类型 */
    @invar.InvarRule(T="test.abc.TestBasic", S="f1")
    public TestBasic getTest() { return test; }

    /** 同名的类型 */
    @invar.InvarRule(T="test.xyz.Conflict", S="f2")
    public test.xyz.Conflict getXyz() { return xyz; }

    /** 同名的类型 */
    @invar.InvarRule(T="test.abc.Conflict", S="f3")
    public test.abc.Conflict getAbc() { return abc; }

    /** 自身类型容器 */
    @invar.InvarRule(T="vec<test.abc.Custom>", S="f4")
    public LinkedList<Custom> getChildren() { return children; }

    /** 屏蔽Setter */
    @invar.InvarRule(T="int32", S="f5")
    public Integer getNoSetter() { return noSetter; }

    /** 使用引用 */
    @invar.InvarRule(T="string", S="f6")
    public java.lang.String getUseRef() { return useRef; }

    /** 使用指针 */
    @invar.InvarRule(T="string", S="f7")
    public java.lang.String getUsePtr() { return usePtr; }

    /** 自身类型 */
    @invar.InvarRule(T="test.abc.Custom", S="f8")
    public Custom getPrev() { return prev; }

    /** 自身类型 */
    @invar.InvarRule(T="test.abc.Custom", S="f9")
    public Custom getNext() { return next; }

    /**  */
    @invar.InvarRule(T="string", S="f10")
    public java.lang.String getEmptyDoc() { return emptyDoc; }

    /** 枚举值 */
    @invar.InvarRule(T="test.abc.Gender", S="f0")
    public Custom setX(Gender value) { this.x = value; return this; }

    /** 其他类型 */
    @invar.InvarRule(T="test.abc.TestBasic", S="f1")
    public Custom setTest(TestBasic value) { this.test = value; return this; }

    /** 同名的类型 */
    @invar.InvarRule(T="test.xyz.Conflict", S="f2")
    public Custom setXyz(test.xyz.Conflict value) { this.xyz = value; return this; }

    /** 同名的类型 */
    @invar.InvarRule(T="test.abc.Conflict", S="f3")
    public Custom setAbc(test.abc.Conflict value) { this.abc = value; return this; }

    /** 使用引用 */
    @invar.InvarRule(T="string", S="f6")
    public Custom setUseRef(java.lang.String value) { this.useRef = value; return this; }

    /** 使用指针 */
    @invar.InvarRule(T="string", S="f7")
    public Custom setUsePtr(java.lang.String value) { this.usePtr = value; return this; }

    /** 自身类型 */
    @invar.InvarRule(T="test.abc.Custom", S="f8")
    public Custom setPrev(Custom value) { this.prev = value; return this; }

    /** 自身类型 */
    @invar.InvarRule(T="test.abc.Custom", S="f9")
    public Custom setNext(Custom value) { this.next = value; return this; }

    /**  */
    @invar.InvarRule(T="string", S="f10")
    public Custom setEmptyDoc(java.lang.String value) { this.emptyDoc = value; return this; }

    public Custom copy (Custom from)
    {
        if (this == from || from == null) {
            return this;
        }
        x = from.x;
        test = from.test;
        xyz = from.xyz;
        abc = from.abc;
        children.clear();
        children.addAll(from.children);
        noSetter = from.noSetter;
        useRef = from.useRef;
        usePtr = from.usePtr;
        if (from.prev != null) {
            prev.copy(from.prev);
        } else {
            prev = null;
        }
        if (from.next != null) {
            next.copy(from.next);
        } else {
            next = null;
        }
        emptyDoc = from.emptyDoc;
        return this;
    } //copyFrom(...)

    public void read(InputStream from) throws IOException
    {
        this.read((DataInput)new DataInputStream(from));
    }

    public void read(DataInput from) throws IOException
    {
        x = Gender.valueOf(from.readInt());
        test.read(from);
        xyz.read(from);
        abc.read(from);
        children.clear();
        Long lenChildren = from.readInt() & 0xFFFFFFFFL;
        for (Long iChildren = 0L; iChildren < lenChildren; ++iChildren) {
            Custom n1 = new Custom();
            n1.read(from);
            children.add(n1);
        }
        noSetter = from.readInt();
        useRef = from.readUTF();
        if (from.readByte() == (byte)0x01) {
            usePtr = from.readUTF();
        }
        if (from.readByte() == (byte)0x01) {
            prev.read(from);
        }
        if (from.readByte() == (byte)0x01) {
            next.read(from);
        }
        emptyDoc = from.readUTF();
    }

    public void write(OutputStream from) throws IOException
    {
        this.write((DataOutput)new DataOutputStream(from));
    }

    public void write(DataOutput dest) throws IOException
    {
        dest.writeInt(x.getValue());
        test.write(dest);
        xyz.write(dest);
        abc.write(dest);
        dest.writeInt(children.size());
        for (Custom n1 : children) {
            n1.write(dest);
        }
        dest.writeInt(noSetter);
        dest.writeUTF(useRef);
        if (usePtr != null) {
            dest.writeByte((byte)0x01);
            dest.writeUTF(usePtr);
        } else {
            dest.writeByte((byte)0x00);
        }
        if (prev != null) {
            dest.writeByte((byte)0x01);
            prev.write(dest);
        } else {
            dest.writeByte((byte)0x00);
        }
        if (next != null) {
            dest.writeByte((byte)0x01);
            next.write(dest);
        } else {
            dest.writeByte((byte)0x00);
        }
        dest.writeUTF(emptyDoc);
    }

    public StringBuilder toStringXML (String name)
    {
        StringBuilder result = new StringBuilder();
        StringBuilder attrs  = new StringBuilder();
        StringBuilder nodes  = new StringBuilder();
        attrs.append(" x=\"");
        attrs.append(x.toString()); attrs.append("\"");
        nodes.append(test.toStringXML("test"));
        nodes.append(xyz.toStringXML("xyz"));
        nodes.append(abc.toStringXML("abc"));
        if (children.size() > 0) {
            nodes.append("<children>");
            for (Custom n1 : children) {
                nodes.append(n1.toStringXML("n1"));
            }
            nodes.append("</children>");
        }
        attrs.append(" noSetter=\"");
        attrs.append(noSetter.toString()); attrs.append("\"");
        attrs.append(" useRef=\"");
        attrs.append(useRef); attrs.append("\"");
        if (usePtr != null) {
            attrs.append(" usePtr=\"");
            attrs.append(usePtr); attrs.append("\"");
        }
        if (prev != null) {
            nodes.append(prev.toStringXML("prev"));
        }
        if (next != null) {
            nodes.append(next.toStringXML("next"));
        }
        attrs.append(" emptyDoc=\"");
        attrs.append(emptyDoc); attrs.append("\"");
        result.append("<"); result.append(name); result.append(attrs);
        if (nodes.length() == 0) {
            result.append("/>");
        } else {
            result.append(">");
            result.append(nodes);
            result.append("</"); result.append(name); result.append(">");
        }
        return result;
    } //Custom::toStringXML (String name)

    public String toString ()
    {
        StringBuilder result = new StringBuilder();
        result.append("{ ");
        result.append(getClass().getName());
        result.append(", x:");
        result.append(x.toString());
        result.append(", test:");
        result.append("<TestBasic>");
        result.append(", xyz:");
        result.append("<test.xyz.Conflict>");
        result.append(", abc:");
        result.append("<test.abc.Conflict>");
        result.append(", children:");
        result.append("(" + children.size() + ")");
        result.append(", noSetter:");
        result.append(noSetter.toString());
        result.append(", useRef:");
        result.append("\"" + useRef + "\"");
        result.append(", usePtr:");
        if (usePtr != null) {
            result.append("\"" + usePtr + "\"");
        } else {
            result.append("null");
        }
        result.append(", prev:");
        if (prev != null) {
            result.append("<Custom>");
        } else {
            result.append("null");
        }
        result.append(", next:");
        if (next != null) {
            result.append("<Custom>");
        } else {
            result.append("null");
        }
        result.append(", emptyDoc:");
        result.append("\"" + emptyDoc + "\"");
        result.append(" }");
        return result.toString();
    } //Custom::toString ()

}

