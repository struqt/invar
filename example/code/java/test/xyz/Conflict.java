/*===----------------------------*  Java  *--------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/
package test.xyz;

import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.LinkedHashMap;
import java.util.Map;

/**  */
public final class Conflict
{
    static public final long CRC32 = 0x2126E985;

    private java.lang.Double             pi    ;
    private LinkedHashMap<String,String> hotfix;/* [AutoAdd] Hotfix */

    public Conflict()
    {
        pi     = 3.1415926;
        hotfix = null;
    }

    public Conflict reuse()
    {
        pi = 3.1415926;
        if (hotfix != null) {
            hotfix.clear();
        }
        return this;
    }

    /**  */
    @invar.InvarRule(T="double", S="f0")
    public java.lang.Double getPi() { return pi; }

    /** [AutoAdd] Hotfix */
    @invar.InvarRule(T="map<string,string>", S="f1")
    public LinkedHashMap<String,String> getHotfix() { return hotfix; }

    /**  */
    @invar.InvarRule(T="double", S="f0")
    public Conflict setPi(java.lang.Double value) { this.pi = value; return this; }

    /** [AutoAdd] Hotfix */
    @invar.InvarRule(T="map<string,string>", S="f1")
    public Conflict setHotfix(LinkedHashMap<String,String> value) { this.hotfix = value; return this; }

    public Conflict copy (Conflict from)
    {
        if (this == from || from == null) {
            return this;
        }
        pi = from.pi;
        if (from.hotfix != null) {
            hotfix.clear();
            hotfix.putAll(from.hotfix);
        } else {
            hotfix = null;
        }
        return this;
    } //copyFrom(...)

    public Conflict read(InputStream from) throws IOException
    {
        return this.read((DataInput)new DataInputStream(from));
    }

    public Conflict read(DataInput from) throws IOException
    {
        pi = from.readDouble();
        hotfix.clear();
        if (from.readByte() == (byte)0x01) {
            Long lenHotfix = from.readInt() & 0xFFFFFFFFL;
            for (Long iHotfix = 0L; iHotfix < lenHotfix; ++iHotfix) {
                java.lang.String k1 = from.readUTF();
                java.lang.String v1 = from.readUTF();
                hotfix.put(k1,v1);
            }
        }
        return this;
    }

    public Conflict writeStream(OutputStream from) throws IOException
    {
        return this.write((DataOutput)new DataOutputStream(from));
    }

    public Conflict write(DataOutput dest) throws IOException
    {
        dest.writeDouble(pi);
        if (hotfix != null) {
            dest.writeByte((byte)0x01);
            dest.writeInt(hotfix.size());
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                dest.writeUTF(k1);
                java.lang.String v1 = hotfixIter.getValue();
                dest.writeUTF(v1);
            }
        } else {
            dest.writeByte((byte)0x00);
        }
        return this;
    }

    public String toStringXml (String name)
    {
        StringBuilder result = new StringBuilder();
        StringBuilder attrs  = new StringBuilder();
        StringBuilder nodes  = new StringBuilder();
        attrs.append(" pi=\"");
        attrs.append(pi.toString()); attrs.append("\"");
        if (hotfix != null && hotfix.size() > 0) {
            nodes.append("<hotfix>");
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                nodes.append("<k1 value=\"");
                nodes.append(k1);
                nodes.append("\">");
                java.lang.String v1 = hotfixIter.getValue();
                nodes.append("<v1 value=\"");
                nodes.append(v1);
                nodes.append("\">");
            }
            nodes.append("</hotfix>");
        }
        result.append("<"); result.append(name); result.append(attrs);
        if (nodes.length() == 0) {
            result.append("/>");
        } else {
            result.append(">");
            result.append(nodes);
            result.append("</"); result.append(name); result.append(">");
        }
        return result.toString();
    } //Conflict::toStringXml (String name)

    public String toString ()
    {
        StringBuilder result = new StringBuilder();
        result.append("{ ");
        result.append(getClass().getName());
        result.append(", pi:");
        result.append(pi.toString());
        result.append(", hotfix:");
        if (hotfix != null) {
            result.append("[" + hotfix.size() + "]");
        } else {
            result.append("null");
        }
        result.append(" }");
        return result.toString();
    } //Conflict::toString ()

}

