/*===----------------------------*  Java  *--------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===*/
package test.xyz;

import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;
import test.abc.Custom;
import test.abc.Gender;

/** 指针类型测试 */
public final class TestPointer
{
    static public final long CRC32 = 0x6348C9B7;

    private TestPointer                                                 self        ;
    private java.lang.String                                            stringValue ;
    private Custom                                                      other       ;
    private LinkedList<Byte>                                            listI08     ;
    private LinkedHashMap<Byte,Byte>                                    dictI08     ;
    private LinkedList<LinkedList<LinkedList<LinkedList<TestPointer>>>> listNested  ;
    private Float                                                       numberSingle;
    private Gender                                                      enumValue   ;
    private LinkedHashMap<String,String>                                hotfix      ;/* [AutoAdd] Hotfix */

    public TestPointer()
    {
        self         = null;
        stringValue  = null;
        other        = null;
        listI08      = null;
        dictI08      = null;
        listNested   = null;
        numberSingle = 0.0F;
        enumValue    = Gender.NONE;
        hotfix       = null;
    }

    public TestPointer reuse()
    {
        if (self != null) {
            self.reuse();
        }
        if (stringValue != null) {
            stringValue = "";
        }
        if (other != null) {
            other.reuse();
        }
        if (listI08 != null) {
            listI08.clear();
        }
        if (dictI08 != null) {
            dictI08.clear();
        }
        if (listNested != null) {
            listNested.clear();
        }
        numberSingle = 0.0F;
        enumValue = Gender.NONE;
        if (hotfix != null) {
            hotfix.clear();
        }
        return this;
    }

    /**  */
    @invar.InvarRule(T="test.xyz.TestPointer", S="f0")
    public TestPointer getSelf() { return self; }

    /**  */
    @invar.InvarRule(T="string", S="f1")
    public java.lang.String getStringValue() { return stringValue; }

    /**  */
    @invar.InvarRule(T="test.abc.Custom", S="f2")
    public Custom getOther() { return other; }

    /**  */
    @invar.InvarRule(T="vec<int8>", S="f3")
    public LinkedList<Byte> getListI08() { return listI08; }

    /**  */
    @invar.InvarRule(T="map<int8,int8>", S="f4")
    public LinkedHashMap<Byte,Byte> getDictI08() { return dictI08; }

    /**  */
    @invar.InvarRule(T="vec<vec<vec<vec<test.xyz.TestPointer>>>>", S="f5")
    public LinkedList<LinkedList<LinkedList<LinkedList<TestPointer>>>> getListNested() { return listNested; }

    /**  */
    @invar.InvarRule(T="float", S="f6")
    public Float getNumberSingle() { return numberSingle; }

    /**  */
    @invar.InvarRule(T="test.abc.Gender", S="f7")
    public Gender getEnumValue() { return enumValue; }

    /** [AutoAdd] Hotfix */
    @invar.InvarRule(T="map<string,string>", S="f8")
    public LinkedHashMap<String,String> getHotfix() { return hotfix; }

    /**  */
    @invar.InvarRule(T="test.xyz.TestPointer", S="f0")
    public TestPointer setSelf(TestPointer value) { this.self = value; return this; }

    /**  */
    @invar.InvarRule(T="string", S="f1")
    public TestPointer setStringValue(java.lang.String value) { this.stringValue = value; return this; }

    /**  */
    @invar.InvarRule(T="test.abc.Custom", S="f2")
    public TestPointer setOther(Custom value) { this.other = value; return this; }

    /**  */
    @invar.InvarRule(T="vec<int8>", S="f3")
    public TestPointer setListI08(LinkedList<Byte> value) { this.listI08 = value; return this; }

    /**  */
    @invar.InvarRule(T="map<int8,int8>", S="f4")
    public TestPointer setDictI08(LinkedHashMap<Byte,Byte> value) { this.dictI08 = value; return this; }

    /**  */
    @invar.InvarRule(T="vec<vec<vec<vec<test.xyz.TestPointer>>>>", S="f5")
    public TestPointer setListNested(LinkedList<LinkedList<LinkedList<LinkedList<TestPointer>>>> value) { this.listNested = value; return this; }

    /**  */
    @invar.InvarRule(T="float", S="f6")
    public TestPointer setNumberSingle(Float value) { this.numberSingle = value; return this; }

    /**  */
    @invar.InvarRule(T="test.abc.Gender", S="f7")
    public TestPointer setEnumValue(Gender value) { this.enumValue = value; return this; }

    /** [AutoAdd] Hotfix */
    @invar.InvarRule(T="map<string,string>", S="f8")
    public TestPointer setHotfix(LinkedHashMap<String,String> value) { this.hotfix = value; return this; }

    public TestPointer copy (TestPointer from)
    {
        if (this == from || from == null) {
            return this;
        }
        if (from.self != null) {
            self.copy(from.self);
        } else {
            self = null;
        }
        stringValue = from.stringValue;
        if (from.other != null) {
            other.copy(from.other);
        } else {
            other = null;
        }
        if (from.listI08 != null) {
            listI08.clear();
            listI08.addAll(from.listI08);
        } else {
            listI08 = null;
        }
        if (from.dictI08 != null) {
            dictI08.clear();
            dictI08.putAll(from.dictI08);
        } else {
            dictI08 = null;
        }
        if (from.listNested != null) {
            listNested.clear();
            listNested.addAll(from.listNested);
        } else {
            listNested = null;
        }
        numberSingle = from.numberSingle;
        enumValue = from.enumValue;
        if (from.hotfix != null) {
            hotfix.clear();
            hotfix.putAll(from.hotfix);
        } else {
            hotfix = null;
        }
        return this;
    } //copyFrom(...)

    public TestPointer read(InputStream from) throws IOException
    {
        return this.read((DataInput)new DataInputStream(from));
    }

    public TestPointer read(DataInput from) throws IOException
    {
        if (from.readByte() == (byte)0x01) {
            self.read(from);
        }
        if (from.readByte() == (byte)0x01) {
            stringValue = from.readUTF();
        }
        if (from.readByte() == (byte)0x01) {
            other.read(from);
        }
        listI08.clear();
        if (from.readByte() == (byte)0x01) {
            Long lenListI08 = from.readInt() & 0xFFFFFFFFL;
            for (Long iListI08 = 0L; iListI08 < lenListI08; ++iListI08) {
                java.lang.Byte n1 = from.readByte();
                listI08.add(n1);
            }
        }
        dictI08.clear();
        if (from.readByte() == (byte)0x01) {
            Long lenDictI08 = from.readInt() & 0xFFFFFFFFL;
            for (Long iDictI08 = 0L; iDictI08 < lenDictI08; ++iDictI08) {
                java.lang.Byte k1 = from.readByte();
                java.lang.Byte v1 = from.readByte();
                dictI08.put(k1,v1);
            }
        }
        listNested.clear();
        if (from.readByte() == (byte)0x01) {
            Long lenListNested = from.readInt() & 0xFFFFFFFFL;
            for (Long iListNested = 0L; iListNested < lenListNested; ++iListNested) {
                LinkedList<LinkedList<LinkedList<TestPointer>>> n1 = new LinkedList<LinkedList<LinkedList<TestPointer>>>(); //read.vec.head
                Long lenN1 = from.readInt() & 0xFFFFFFFFL;
                for (Long iN1 = 0L; iN1 < lenN1; ++iN1) {
                    LinkedList<LinkedList<TestPointer>> n2 = new LinkedList<LinkedList<TestPointer>>(); //read.vec.head
                    Long lenN2 = from.readInt() & 0xFFFFFFFFL;
                    for (Long iN2 = 0L; iN2 < lenN2; ++iN2) {
                        LinkedList<TestPointer> n3 = new LinkedList<TestPointer>(); //read.vec.head
                        Long lenN3 = from.readInt() & 0xFFFFFFFFL;
                        for (Long iN3 = 0L; iN3 < lenN3; ++iN3) {
                            TestPointer n4 = new TestPointer();
                            n4.read(from);
                            n3.add(n4);
                        }
                        n2.add(n3);
                    }
                    n1.add(n2);
                }
                listNested.add(n1);
            }
        }
        numberSingle = from.readFloat();
        enumValue = Gender.valueOf(from.readInt());
        hotfix.clear();
        if (from.readByte() == (byte)0x01) {
            Long lenHotfix = from.readInt() & 0xFFFFFFFFL;
            for (Long iHotfix = 0L; iHotfix < lenHotfix; ++iHotfix) {
                java.lang.String k1 = from.readUTF();
                java.lang.String v1 = from.readUTF();
                hotfix.put(k1,v1);
            }
        }
        return this;
    }

    public TestPointer writeStream(OutputStream from) throws IOException
    {
        return this.write((DataOutput)new DataOutputStream(from));
    }

    public TestPointer write(DataOutput dest) throws IOException
    {
        if (self != null) {
            dest.writeByte((byte)0x01);
            self.write(dest);
        } else {
            dest.writeByte((byte)0x00);
        }
        if (stringValue != null) {
            dest.writeByte((byte)0x01);
            dest.writeUTF(stringValue);
        } else {
            dest.writeByte((byte)0x00);
        }
        if (other != null) {
            dest.writeByte((byte)0x01);
            other.write(dest);
        } else {
            dest.writeByte((byte)0x00);
        }
        if (listI08 != null) {
            dest.writeByte((byte)0x01);
            dest.writeInt(listI08.size());
            for (java.lang.Byte n1 : listI08) {
                dest.writeByte(n1);
            }
        } else {
            dest.writeByte((byte)0x00);
        }
        if (dictI08 != null) {
            dest.writeByte((byte)0x01);
            dest.writeInt(dictI08.size());
            for (Map.Entry<java.lang.Byte,java.lang.Byte> dictI08Iter : dictI08.entrySet()) {
                java.lang.Byte k1 = dictI08Iter.getKey();
                dest.writeByte(k1);
                java.lang.Byte v1 = dictI08Iter.getValue();
                dest.writeByte(v1);
            }
        } else {
            dest.writeByte((byte)0x00);
        }
        if (listNested != null) {
            dest.writeByte((byte)0x01);
            dest.writeInt(listNested.size());
            for (LinkedList<LinkedList<LinkedList<TestPointer>>> n1 : listNested) {
                dest.writeInt(n1.size());
                for (LinkedList<LinkedList<TestPointer>> n2 : n1) {
                    dest.writeInt(n2.size());
                    for (LinkedList<TestPointer> n3 : n2) {
                        dest.writeInt(n3.size());
                        for (TestPointer n4 : n3) {
                            n4.write(dest);
                        }
                    }
                }
            }
        } else {
            dest.writeByte((byte)0x00);
        }
        dest.writeFloat(numberSingle);
        dest.writeInt(enumValue.getValue());
        if (hotfix != null) {
            dest.writeByte((byte)0x01);
            dest.writeInt(hotfix.size());
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                dest.writeUTF(k1);
                java.lang.String v1 = hotfixIter.getValue();
                dest.writeUTF(v1);
            }
        } else {
            dest.writeByte((byte)0x00);
        }
        return this;
    }

    public String toStringXml (String name)
    {
        StringBuilder result = new StringBuilder();
        StringBuilder attrs  = new StringBuilder();
        StringBuilder nodes  = new StringBuilder();
        if (self != null) {
            nodes.append(self.toStringXml("self"));
        }
        if (stringValue != null) {
            attrs.append(" stringValue=\"");
            attrs.append(stringValue); attrs.append("\"");
        }
        if (other != null) {
            nodes.append(other.toStringXml("other"));
        }
        if (listI08 != null && listI08.size() > 0) {
            nodes.append("<listI08>");
            for (java.lang.Byte n1 : listI08) {
                nodes.append("<n1 value=\"");
                nodes.append(n1.toString());
                nodes.append("\">");
            }
            nodes.append("</listI08>");
        }
        if (dictI08 != null && dictI08.size() > 0) {
            nodes.append("<dictI08>");
            for (Map.Entry<java.lang.Byte,java.lang.Byte> dictI08Iter : dictI08.entrySet()) {
                java.lang.Byte k1 = dictI08Iter.getKey();
                nodes.append("<k1 value=\"");
                nodes.append(k1.toString());
                nodes.append("\">");
                java.lang.Byte v1 = dictI08Iter.getValue();
                nodes.append("<v1 value=\"");
                nodes.append(v1.toString());
                nodes.append("\">");
            }
            nodes.append("</dictI08>");
        }
        if (listNested != null && listNested.size() > 0) {
            nodes.append("<listNested>");
            for (LinkedList<LinkedList<LinkedList<TestPointer>>> n1 : listNested) {
                nodes.append("<n1>");
                for (LinkedList<LinkedList<TestPointer>> n2 : n1) {
                    nodes.append("<n2>");
                    for (LinkedList<TestPointer> n3 : n2) {
                        nodes.append("<n3>");
                        for (TestPointer n4 : n3) {
                            nodes.append(n4.toStringXml("n4"));
                        }
                        nodes.append("</n3>");
                    }
                    nodes.append("</n2>");
                }
                nodes.append("</n1>");
            }
            nodes.append("</listNested>");
        }
        attrs.append(" numberSingle=\"");
        attrs.append(numberSingle.toString()); attrs.append("\"");
        attrs.append(" enumValue=\"");
        attrs.append(enumValue.toString()); attrs.append("\"");
        if (hotfix != null && hotfix.size() > 0) {
            nodes.append("<hotfix>");
            for (Map.Entry<java.lang.String,java.lang.String> hotfixIter : hotfix.entrySet()) {
                java.lang.String k1 = hotfixIter.getKey();
                nodes.append("<k1 value=\"");
                nodes.append(k1);
                nodes.append("\">");
                java.lang.String v1 = hotfixIter.getValue();
                nodes.append("<v1 value=\"");
                nodes.append(v1);
                nodes.append("\">");
            }
            nodes.append("</hotfix>");
        }
        result.append("<"); result.append(name); result.append(attrs);
        if (nodes.length() == 0) {
            result.append("/>");
        } else {
            result.append(">");
            result.append(nodes);
            result.append("</"); result.append(name); result.append(">");
        }
        return result.toString();
    } //TestPointer::toStringXml (String name)

    public String toString ()
    {
        StringBuilder result = new StringBuilder();
        result.append("{ ");
        result.append(getClass().getName());
        result.append(", self:");
        if (self != null) {
            result.append("<TestPointer>");
        } else {
            result.append("null");
        }
        result.append(", stringValue:");
        if (stringValue != null) {
            result.append("\"" + stringValue + "\"");
        } else {
            result.append("null");
        }
        result.append(", other:");
        if (other != null) {
            result.append("<Custom>");
        } else {
            result.append("null");
        }
        result.append(", listI08:");
        if (listI08 != null) {
            result.append("(" + listI08.size() + ")");
        } else {
            result.append("null");
        }
        result.append(", dictI08:");
        if (dictI08 != null) {
            result.append("[" + dictI08.size() + "]");
        } else {
            result.append("null");
        }
        result.append(", listNested:");
        if (listNested != null) {
            result.append("(" + listNested.size() + ")");
        } else {
            result.append("null");
        }
        result.append(", numberSingle:");
        result.append(numberSingle.toString());
        result.append(", enumValue:");
        result.append(enumValue.toString());
        result.append(", hotfix:");
        if (hotfix != null) {
            result.append("[" + hotfix.size() + "]");
        } else {
            result.append("null");
        }
        result.append(" }");
        return result.toString();
    } //TestPointer::toString ()

}

